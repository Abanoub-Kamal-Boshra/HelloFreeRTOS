
HelloFreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00004826  000048ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f8  00800080  00800080  000048da  2**0
                  ALLOC
  3 .stab         000061c8  00000000  00000000  000048dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003613  00000000  00000000  0000aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <main>
      8a:	0c 94 11 24 	jmp	0x4822	; 0x4822 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cb 23 	jmp	0x4796	; 0x4796 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9d 83       	std	Y+5, r25	; 0x05
     b5c:	8c 83       	std	Y+4, r24	; 0x04
     b5e:	6e 83       	std	Y+6, r22	; 0x06
     b60:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     b62:	8a e1       	ldi	r24, 0x1A	; 26
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	09 f4       	brne	.+2      	; 0xb78 <xCoRoutineCreate+0x32>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     b78:	80 91 80 00 	lds	r24, 0x0080
     b7c:	90 91 81 00 	lds	r25, 0x0081
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	41 f4       	brne	.+16     	; 0xb94 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	90 93 81 00 	sts	0x0081, r25
     b8c:	80 93 80 00 	sts	0x0080, r24
			prvInitialiseCoRoutineLists();
     b90:	0e 94 0a 08 	call	0x1014	; 0x1014 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	10 f0       	brcs	.+4      	; 0xb9e <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	11 8e       	std	Z+25, r1	; 0x19
     ba4:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	8f 81       	ldd	r24, Y+7	; 0x07
     bb4:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	9d 81       	ldd	r25, Y+5	; 0x05
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	02 96       	adiw	r24, 0x02	; 2
     bc8:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	0c 96       	adiw	r24, 0x0c	; 12
     bd2:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	91 87       	std	Z+9, r25	; 0x09
     be0:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     be2:	e9 81       	ldd	r30, Y+1	; 0x01
     be4:	fa 81       	ldd	r31, Y+2	; 0x02
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	93 8b       	std	Z+19, r25	; 0x13
     bec:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	82 1b       	sub	r24, r18
     bfa:	93 0b       	sbc	r25, r19
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	95 87       	std	Z+13, r25	; 0x0d
     c02:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	96 89       	ldd	r25, Z+22	; 0x16
     c0a:	80 91 82 00 	lds	r24, 0x0082
     c0e:	89 17       	cp	r24, r25
     c10:	28 f4       	brcc	.+10     	; 0xc1c <xCoRoutineCreate+0xd6>
     c12:	e9 81       	ldd	r30, Y+1	; 0x01
     c14:	fa 81       	ldd	r31, Y+2	; 0x02
     c16:	86 89       	ldd	r24, Z+22	; 0x16
     c18:	80 93 82 00 	sts	0x0082, r24
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	86 89       	ldd	r24, Z+22	; 0x16
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	c9 01       	movw	r24, r18
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	ac 01       	movw	r20, r24
     c3a:	47 57       	subi	r20, 0x77	; 119
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	9c 01       	movw	r18, r24
     c44:	2e 5f       	subi	r18, 0xFE	; 254
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	ca 01       	movw	r24, r20
     c4a:	b9 01       	movw	r22, r18
     c4c:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

		xReturn = pdPASS;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c5c:	27 96       	adiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <vCoRoutineAddToDelayedList+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <vCoRoutineAddToDelayedList+0x8>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <vCoRoutineAddToDelayedList+0xa>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	7e 83       	std	Y+6, r23	; 0x06
     c82:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     c84:	20 91 83 00 	lds	r18, 0x0083
     c88:	30 91 84 00 	lds	r19, 0x0084
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     c98:	80 91 80 00 	lds	r24, 0x0080
     c9c:	90 91 81 00 	lds	r25, 0x0081
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     ca6:	e0 91 80 00 	lds	r30, 0x0080
     caa:	f0 91 81 00 	lds	r31, 0x0081
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	93 83       	std	Z+3, r25	; 0x03
     cb4:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     cb6:	20 91 83 00 	lds	r18, 0x0083
     cba:	30 91 84 00 	lds	r19, 0x0084
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	70 f4       	brcc	.+28     	; 0xce4 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     cc8:	80 91 af 00 	lds	r24, 0x00AF
     ccc:	90 91 b0 00 	lds	r25, 0x00B0
     cd0:	20 91 80 00 	lds	r18, 0x0080
     cd4:	30 91 81 00 	lds	r19, 0x0081
     cd8:	2e 5f       	subi	r18, 0xFE	; 254
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	b9 01       	movw	r22, r18
     cde:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     ce4:	80 91 ad 00 	lds	r24, 0x00AD
     ce8:	90 91 ae 00 	lds	r25, 0x00AE
     cec:	20 91 80 00 	lds	r18, 0x0080
     cf0:	30 91 81 00 	lds	r19, 0x0081
     cf4:	2e 5f       	subi	r18, 0xFE	; 254
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
	}

	if( pxEventList )
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     d06:	80 91 80 00 	lds	r24, 0x0080
     d0a:	90 91 81 00 	lds	r25, 0x0081
     d0e:	9c 01       	movw	r18, r24
     d10:	24 5f       	subi	r18, 0xF4	; 244
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
	}
}
     d1e:	26 96       	adiw	r28, 0x06	; 6
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <prvCheckPendingReadyList+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     d3c:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     d3e:	e0 91 b6 00 	lds	r30, 0x00B6
     d42:	f0 91 b7 00 	lds	r31, 0x00B7
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	97 81       	ldd	r25, Z+7	; 0x07
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	0c 96       	adiw	r24, 0x0c	; 12
     d54:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     d58:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	02 96       	adiw	r24, 0x02	; 2
     d60:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	96 89       	ldd	r25, Z+22	; 0x16
     d6a:	80 91 82 00 	lds	r24, 0x0082
     d6e:	89 17       	cp	r24, r25
     d70:	28 f4       	brcc	.+10     	; 0xd7c <prvCheckPendingReadyList+0x4c>
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	86 89       	ldd	r24, Z+22	; 0x16
     d78:	80 93 82 00 	sts	0x0082, r24
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	86 89       	ldd	r24, Z+22	; 0x16
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	c9 01       	movw	r24, r18
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	ac 01       	movw	r20, r24
     d9a:	47 57       	subi	r20, 0x77	; 119
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	9c 01       	movw	r18, r24
     da4:	2e 5f       	subi	r18, 0xFE	; 254
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	ca 01       	movw	r24, r20
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     db0:	80 91 b1 00 	lds	r24, 0x00B1
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <prvCheckPendingReadyList+0x8a>
     db8:	c1 cf       	rjmp	.-126    	; 0xd3c <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <prvCheckDelayedList+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <prvCheckDelayedList+0x8>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     dd0:	0e 94 47 14 	call	0x288e	; 0x288e <xTaskGetTickCount>
     dd4:	20 91 85 00 	lds	r18, 0x0085
     dd8:	30 91 86 00 	lds	r19, 0x0086
     ddc:	82 1b       	sub	r24, r18
     dde:	93 0b       	sbc	r25, r19
     de0:	90 93 88 00 	sts	0x0088, r25
     de4:	80 93 87 00 	sts	0x0087, r24
     de8:	85 c0       	rjmp	.+266    	; 0xef4 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     dea:	80 91 83 00 	lds	r24, 0x0083
     dee:	90 91 84 00 	lds	r25, 0x0084
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	90 93 84 00 	sts	0x0084, r25
     df8:	80 93 83 00 	sts	0x0083, r24
		xPassedTicks--;
     dfc:	80 91 87 00 	lds	r24, 0x0087
     e00:	90 91 88 00 	lds	r25, 0x0088
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	90 93 88 00 	sts	0x0088, r25
     e0a:	80 93 87 00 	sts	0x0087, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     e0e:	80 91 83 00 	lds	r24, 0x0083
     e12:	90 91 84 00 	lds	r25, 0x0084
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <prvCheckDelayedList+0x58>
     e1a:	64 c0       	rjmp	.+200    	; 0xee4 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     e1c:	80 91 ad 00 	lds	r24, 0x00AD
     e20:	90 91 ae 00 	lds	r25, 0x00AE
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     e28:	80 91 af 00 	lds	r24, 0x00AF
     e2c:	90 91 b0 00 	lds	r25, 0x00B0
     e30:	90 93 ae 00 	sts	0x00AE, r25
     e34:	80 93 ad 00 	sts	0x00AD, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	90 93 b0 00 	sts	0x00B0, r25
     e40:	80 93 af 00 	sts	0x00AF, r24
     e44:	4f c0       	rjmp	.+158    	; 0xee4 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     e46:	e0 91 ad 00 	lds	r30, 0x00AD
     e4a:	f0 91 ae 00 	lds	r31, 0x00AE
     e4e:	05 80       	ldd	r0, Z+5	; 0x05
     e50:	f6 81       	ldd	r31, Z+6	; 0x06
     e52:	e0 2d       	mov	r30, r0
     e54:	86 81       	ldd	r24, Z+6	; 0x06
     e56:	97 81       	ldd	r25, Z+7	; 0x07
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     e5c:	eb 81       	ldd	r30, Y+3	; 0x03
     e5e:	fc 81       	ldd	r31, Y+4	; 0x04
     e60:	22 81       	ldd	r18, Z+2	; 0x02
     e62:	33 81       	ldd	r19, Z+3	; 0x03
     e64:	80 91 83 00 	lds	r24, 0x0083
     e68:	90 91 84 00 	lds	r25, 0x0084
     e6c:	82 17       	cp	r24, r18
     e6e:	93 07       	cpc	r25, r19
     e70:	08 f4       	brcc	.+2      	; 0xe74 <prvCheckDelayedList+0xb0>
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     e74:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	84 89       	ldd	r24, Z+20	; 0x14
     e86:	95 89       	ldd	r25, Z+21	; 0x15
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	29 f0       	breq	.+10     	; 0xe96 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	0c 96       	adiw	r24, 0x0c	; 12
     e92:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     e96:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     e98:	eb 81       	ldd	r30, Y+3	; 0x03
     e9a:	fc 81       	ldd	r31, Y+4	; 0x04
     e9c:	96 89       	ldd	r25, Z+22	; 0x16
     e9e:	80 91 82 00 	lds	r24, 0x0082
     ea2:	89 17       	cp	r24, r25
     ea4:	28 f4       	brcc	.+10     	; 0xeb0 <prvCheckDelayedList+0xec>
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	86 89       	ldd	r24, Z+22	; 0x16
     eac:	80 93 82 00 	sts	0x0082, r24
     eb0:	eb 81       	ldd	r30, Y+3	; 0x03
     eb2:	fc 81       	ldd	r31, Y+4	; 0x04
     eb4:	86 89       	ldd	r24, Z+22	; 0x16
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	ac 01       	movw	r20, r24
     ece:	47 57       	subi	r20, 0x77	; 119
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	9c 01       	movw	r18, r24
     ed8:	2e 5f       	subi	r18, 0xFE	; 254
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	ca 01       	movw	r24, r20
     ede:	b9 01       	movw	r22, r18
     ee0:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     ee4:	e0 91 ad 00 	lds	r30, 0x00AD
     ee8:	f0 91 ae 00 	lds	r31, 0x00AE
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	09 f0       	breq	.+2      	; 0xef4 <prvCheckDelayedList+0x130>
     ef2:	a9 cf       	rjmp	.-174    	; 0xe46 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     ef4:	80 91 87 00 	lds	r24, 0x0087
     ef8:	90 91 88 00 	lds	r25, 0x0088
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	09 f0       	breq	.+2      	; 0xf02 <prvCheckDelayedList+0x13e>
     f00:	74 cf       	rjmp	.-280    	; 0xdea <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     f02:	80 91 83 00 	lds	r24, 0x0083
     f06:	90 91 84 00 	lds	r25, 0x0084
     f0a:	90 93 86 00 	sts	0x0086, r25
     f0e:	80 93 85 00 	sts	0x0085, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	00 d0       	rcall	.+0      	; 0xf26 <vCoRoutineSchedule+0x6>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     f2a:	0e 94 98 06 	call	0xd30	; 0xd30 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     f2e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <prvCheckDelayedList>
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     f34:	80 91 82 00 	lds	r24, 0x0082
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <vCoRoutineSchedule+0x1e>
     f3c:	66 c0       	rjmp	.+204    	; 0x100a <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     f3e:	80 91 82 00 	lds	r24, 0x0082
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	80 93 82 00 	sts	0x0082, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     f48:	80 91 82 00 	lds	r24, 0x0082
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	c9 01       	movw	r24, r18
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	fc 01       	movw	r30, r24
     f64:	e7 57       	subi	r30, 0x77	; 119
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	19 f3       	breq	.-58     	; 0xf34 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     f6e:	80 91 82 00 	lds	r24, 0x0082
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	87 57       	subi	r24, 0x77	; 119
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	01 80       	ldd	r0, Z+1	; 0x01
     f96:	f2 81       	ldd	r31, Z+2	; 0x02
     f98:	e0 2d       	mov	r30, r0
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	92 83       	std	Z+2, r25	; 0x02
     fa4:	81 83       	std	Z+1, r24	; 0x01
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	21 81       	ldd	r18, Z+1	; 0x01
     fac:	32 81       	ldd	r19, Z+2	; 0x02
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	03 96       	adiw	r24, 0x03	; 3
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	59 f4       	brne	.+22     	; 0xfd0 <vCoRoutineSchedule+0xb0>
     fba:	e9 81       	ldd	r30, Y+1	; 0x01
     fbc:	fa 81       	ldd	r31, Y+2	; 0x02
     fbe:	01 80       	ldd	r0, Z+1	; 0x01
     fc0:	f2 81       	ldd	r31, Z+2	; 0x02
     fc2:	e0 2d       	mov	r30, r0
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	92 83       	std	Z+2, r25	; 0x02
     fce:	81 83       	std	Z+1, r24	; 0x01
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	01 80       	ldd	r0, Z+1	; 0x01
     fd6:	f2 81       	ldd	r31, Z+2	; 0x02
     fd8:	e0 2d       	mov	r30, r0
     fda:	86 81       	ldd	r24, Z+6	; 0x06
     fdc:	97 81       	ldd	r25, Z+7	; 0x07
     fde:	90 93 81 00 	sts	0x0081, r25
     fe2:	80 93 80 00 	sts	0x0080, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     fe6:	e0 91 80 00 	lds	r30, 0x0080
     fea:	f0 91 81 00 	lds	r31, 0x0081
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	80 91 80 00 	lds	r24, 0x0080
     ff6:	90 91 81 00 	lds	r25, 0x0081
     ffa:	e0 91 80 00 	lds	r30, 0x0080
     ffe:	f0 91 81 00 	lds	r31, 0x0081
    1002:	27 89       	ldd	r18, Z+23	; 0x17
    1004:	62 2f       	mov	r22, r18
    1006:	fa 01       	movw	r30, r20
    1008:	09 95       	icall

	return;
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	13 c0       	rjmp	.+38     	; 0x1048 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	c9 01       	movw	r24, r18
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	87 57       	subi	r24, 0x77	; 119
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	50 f3       	brcs	.-44     	; 0x1022 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    104e:	8b e9       	ldi	r24, 0x9B	; 155
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    1056:	84 ea       	ldi	r24, 0xA4	; 164
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    105e:	81 eb       	ldi	r24, 0xB1	; 177
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1066:	8b e9       	ldi	r24, 0x9B	; 155
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	90 93 ae 00 	sts	0x00AE, r25
    106e:	80 93 ad 00 	sts	0x00AD, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1072:	84 ea       	ldi	r24, 0xA4	; 164
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 b0 00 	sts	0x00B0, r25
    107a:	80 93 af 00 	sts	0x00AF, r24
}
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <xCoRoutineRemoveFromEventList+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <xCoRoutineRemoveFromEventList+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9d 83       	std	Y+5, r25	; 0x05
    1096:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	05 80       	ldd	r0, Z+5	; 0x05
    109e:	f6 81       	ldd	r31, Z+6	; 0x06
    10a0:	e0 2d       	mov	r30, r0
    10a2:	86 81       	ldd	r24, Z+6	; 0x06
    10a4:	97 81       	ldd	r25, Z+7	; 0x07
    10a6:	9b 83       	std	Y+3, r25	; 0x03
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	0c 96       	adiw	r24, 0x0c	; 12
    10b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	9c 01       	movw	r18, r24
    10ba:	24 5f       	subi	r18, 0xF4	; 244
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	81 eb       	ldi	r24, 0xB1	; 177
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    10c8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ca:	fb 81       	ldd	r31, Y+3	; 0x03
    10cc:	96 89       	ldd	r25, Z+22	; 0x16
    10ce:	e0 91 80 00 	lds	r30, 0x0080
    10d2:	f0 91 81 00 	lds	r31, 0x0081
    10d6:	86 89       	ldd	r24, Z+22	; 0x16
    10d8:	98 17       	cp	r25, r24
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    10e2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <pvPortMalloc+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <pvPortMalloc+0x8>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    1106:	1a 82       	std	Y+2, r1	; 0x02
    1108:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    110a:	0e 94 b1 13 	call	0x2762	; 0x2762 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    110e:	80 91 ba 00 	lds	r24, 0x00BA
    1112:	90 91 bb 00 	lds	r25, 0x00BB
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	22 e0       	ldi	r18, 0x02	; 2
    1120:	88 35       	cpi	r24, 0x58	; 88
    1122:	92 07       	cpc	r25, r18
    1124:	18 f5       	brcc	.+70     	; 0x116c <pvPortMalloc+0x76>
    1126:	20 91 ba 00 	lds	r18, 0x00BA
    112a:	30 91 bb 00 	lds	r19, 0x00BB
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	28 0f       	add	r18, r24
    1134:	39 1f       	adc	r19, r25
    1136:	80 91 ba 00 	lds	r24, 0x00BA
    113a:	90 91 bb 00 	lds	r25, 0x00BB
    113e:	82 17       	cp	r24, r18
    1140:	93 07       	cpc	r25, r19
    1142:	a0 f4       	brcc	.+40     	; 0x116c <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1144:	80 91 ba 00 	lds	r24, 0x00BA
    1148:	90 91 bb 00 	lds	r25, 0x00BB
    114c:	84 54       	subi	r24, 0x44	; 68
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    1154:	20 91 ba 00 	lds	r18, 0x00BA
    1158:	30 91 bb 00 	lds	r19, 0x00BB
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	90 93 bb 00 	sts	0x00BB, r25
    1168:	80 93 ba 00 	sts	0x00BA, r24
		}	
	}
	xTaskResumeAll();
    116c:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <vPortFree+0x6>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    11a2:	10 92 bb 00 	sts	0x00BB, r1
    11a6:	10 92 ba 00 	sts	0x00BA, r1
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    11b8:	20 91 ba 00 	lds	r18, 0x00BA
    11bc:	30 91 bb 00 	lds	r19, 0x00BB
    11c0:	88 e5       	ldi	r24, 0x58	; 88
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	82 1b       	sub	r24, r18
    11c6:	93 0b       	sbc	r25, r19
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <vListInitialise+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	03 96       	adiw	r24, 0x03	; 3
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	92 83       	std	Z+2, r25	; 0x02
    11e8:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	94 83       	std	Z+4, r25	; 0x04
    11f4:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	03 96       	adiw	r24, 0x03	; 3
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	96 83       	std	Z+6, r25	; 0x06
    1202:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	03 96       	adiw	r24, 0x03	; 3
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	90 87       	std	Z+8, r25	; 0x08
    1210:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	10 82       	st	Z, r1
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <vListInitialiseItem+0x6>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	11 86       	std	Z+9, r1	; 0x09
    1236:	10 86       	std	Z+8, r1	; 0x08
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <vListInsertEnd+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <vListInsertEnd+0x8>
    124a:	00 d0       	rcall	.+0      	; 0x124c <vListInsertEnd+0xa>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	7e 83       	std	Y+6, r23	; 0x06
    1256:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1258:	eb 81       	ldd	r30, Y+3	; 0x03
    125a:	fc 81       	ldd	r31, Y+4	; 0x04
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	92 81       	ldd	r25, Z+2	; 0x02
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	ed 81       	ldd	r30, Y+5	; 0x05
    126e:	fe 81       	ldd	r31, Y+6	; 0x06
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	92 81       	ldd	r25, Z+2	; 0x02
    127c:	ed 81       	ldd	r30, Y+5	; 0x05
    127e:	fe 81       	ldd	r31, Y+6	; 0x06
    1280:	95 83       	std	Z+5, r25	; 0x05
    1282:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	02 80       	ldd	r0, Z+2	; 0x02
    128a:	f3 81       	ldd	r31, Z+3	; 0x03
    128c:	e0 2d       	mov	r30, r0
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	95 83       	std	Z+5, r25	; 0x05
    1294:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	93 83       	std	Z+3, r25	; 0x03
    12a0:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	eb 81       	ldd	r30, Y+3	; 0x03
    12a8:	fc 81       	ldd	r31, Y+4	; 0x04
    12aa:	92 83       	std	Z+2, r25	; 0x02
    12ac:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    12ae:	ed 81       	ldd	r30, Y+5	; 0x05
    12b0:	fe 81       	ldd	r31, Y+6	; 0x06
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	91 87       	std	Z+9, r25	; 0x09
    12b8:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	80 81       	ld	r24, Z
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	eb 81       	ldd	r30, Y+3	; 0x03
    12c4:	fc 81       	ldd	r31, Y+4	; 0x04
    12c6:	80 83       	st	Z, r24
}
    12c8:	26 96       	adiw	r28, 0x06	; 6
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	28 97       	sbiw	r28, 0x08	; 8
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	78 87       	std	Y+8, r23	; 0x08
    12f4:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    12f6:	ef 81       	ldd	r30, Y+7	; 0x07
    12f8:	f8 85       	ldd	r31, Y+8	; 0x08
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	8f 3f       	cpi	r24, 0xFF	; 255
    130a:	92 07       	cpc	r25, r18
    130c:	39 f4       	brne	.+14     	; 0x131c <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    130e:	ed 81       	ldd	r30, Y+5	; 0x05
    1310:	fe 81       	ldd	r31, Y+6	; 0x06
    1312:	87 81       	ldd	r24, Z+7	; 0x07
    1314:	90 85       	ldd	r25, Z+8	; 0x08
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	18 c0       	rjmp	.+48     	; 0x134c <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	03 96       	adiw	r24, 0x03	; 3
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <vListInsert+0x5a>
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	eb 81       	ldd	r30, Y+3	; 0x03
    1336:	fc 81       	ldd	r31, Y+4	; 0x04
    1338:	02 80       	ldd	r0, Z+2	; 0x02
    133a:	f3 81       	ldd	r31, Z+3	; 0x03
    133c:	e0 2d       	mov	r30, r0
    133e:	20 81       	ld	r18, Z
    1340:	31 81       	ldd	r19, Z+1	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	82 17       	cp	r24, r18
    1348:	93 07       	cpc	r25, r19
    134a:	70 f7       	brcc	.-36     	; 0x1328 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	ef 81       	ldd	r30, Y+7	; 0x07
    1356:	f8 85       	ldd	r31, Y+8	; 0x08
    1358:	93 83       	std	Z+3, r25	; 0x03
    135a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    135c:	ef 81       	ldd	r30, Y+7	; 0x07
    135e:	f8 85       	ldd	r31, Y+8	; 0x08
    1360:	02 80       	ldd	r0, Z+2	; 0x02
    1362:	f3 81       	ldd	r31, Z+3	; 0x03
    1364:	e0 2d       	mov	r30, r0
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	95 83       	std	Z+5, r25	; 0x05
    136c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    136e:	ef 81       	ldd	r30, Y+7	; 0x07
    1370:	f8 85       	ldd	r31, Y+8	; 0x08
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	95 83       	std	Z+5, r25	; 0x05
    1378:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	eb 81       	ldd	r30, Y+3	; 0x03
    1380:	fc 81       	ldd	r31, Y+4	; 0x04
    1382:	93 83       	std	Z+3, r25	; 0x03
    1384:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1386:	ef 81       	ldd	r30, Y+7	; 0x07
    1388:	f8 85       	ldd	r31, Y+8	; 0x08
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	91 87       	std	Z+9, r25	; 0x09
    1390:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1392:	ed 81       	ldd	r30, Y+5	; 0x05
    1394:	fe 81       	ldd	r31, Y+6	; 0x06
    1396:	80 81       	ld	r24, Z
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	ed 81       	ldd	r30, Y+5	; 0x05
    139c:	fe 81       	ldd	r31, Y+6	; 0x06
    139e:	80 83       	st	Z, r24
}
    13a0:	28 96       	adiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <vListRemove+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <vListRemove+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13c2:	eb 81       	ldd	r30, Y+3	; 0x03
    13c4:	fc 81       	ldd	r31, Y+4	; 0x04
    13c6:	a2 81       	ldd	r26, Z+2	; 0x02
    13c8:	b3 81       	ldd	r27, Z+3	; 0x03
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	84 81       	ldd	r24, Z+4	; 0x04
    13d0:	95 81       	ldd	r25, Z+5	; 0x05
    13d2:	15 96       	adiw	r26, 0x05	; 5
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	a4 81       	ldd	r26, Z+4	; 0x04
    13e0:	b5 81       	ldd	r27, Z+5	; 0x05
    13e2:	eb 81       	ldd	r30, Y+3	; 0x03
    13e4:	fc 81       	ldd	r31, Y+4	; 0x04
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	13 96       	adiw	r26, 0x03	; 3
    13ec:	9c 93       	st	X, r25
    13ee:	8e 93       	st	-X, r24
    13f0:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    13f2:	eb 81       	ldd	r30, Y+3	; 0x03
    13f4:	fc 81       	ldd	r31, Y+4	; 0x04
    13f6:	80 85       	ldd	r24, Z+8	; 0x08
    13f8:	91 85       	ldd	r25, Z+9	; 0x09
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	21 81       	ldd	r18, Z+1	; 0x01
    1404:	32 81       	ldd	r19, Z+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	41 f4       	brne	.+16     	; 0x1420 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	95 81       	ldd	r25, Z+5	; 0x05
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	92 83       	std	Z+2, r25	; 0x02
    141e:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	11 86       	std	Z+9, r1	; 0x09
    1426:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	80 81       	ld	r24, Z
    142e:	81 50       	subi	r24, 0x01	; 1
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	28 97       	sbiw	r28, 0x08	; 8
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	7e 83       	std	Y+6, r23	; 0x06
    145e:	6d 83       	std	Y+5, r22	; 0x05
    1460:	58 87       	std	Y+8, r21	; 0x08
    1462:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1464:	eb 81       	ldd	r30, Y+3	; 0x03
    1466:	fc 81       	ldd	r31, Y+4	; 0x04
    1468:	81 e1       	ldi	r24, 0x11	; 17
    146a:	80 83       	st	Z, r24
	pxTopOfStack--;
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1476:	eb 81       	ldd	r30, Y+3	; 0x03
    1478:	fc 81       	ldd	r31, Y+4	; 0x04
    147a:	82 e2       	ldi	r24, 0x22	; 34
    147c:	80 83       	st	Z, r24
	pxTopOfStack--;
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1488:	eb 81       	ldd	r30, Y+3	; 0x03
    148a:	fc 81       	ldd	r31, Y+4	; 0x04
    148c:	83 e3       	ldi	r24, 0x33	; 51
    148e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	89 2f       	mov	r24, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	10 82       	st	Z, r1
	pxTopOfStack--;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	10 82       	st	Z, r1
	pxTopOfStack--;
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	80 83       	st	Z, r24
	pxTopOfStack--;
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	80 83       	st	Z, r24
	pxTopOfStack--;
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	85 e0       	ldi	r24, 0x05	; 5
    1540:	80 83       	st	Z, r24
	pxTopOfStack--;
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    154c:	eb 81       	ldd	r30, Y+3	; 0x03
    154e:	fc 81       	ldd	r31, Y+4	; 0x04
    1550:	86 e0       	ldi	r24, 0x06	; 6
    1552:	80 83       	st	Z, r24
	pxTopOfStack--;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	80 83       	st	Z, r24
	pxTopOfStack--;
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	80 83       	st	Z, r24
	pxTopOfStack--;
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	89 e0       	ldi	r24, 0x09	; 9
    1588:	80 83       	st	Z, r24
	pxTopOfStack--;
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	80 e1       	ldi	r24, 0x10	; 16
    159a:	80 83       	st	Z, r24
	pxTopOfStack--;
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	81 e1       	ldi	r24, 0x11	; 17
    15ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    15b8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ba:	fc 81       	ldd	r31, Y+4	; 0x04
    15bc:	82 e1       	ldi	r24, 0x12	; 18
    15be:	80 83       	st	Z, r24
	pxTopOfStack--;
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	83 e1       	ldi	r24, 0x13	; 19
    15d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	84 e1       	ldi	r24, 0x14	; 20
    15e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	85 e1       	ldi	r24, 0x15	; 21
    15f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	86 e1       	ldi	r24, 0x16	; 22
    1606:	80 83       	st	Z, r24
	pxTopOfStack--;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    1612:	eb 81       	ldd	r30, Y+3	; 0x03
    1614:	fc 81       	ldd	r31, Y+4	; 0x04
    1616:	87 e1       	ldi	r24, 0x17	; 23
    1618:	80 83       	st	Z, r24
	pxTopOfStack--;
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	88 e1       	ldi	r24, 0x18	; 24
    162a:	80 83       	st	Z, r24
	pxTopOfStack--;
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	89 e1       	ldi	r24, 0x19	; 25
    163c:	80 83       	st	Z, r24
	pxTopOfStack--;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    165a:	eb 81       	ldd	r30, Y+3	; 0x03
    165c:	fc 81       	ldd	r31, Y+4	; 0x04
    165e:	81 e2       	ldi	r24, 0x21	; 33
    1660:	80 83       	st	Z, r24
	pxTopOfStack--;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	82 e2       	ldi	r24, 0x22	; 34
    1672:	80 83       	st	Z, r24
	pxTopOfStack--;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	83 e2       	ldi	r24, 0x23	; 35
    1684:	80 83       	st	Z, r24
	pxTopOfStack--;
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	80 83       	st	Z, r24
	pxTopOfStack--;
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	89 2f       	mov	r24, r25
    16b0:	99 27       	eor	r25, r25
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	86 e2       	ldi	r24, 0x26	; 38
    16ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	87 e2       	ldi	r24, 0x27	; 39
    16e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	88 e2       	ldi	r24, 0x28	; 40
    16f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	89 e2       	ldi	r24, 0x29	; 41
    1704:	80 83       	st	Z, r24
	pxTopOfStack--;
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	80 e3       	ldi	r24, 0x30	; 48
    1716:	80 83       	st	Z, r24
	pxTopOfStack--;
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    1722:	eb 81       	ldd	r30, Y+3	; 0x03
    1724:	fc 81       	ldd	r31, Y+4	; 0x04
    1726:	81 e3       	ldi	r24, 0x31	; 49
    1728:	80 83       	st	Z, r24
	pxTopOfStack--;
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1738:	28 96       	adiw	r28, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1752:	0e 94 95 0c 	call	0x192a	; 0x192a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1756:	a0 91 14 03 	lds	r26, 0x0314
    175a:	b0 91 15 03 	lds	r27, 0x0315
    175e:	cd 91       	ld	r28, X+
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	dd 91       	ld	r29, X+
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	9f 91       	pop	r25
    1774:	8f 91       	pop	r24
    1776:	7f 91       	pop	r23
    1778:	6f 91       	pop	r22
    177a:	5f 91       	pop	r21
    177c:	4f 91       	pop	r20
    177e:	3f 91       	pop	r19
    1780:	2f 91       	pop	r18
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	1f 90       	pop	r1
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    17aa:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	0f 92       	push	r0
    17ca:	1f 92       	push	r1
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 92       	push	r2
    17d0:	3f 92       	push	r3
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	a0 91 14 03 	lds	r26, 0x0314
    180e:	b0 91 15 03 	lds	r27, 0x0315
    1812:	0d b6       	in	r0, 0x3d	; 61
    1814:	0d 92       	st	X+, r0
    1816:	0e b6       	in	r0, 0x3e	; 62
    1818:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    181a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    181e:	a0 91 14 03 	lds	r26, 0x0314
    1822:	b0 91 15 03 	lds	r27, 0x0315
    1826:	cd 91       	ld	r28, X+
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	dd 91       	ld	r29, X+
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	3f 90       	pop	r3
    1868:	2f 90       	pop	r2
    186a:	1f 90       	pop	r1
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1872:	08 95       	ret

00001874 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	0f 92       	push	r0
    187c:	1f 92       	push	r1
    187e:	11 24       	eor	r1, r1
    1880:	2f 92       	push	r2
    1882:	3f 92       	push	r3
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	a0 91 14 03 	lds	r26, 0x0314
    18c0:	b0 91 15 03 	lds	r27, 0x0315
    18c4:	0d b6       	in	r0, 0x3d	; 61
    18c6:	0d 92       	st	X+, r0
    18c8:	0e b6       	in	r0, 0x3e	; 62
    18ca:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    18cc:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <vTaskIncrementTick>
	vTaskSwitchContext();
    18d0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    18d4:	a0 91 14 03 	lds	r26, 0x0314
    18d8:	b0 91 15 03 	lds	r27, 0x0315
    18dc:	cd 91       	ld	r28, X+
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	dd 91       	ld	r29, X+
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	7f 90       	pop	r7
    1916:	6f 90       	pop	r6
    1918:	5f 90       	pop	r5
    191a:	4f 90       	pop	r4
    191c:	3f 90       	pop	r3
    191e:	2f 90       	pop	r2
    1920:	1f 90       	pop	r1
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1928:	08 95       	ret

0000192a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <prvSetupTimerInterrupt+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <prvSetupTimerInterrupt+0x8>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <prvSetupTimerInterrupt+0xa>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1938:	80 e8       	ldi	r24, 0x80	; 128
    193a:	9e e3       	ldi	r25, 0x3E	; 62
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	ad 83       	std	Y+5, r26	; 0x05
    1946:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	ad 81       	ldd	r26, Y+5	; 0x05
    194e:	be 81       	ldd	r27, Y+6	; 0x06
    1950:	68 94       	set
    1952:	15 f8       	bld	r1, 5
    1954:	b6 95       	lsr	r27
    1956:	a7 95       	ror	r26
    1958:	97 95       	ror	r25
    195a:	87 95       	ror	r24
    195c:	16 94       	lsr	r1
    195e:	d1 f7       	brne	.-12     	; 0x1954 <prvSetupTimerInterrupt+0x2a>
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	ad 83       	std	Y+5, r26	; 0x05
    1966:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	ad 81       	ldd	r26, Y+5	; 0x05
    196e:	be 81       	ldd	r27, Y+6	; 0x06
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	a1 09       	sbc	r26, r1
    1974:	b1 09       	sbc	r27, r1
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	ad 83       	std	Y+5, r26	; 0x05
    197c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	ad 81       	ldd	r26, Y+5	; 0x05
    1988:	be 81       	ldd	r27, Y+6	; 0x06
    198a:	89 2f       	mov	r24, r25
    198c:	9a 2f       	mov	r25, r26
    198e:	ab 2f       	mov	r26, r27
    1990:	bb 27       	eor	r27, r27
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	ad 83       	std	Y+5, r26	; 0x05
    1998:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    199e:	eb e4       	ldi	r30, 0x4B	; 75
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    19a6:	ea e4       	ldi	r30, 0x4A	; 74
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    19ae:	8b e0       	ldi	r24, 0x0B	; 11
    19b0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    19b2:	ee e4       	ldi	r30, 0x4E	; 78
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	80 61       	ori	r24, 0x10	; 16
    19c6:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    19c8:	e9 e5       	ldi	r30, 0x59	; 89
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	80 83       	st	Z, r24
}
    19d0:	26 96       	adiw	r28, 0x06	; 6
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    19e2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <vPortYieldFromTick>
		asm volatile ( "reti" );
    19e6:	18 95       	reti

000019e8 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	28 97       	sbiw	r28, 0x08	; 8
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	8f 83       	std	Y+7, r24	; 0x07
    19fe:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1a00:	1a 82       	std	Y+2, r1	; 0x02
    1a02:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <xQueueCreate+0x24>
    1a0a:	8c c0       	rjmp	.+280    	; 0x1b24 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1a0c:	8f e1       	ldi	r24, 0x1F	; 31
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <xQueueCreate+0x3a>
    1a20:	81 c0       	rjmp	.+258    	; 0x1b24 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1a22:	8f 81       	ldd	r24, Y+7	; 0x07
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	88 85       	ldd	r24, Y+8	; 0x08
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	ac 01       	movw	r20, r24
    1a30:	24 9f       	mul	r18, r20
    1a32:	c0 01       	movw	r24, r0
    1a34:	25 9f       	mul	r18, r21
    1a36:	90 0d       	add	r25, r0
    1a38:	34 9f       	mul	r19, r20
    1a3a:	90 0d       	add	r25, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	9c 83       	std	Y+4, r25	; 0x04
    1a42:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    1a4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1a54:	ed 81       	ldd	r30, Y+5	; 0x05
    1a56:	fe 81       	ldd	r31, Y+6	; 0x06
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <xQueueCreate+0x7a>
    1a60:	5d c0       	rjmp	.+186    	; 0x1b1c <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1a62:	ed 81       	ldd	r30, Y+5	; 0x05
    1a64:	fe 81       	ldd	r31, Y+6	; 0x06
    1a66:	40 81       	ld	r20, Z
    1a68:	51 81       	ldd	r21, Z+1	; 0x01
    1a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	88 85       	ldd	r24, Y+8	; 0x08
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	bc 01       	movw	r22, r24
    1a78:	26 9f       	mul	r18, r22
    1a7a:	c0 01       	movw	r24, r0
    1a7c:	27 9f       	mul	r18, r23
    1a7e:	90 0d       	add	r25, r0
    1a80:	36 9f       	mul	r19, r22
    1a82:	90 0d       	add	r25, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	84 0f       	add	r24, r20
    1a88:	95 1f       	adc	r25, r21
    1a8a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a8c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a8e:	93 83       	std	Z+3, r25	; 0x03
    1a90:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1a92:	ed 81       	ldd	r30, Y+5	; 0x05
    1a94:	fe 81       	ldd	r31, Y+6	; 0x06
    1a96:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1a98:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	ed 81       	ldd	r30, Y+5	; 0x05
    1aa2:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa4:	95 83       	std	Z+5, r25	; 0x05
    1aa6:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1aa8:	ed 81       	ldd	r30, Y+5	; 0x05
    1aaa:	fe 81       	ldd	r31, Y+6	; 0x06
    1aac:	40 81       	ld	r20, Z
    1aae:	51 81       	ldd	r21, Z+1	; 0x01
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9c 01       	movw	r18, r24
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	30 40       	sbci	r19, 0x00	; 0
    1abc:	88 85       	ldd	r24, Y+8	; 0x08
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	26 9f       	mul	r18, r22
    1ac6:	c0 01       	movw	r24, r0
    1ac8:	27 9f       	mul	r18, r23
    1aca:	90 0d       	add	r25, r0
    1acc:	36 9f       	mul	r19, r22
    1ace:	90 0d       	add	r25, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	84 0f       	add	r24, r20
    1ad4:	95 1f       	adc	r25, r21
    1ad6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad8:	fe 81       	ldd	r31, Y+6	; 0x06
    1ada:	97 83       	std	Z+7, r25	; 0x07
    1adc:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    1ade:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae4:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1ae6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aea:	88 85       	ldd	r24, Y+8	; 0x08
    1aec:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    1aee:	ed 81       	ldd	r30, Y+5	; 0x05
    1af0:	fe 81       	ldd	r31, Y+6	; 0x06
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1af6:	ed 81       	ldd	r30, Y+5	; 0x05
    1af8:	fe 81       	ldd	r31, Y+6	; 0x06
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	08 96       	adiw	r24, 0x08	; 8
    1b04:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	41 96       	adiw	r24, 0x11	; 17
    1b0e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b28:	28 96       	adiw	r28, 0x08	; 8
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	2c 97       	sbiw	r28, 0x0c	; 12
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	78 87       	std	Y+8, r23	; 0x08
    1b54:	6f 83       	std	Y+7, r22	; 0x07
    1b56:	5a 87       	std	Y+10, r21	; 0x0a
    1b58:	49 87       	std	Y+9, r20	; 0x09
    1b5a:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1b5c:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1b64:	ed 81       	ldd	r30, Y+5	; 0x05
    1b66:	fe 81       	ldd	r31, Y+6	; 0x06
    1b68:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b6e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b70:	98 17       	cp	r25, r24
    1b72:	d8 f4       	brcc	.+54     	; 0x1baa <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	2f 81       	ldd	r18, Y+7	; 0x07
    1b7a:	38 85       	ldd	r19, Y+8	; 0x08
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b80:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1b84:	ed 81       	ldd	r30, Y+5	; 0x05
    1b86:	fe 81       	ldd	r31, Y+6	; 0x06
    1b88:	81 89       	ldd	r24, Z+17	; 0x11
    1b8a:	88 23       	and	r24, r24
    1b8c:	49 f0       	breq	.+18     	; 0x1ba0 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	41 96       	adiw	r24, 0x11	; 17
    1b94:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1b9c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	8c 87       	std	Y+12, r24	; 0x0c
    1ba8:	5c c0       	rjmp	.+184    	; 0x1c62 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1baa:	89 85       	ldd	r24, Y+9	; 0x09
    1bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1bb2:	0f 90       	pop	r0
    1bb4:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1bb6:	1c 86       	std	Y+12, r1	; 0x0c
    1bb8:	54 c0       	rjmp	.+168    	; 0x1c62 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 23       	and	r24, r24
    1bbe:	31 f4       	brne	.+12     	; 0x1bcc <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	02 96       	adiw	r24, 0x02	; 2
    1bc4:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1bd0:	0e 94 b1 13 	call	0x2762	; 0x2762 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	0f 92       	push	r0
    1bda:	ed 81       	ldd	r30, Y+5	; 0x05
    1bdc:	fe 81       	ldd	r31, Y+6	; 0x06
    1bde:	85 8d       	ldd	r24, Z+29	; 0x1d
    1be0:	8f 3f       	cpi	r24, 0xFF	; 255
    1be2:	19 f4       	brne	.+6      	; 0x1bea <xQueueGenericSend+0xb0>
    1be4:	ed 81       	ldd	r30, Y+5	; 0x05
    1be6:	fe 81       	ldd	r31, Y+6	; 0x06
    1be8:	15 8e       	std	Z+29, r1	; 0x1d
    1bea:	ed 81       	ldd	r30, Y+5	; 0x05
    1bec:	fe 81       	ldd	r31, Y+6	; 0x06
    1bee:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <xQueueGenericSend+0xc0>
    1bf4:	ed 81       	ldd	r30, Y+5	; 0x05
    1bf6:	fe 81       	ldd	r31, Y+6	; 0x06
    1bf8:	16 8e       	std	Z+30, r1	; 0x1e
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1bfe:	ce 01       	movw	r24, r28
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	9e 01       	movw	r18, r28
    1c04:	27 5f       	subi	r18, 0xF7	; 247
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	b9 01       	movw	r22, r18
    1c0a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <xTaskCheckForTimeOut>
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f5       	brne	.+66     	; 0x1c54 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	0e 94 3c 11 	call	0x2278	; 0x2278 <prvIsQueueFull>
    1c1a:	88 23       	and	r24, r24
    1c1c:	a1 f0       	breq	.+40     	; 0x1c46 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	08 96       	adiw	r24, 0x08	; 8
    1c24:	29 85       	ldd	r18, Y+9	; 0x09
    1c26:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c28:	b9 01       	movw	r22, r18
    1c2a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	0e 94 b5 10 	call	0x216a	; 0x216a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1c36:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <xQueueGenericSend+0x106>
    1c3e:	8f cf       	rjmp	.-226    	; 0x1b5e <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1c40:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1c44:	8c cf       	rjmp	.-232    	; 0x1b5e <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	0e 94 b5 10 	call	0x216a	; 0x216a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1c4e:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
    1c52:	85 cf       	rjmp	.-246    	; 0x1b5e <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	0e 94 b5 10 	call	0x216a	; 0x216a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1c5c:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1c60:	1c 86       	std	Y+12, r1	; 0x0c
    1c62:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1c64:	2c 96       	adiw	r28, 0x0c	; 12
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	29 97       	sbiw	r28, 0x09	; 9
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
    1c8e:	7e 83       	std	Y+6, r23	; 0x06
    1c90:	6d 83       	std	Y+5, r22	; 0x05
    1c92:	58 87       	std	Y+8, r21	; 0x08
    1c94:	4f 83       	std	Y+7, r20	; 0x07
    1c96:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1c98:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1c9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ca0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ca6:	98 17       	cp	r25, r24
    1ca8:	40 f5       	brcc	.+80     	; 0x1cfa <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb0:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	49 85       	ldd	r20, Y+9	; 0x09
    1cb6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1cba:	eb 81       	ldd	r30, Y+3	; 0x03
    1cbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc2:	89 f4       	brne	.+34     	; 0x1ce6 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1cc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc8:	81 89       	ldd	r24, Z+17	; 0x11
    1cca:	88 23       	and	r24, r24
    1ccc:	99 f0       	breq	.+38     	; 0x1cf4 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	41 96       	adiw	r24, 0x11	; 17
    1cd4:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    1cd8:	88 23       	and	r24, r24
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    1cdc:	ef 81       	ldd	r30, Y+7	; 0x07
    1cde:	f8 85       	ldd	r31, Y+8	; 0x08
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 83       	st	Z, r24
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cea:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf2:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cfe:	29 96       	adiw	r28, 0x09	; 9
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	2e 97       	sbiw	r28, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	98 87       	std	Y+8, r25	; 0x08
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	7a 87       	std	Y+10, r23	; 0x0a
    1d2a:	69 87       	std	Y+9, r22	; 0x09
    1d2c:	5c 87       	std	Y+12, r21	; 0x0c
    1d2e:	4b 87       	std	Y+11, r20	; 0x0b
    1d30:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1d32:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1d3a:	ef 81       	ldd	r30, Y+7	; 0x07
    1d3c:	f8 85       	ldd	r31, Y+8	; 0x08
    1d3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d40:	88 23       	and	r24, r24
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <xQueueGenericReceive+0x36>
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1d46:	ef 81       	ldd	r30, Y+7	; 0x07
    1d48:	f8 85       	ldd	r31, Y+8	; 0x08
    1d4a:	86 81       	ldd	r24, Z+6	; 0x06
    1d4c:	97 81       	ldd	r25, Z+7	; 0x07
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1d52:	8f 81       	ldd	r24, Y+7	; 0x07
    1d54:	98 85       	ldd	r25, Y+8	; 0x08
    1d56:	29 85       	ldd	r18, Y+9	; 0x09
    1d58:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d5a:	b9 01       	movw	r22, r18
    1d5c:	0e 94 6d 10 	call	0x20da	; 0x20da <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	88 23       	and	r24, r24
    1d64:	b1 f4       	brne	.+44     	; 0x1d92 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1d66:	ef 81       	ldd	r30, Y+7	; 0x07
    1d68:	f8 85       	ldd	r31, Y+8	; 0x08
    1d6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d70:	f8 85       	ldd	r31, Y+8	; 0x08
    1d72:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d74:	ef 81       	ldd	r30, Y+7	; 0x07
    1d76:	f8 85       	ldd	r31, Y+8	; 0x08
    1d78:	80 85       	ldd	r24, Z+8	; 0x08
    1d7a:	88 23       	and	r24, r24
    1d7c:	f1 f0       	breq	.+60     	; 0x1dba <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d80:	98 85       	ldd	r25, Y+8	; 0x08
    1d82:	08 96       	adiw	r24, 0x08	; 8
    1d84:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	b9 f4       	brne	.+46     	; 0x1dba <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    1d8c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1d92:	ef 81       	ldd	r30, Y+7	; 0x07
    1d94:	f8 85       	ldd	r31, Y+8	; 0x08
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	97 83       	std	Z+7, r25	; 0x07
    1d9c:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d9e:	ef 81       	ldd	r30, Y+7	; 0x07
    1da0:	f8 85       	ldd	r31, Y+8	; 0x08
    1da2:	81 89       	ldd	r24, Z+17	; 0x11
    1da4:	88 23       	and	r24, r24
    1da6:	49 f0       	breq	.+18     	; 0x1dba <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1da8:	8f 81       	ldd	r24, Y+7	; 0x07
    1daa:	98 85       	ldd	r25, Y+8	; 0x08
    1dac:	41 96       	adiw	r24, 0x11	; 17
    1dae:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    1db2:	88 23       	and	r24, r24
    1db4:	11 f0       	breq	.+4      	; 0x1dba <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1db6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	8e 87       	std	Y+14, r24	; 0x0e
    1dc2:	5c c0       	rjmp	.+184    	; 0x1e7c <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1dc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1dcc:	0f 90       	pop	r0
    1dce:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1dd0:	1e 86       	std	Y+14, r1	; 0x0e
    1dd2:	54 c0       	rjmp	.+168    	; 0x1e7c <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	88 23       	and	r24, r24
    1dd8:	31 f4       	brne	.+12     	; 0x1de6 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1dda:	ce 01       	movw	r24, r28
    1ddc:	04 96       	adiw	r24, 0x04	; 4
    1dde:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1dea:	0e 94 b1 13 	call	0x2762	; 0x2762 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	0f 92       	push	r0
    1df4:	ef 81       	ldd	r30, Y+7	; 0x07
    1df6:	f8 85       	ldd	r31, Y+8	; 0x08
    1df8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfc:	19 f4       	brne	.+6      	; 0x1e04 <xQueueGenericReceive+0xf4>
    1dfe:	ef 81       	ldd	r30, Y+7	; 0x07
    1e00:	f8 85       	ldd	r31, Y+8	; 0x08
    1e02:	15 8e       	std	Z+29, r1	; 0x1d
    1e04:	ef 81       	ldd	r30, Y+7	; 0x07
    1e06:	f8 85       	ldd	r31, Y+8	; 0x08
    1e08:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e0c:	19 f4       	brne	.+6      	; 0x1e14 <xQueueGenericReceive+0x104>
    1e0e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e10:	f8 85       	ldd	r31, Y+8	; 0x08
    1e12:	16 8e       	std	Z+30, r1	; 0x1e
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1e18:	ce 01       	movw	r24, r28
    1e1a:	04 96       	adiw	r24, 0x04	; 4
    1e1c:	9e 01       	movw	r18, r28
    1e1e:	25 5f       	subi	r18, 0xF5	; 245
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	b9 01       	movw	r22, r18
    1e24:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <xTaskCheckForTimeOut>
    1e28:	88 23       	and	r24, r24
    1e2a:	09 f5       	brne	.+66     	; 0x1e6e <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1e2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2e:	98 85       	ldd	r25, Y+8	; 0x08
    1e30:	0e 94 09 11 	call	0x2212	; 0x2212 <prvIsQueueEmpty>
    1e34:	88 23       	and	r24, r24
    1e36:	a1 f0       	breq	.+40     	; 0x1e60 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	41 96       	adiw	r24, 0x11	; 17
    1e3e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e40:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e42:	b9 01       	movw	r22, r18
    1e44:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1e48:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4a:	98 85       	ldd	r25, Y+8	; 0x08
    1e4c:	0e 94 b5 10 	call	0x216a	; 0x216a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1e50:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
    1e54:	88 23       	and	r24, r24
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <xQueueGenericReceive+0x14a>
    1e58:	6d cf       	rjmp	.-294    	; 0x1d34 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1e5a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1e5e:	6a cf       	rjmp	.-300    	; 0x1d34 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	0e 94 b5 10 	call	0x216a	; 0x216a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1e68:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
    1e6c:	63 cf       	rjmp	.-314    	; 0x1d34 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e70:	98 85       	ldd	r25, Y+8	; 0x08
    1e72:	0e 94 b5 10 	call	0x216a	; 0x216a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1e76:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1e7a:	1e 86       	std	Y+14, r1	; 0x0e
    1e7c:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    1e7e:	2e 96       	adiw	r28, 0x0e	; 14
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	28 97       	sbiw	r28, 0x08	; 8
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
    1ea8:	7e 83       	std	Y+6, r23	; 0x06
    1eaa:	6d 83       	std	Y+5, r22	; 0x05
    1eac:	58 87       	std	Y+8, r21	; 0x08
    1eae:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1eb0:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1eb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb8:	88 23       	and	r24, r24
    1eba:	71 f1       	breq	.+92     	; 0x1f18 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	0e 94 6d 10 	call	0x20da	; 0x20da <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1eca:	eb 81       	ldd	r30, Y+3	; 0x03
    1ecc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ece:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ed0:	81 50       	subi	r24, 0x01	; 1
    1ed2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed6:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ede:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee0:	89 f4       	brne	.+34     	; 0x1f04 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee6:	80 85       	ldd	r24, Z+8	; 0x08
    1ee8:	88 23       	and	r24, r24
    1eea:	99 f0       	breq	.+38     	; 0x1f12 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	08 96       	adiw	r24, 0x08	; 8
    1ef2:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    1ef6:	88 23       	and	r24, r24
    1ef8:	61 f0       	breq	.+24     	; 0x1f12 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1efa:	ef 81       	ldd	r30, Y+7	; 0x07
    1efc:	f8 85       	ldd	r31, Y+8	; 0x08
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 83       	st	Z, r24
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1f04:	eb 81       	ldd	r30, Y+3	; 0x03
    1f06:	fc 81       	ldd	r31, Y+4	; 0x04
    1f08:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f10:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	8a 83       	std	Y+2, r24	; 0x02
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1f18:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f1c:	28 96       	adiw	r28, 0x08	; 8
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <uxQueueMessagesWaiting+0x6>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	9b 83       	std	Y+3, r25	; 0x03
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1f44:	ea 81       	ldd	r30, Y+2	; 0x02
    1f46:	fb 81       	ldd	r31, Y+3	; 0x03
    1f48:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <uxQueueMessagesWaitingFromISR+0x6>
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9b 83       	std	Y+3, r25	; 0x03
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1f6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f70:	fb 81       	ldd	r31, Y+3	; 0x03
    1f72:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f74:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <vQueueDelete+0x6>
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
	vPortFree( pxQueue );
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <prvCopyDataToQueue+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <prvCopyDataToQueue+0x8>
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	7c 83       	std	Y+4, r23	; 0x04
    1fc4:	6b 83       	std	Y+3, r22	; 0x03
    1fc6:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <prvCopyDataToQueue+0x24>
    1fd2:	74 c0       	rjmp	.+232    	; 0x20bc <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	88 23       	and	r24, r24
    1fd8:	99 f5       	brne	.+102    	; 0x2040 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1fda:	e9 81       	ldd	r30, Y+1	; 0x01
    1fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fde:	64 81       	ldd	r22, Z+4	; 0x04
    1fe0:	75 81       	ldd	r23, Z+5	; 0x05
    1fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fe8:	48 2f       	mov	r20, r24
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	2b 81       	ldd	r18, Y+3	; 0x03
    1fee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffc:	24 81       	ldd	r18, Z+4	; 0x04
    1ffe:	35 81       	ldd	r19, Z+5	; 0x05
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	84 8d       	ldd	r24, Z+28	; 0x1c
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	82 0f       	add	r24, r18
    200c:	93 1f       	adc	r25, r19
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	95 83       	std	Z+5, r25	; 0x05
    2014:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2016:	e9 81       	ldd	r30, Y+1	; 0x01
    2018:	fa 81       	ldd	r31, Y+2	; 0x02
    201a:	24 81       	ldd	r18, Z+4	; 0x04
    201c:	35 81       	ldd	r19, Z+5	; 0x05
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	28 17       	cp	r18, r24
    2028:	39 07       	cpc	r19, r25
    202a:	08 f4       	brcc	.+2      	; 0x202e <prvCopyDataToQueue+0x7e>
    202c:	47 c0       	rjmp	.+142    	; 0x20bc <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    202e:	e9 81       	ldd	r30, Y+1	; 0x01
    2030:	fa 81       	ldd	r31, Y+2	; 0x02
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	95 83       	std	Z+5, r25	; 0x05
    203c:	84 83       	std	Z+4, r24	; 0x04
    203e:	3e c0       	rjmp	.+124    	; 0x20bc <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	66 81       	ldd	r22, Z+6	; 0x06
    2046:	77 81       	ldd	r23, Z+7	; 0x07
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	84 8d       	ldd	r24, Z+28	; 0x1c
    204e:	48 2f       	mov	r20, r24
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	cb 01       	movw	r24, r22
    2058:	b9 01       	movw	r22, r18
    205a:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	26 81       	ldd	r18, Z+6	; 0x06
    2064:	37 81       	ldd	r19, Z+7	; 0x07
    2066:	e9 81       	ldd	r30, Y+1	; 0x01
    2068:	fa 81       	ldd	r31, Y+2	; 0x02
    206a:	84 8d       	ldd	r24, Z+28	; 0x1c
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	90 95       	com	r25
    2072:	81 95       	neg	r24
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	e9 81       	ldd	r30, Y+1	; 0x01
    207c:	fa 81       	ldd	r31, Y+2	; 0x02
    207e:	97 83       	std	Z+7, r25	; 0x07
    2080:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	26 81       	ldd	r18, Z+6	; 0x06
    2088:	37 81       	ldd	r19, Z+7	; 0x07
    208a:	e9 81       	ldd	r30, Y+1	; 0x01
    208c:	fa 81       	ldd	r31, Y+2	; 0x02
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	28 17       	cp	r18, r24
    2094:	39 07       	cpc	r19, r25
    2096:	90 f4       	brcc	.+36     	; 0x20bc <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2098:	e9 81       	ldd	r30, Y+1	; 0x01
    209a:	fa 81       	ldd	r31, Y+2	; 0x02
    209c:	22 81       	ldd	r18, Z+2	; 0x02
    209e:	33 81       	ldd	r19, Z+3	; 0x03
    20a0:	e9 81       	ldd	r30, Y+1	; 0x01
    20a2:	fa 81       	ldd	r31, Y+2	; 0x02
    20a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	90 95       	com	r25
    20ac:	81 95       	neg	r24
    20ae:	9f 4f       	sbci	r25, 0xFF	; 255
    20b0:	82 0f       	add	r24, r18
    20b2:	93 1f       	adc	r25, r19
    20b4:	e9 81       	ldd	r30, Y+1	; 0x01
    20b6:	fa 81       	ldd	r31, Y+2	; 0x02
    20b8:	97 83       	std	Z+7, r25	; 0x07
    20ba:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    20bc:	e9 81       	ldd	r30, Y+1	; 0x01
    20be:	fa 81       	ldd	r31, Y+2	; 0x02
    20c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	82 8f       	std	Z+26, r24	; 0x1a
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <prvCopyDataFromQueue+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <prvCopyDataFromQueue+0x8>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	7c 83       	std	Y+4, r23	; 0x04
    20ec:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	89 f1       	breq	.+98     	; 0x215c <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    20fa:	e9 81       	ldd	r30, Y+1	; 0x01
    20fc:	fa 81       	ldd	r31, Y+2	; 0x02
    20fe:	26 81       	ldd	r18, Z+6	; 0x06
    2100:	37 81       	ldd	r19, Z+7	; 0x07
    2102:	e9 81       	ldd	r30, Y+1	; 0x01
    2104:	fa 81       	ldd	r31, Y+2	; 0x02
    2106:	84 8d       	ldd	r24, Z+28	; 0x1c
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	82 0f       	add	r24, r18
    210e:	93 1f       	adc	r25, r19
    2110:	e9 81       	ldd	r30, Y+1	; 0x01
    2112:	fa 81       	ldd	r31, Y+2	; 0x02
    2114:	97 83       	std	Z+7, r25	; 0x07
    2116:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2118:	e9 81       	ldd	r30, Y+1	; 0x01
    211a:	fa 81       	ldd	r31, Y+2	; 0x02
    211c:	26 81       	ldd	r18, Z+6	; 0x06
    211e:	37 81       	ldd	r19, Z+7	; 0x07
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	28 17       	cp	r18, r24
    212a:	39 07       	cpc	r19, r25
    212c:	40 f0       	brcs	.+16     	; 0x213e <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	97 83       	std	Z+7, r25	; 0x07
    213c:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    213e:	e9 81       	ldd	r30, Y+1	; 0x01
    2140:	fa 81       	ldd	r31, Y+2	; 0x02
    2142:	46 81       	ldd	r20, Z+6	; 0x06
    2144:	57 81       	ldd	r21, Z+7	; 0x07
    2146:	e9 81       	ldd	r30, Y+1	; 0x01
    2148:	fa 81       	ldd	r31, Y+2	; 0x02
    214a:	84 8d       	ldd	r24, Z+28	; 0x1c
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	ba 01       	movw	r22, r20
    2156:	a9 01       	movw	r20, r18
    2158:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <memcpy>
	}
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <prvUnlockQueue+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	0f 92       	push	r0
    217e:	15 c0       	rjmp	.+42     	; 0x21aa <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2180:	e9 81       	ldd	r30, Y+1	; 0x01
    2182:	fa 81       	ldd	r31, Y+2	; 0x02
    2184:	81 89       	ldd	r24, Z+17	; 0x11
    2186:	88 23       	and	r24, r24
    2188:	a9 f0       	breq	.+42     	; 0x21b4 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	41 96       	adiw	r24, 0x11	; 17
    2190:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    2194:	88 23       	and	r24, r24
    2196:	11 f0       	breq	.+4      	; 0x219c <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2198:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    219c:	e9 81       	ldd	r30, Y+1	; 0x01
    219e:	fa 81       	ldd	r31, Y+2	; 0x02
    21a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    21aa:	e9 81       	ldd	r30, Y+1	; 0x01
    21ac:	fa 81       	ldd	r31, Y+2	; 0x02
    21ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    21b0:	18 16       	cp	r1, r24
    21b2:	34 f3       	brlt	.-52     	; 0x2180 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    21b4:	e9 81       	ldd	r30, Y+1	; 0x01
    21b6:	fa 81       	ldd	r31, Y+2	; 0x02
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	0f 92       	push	r0
    21c6:	15 c0       	rjmp	.+42     	; 0x21f2 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    21c8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ca:	fa 81       	ldd	r31, Y+2	; 0x02
    21cc:	80 85       	ldd	r24, Z+8	; 0x08
    21ce:	88 23       	and	r24, r24
    21d0:	a9 f0       	breq	.+42     	; 0x21fc <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	08 96       	adiw	r24, 0x08	; 8
    21d8:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskRemoveFromEventList>
    21dc:	88 23       	and	r24, r24
    21de:	11 f0       	breq	.+4      	; 0x21e4 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    21e0:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    21e4:	e9 81       	ldd	r30, Y+1	; 0x01
    21e6:	fa 81       	ldd	r31, Y+2	; 0x02
    21e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    21ea:	81 50       	subi	r24, 0x01	; 1
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    21f2:	e9 81       	ldd	r30, Y+1	; 0x01
    21f4:	fa 81       	ldd	r31, Y+2	; 0x02
    21f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    21f8:	18 16       	cp	r1, r24
    21fa:	34 f3       	brlt	.-52     	; 0x21c8 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    21fc:	e9 81       	ldd	r30, Y+1	; 0x01
    21fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <prvIsQueueEmpty+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2228:	ea 81       	ldd	r30, Y+2	; 0x02
    222a:	fb 81       	ldd	r31, Y+3	; 0x03
    222c:	82 8d       	ldd	r24, Z+26	; 0x1a
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	88 23       	and	r24, r24
    2232:	11 f4       	brne	.+4      	; 0x2238 <prvIsQueueEmpty+0x26>
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2238:	0f 90       	pop	r0
    223a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <xQueueIsQueueEmptyFromISR+0x6>
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    225a:	ea 81       	ldd	r30, Y+2	; 0x02
    225c:	fb 81       	ldd	r31, Y+3	; 0x03
    225e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2260:	19 82       	std	Y+1, r1	; 0x01
    2262:	88 23       	and	r24, r24
    2264:	11 f4       	brne	.+4      	; 0x226a <xQueueIsQueueEmptyFromISR+0x20>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <prvIsQueueFull+0x6>
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    228e:	ea 81       	ldd	r30, Y+2	; 0x02
    2290:	fb 81       	ldd	r31, Y+3	; 0x03
    2292:	92 8d       	ldd	r25, Z+26	; 0x1a
    2294:	ea 81       	ldd	r30, Y+2	; 0x02
    2296:	fb 81       	ldd	r31, Y+3	; 0x03
    2298:	83 8d       	ldd	r24, Z+27	; 0x1b
    229a:	19 82       	std	Y+1, r1	; 0x01
    229c:	98 17       	cp	r25, r24
    229e:	11 f4       	brne	.+4      	; 0x22a4 <prvIsQueueFull+0x2c>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <xQueueIsQueueFullFromISR+0x6>
    22bc:	0f 92       	push	r0
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    22c6:	ea 81       	ldd	r30, Y+2	; 0x02
    22c8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    22cc:	ea 81       	ldd	r30, Y+2	; 0x02
    22ce:	fb 81       	ldd	r31, Y+3	; 0x03
    22d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	98 17       	cp	r25, r24
    22d6:	11 f4       	brne	.+4      	; 0x22dc <xQueueIsQueueFullFromISR+0x26>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    22ea:	af 92       	push	r10
    22ec:	bf 92       	push	r11
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	64 97       	sbiw	r28, 0x14	; 20
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	9f 83       	std	Y+7, r25	; 0x07
    2310:	8e 83       	std	Y+6, r24	; 0x06
    2312:	79 87       	std	Y+9, r23	; 0x09
    2314:	68 87       	std	Y+8, r22	; 0x08
    2316:	5b 87       	std	Y+11, r21	; 0x0b
    2318:	4a 87       	std	Y+10, r20	; 0x0a
    231a:	3d 87       	std	Y+13, r19	; 0x0d
    231c:	2c 87       	std	Y+12, r18	; 0x0c
    231e:	0e 87       	std	Y+14, r16	; 0x0e
    2320:	f8 8a       	std	Y+16, r15	; 0x10
    2322:	ef 86       	std	Y+15, r14	; 0x0f
    2324:	da 8a       	std	Y+18, r13	; 0x12
    2326:	c9 8a       	std	Y+17, r12	; 0x11
    2328:	bc 8a       	std	Y+20, r11	; 0x14
    232a:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    232c:	8a 85       	ldd	r24, Y+10	; 0x0a
    232e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2330:	29 89       	ldd	r18, Y+17	; 0x11
    2332:	3a 89       	ldd	r19, Y+18	; 0x12
    2334:	b9 01       	movw	r22, r18
    2336:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <prvAllocateTCBAndStack>
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	09 f4       	brne	.+2      	; 0x2348 <xTaskGenericCreate+0x5e>
    2346:	99 c0       	rjmp	.+306    	; 0x247a <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2348:	eb 81       	ldd	r30, Y+3	; 0x03
    234a:	fc 81       	ldd	r31, Y+4	; 0x04
    234c:	27 89       	ldd	r18, Z+23	; 0x17
    234e:	30 8d       	ldd	r19, Z+24	; 0x18
    2350:	8a 85       	ldd	r24, Y+10	; 0x0a
    2352:	9b 85       	ldd	r25, Y+11	; 0x0b
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	28 85       	ldd	r18, Y+8	; 0x08
    2364:	39 85       	ldd	r19, Y+9	; 0x09
    2366:	eb 89       	ldd	r30, Y+19	; 0x13
    2368:	fc 89       	ldd	r31, Y+20	; 0x14
    236a:	aa 85       	ldd	r26, Y+10	; 0x0a
    236c:	bb 85       	ldd	r27, Y+11	; 0x0b
    236e:	b9 01       	movw	r22, r18
    2370:	4e 85       	ldd	r20, Y+14	; 0x0e
    2372:	9f 01       	movw	r18, r30
    2374:	8d 01       	movw	r16, r26
    2376:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	2e 81       	ldd	r18, Y+6	; 0x06
    2380:	3f 81       	ldd	r19, Y+7	; 0x07
    2382:	4c 85       	ldd	r20, Y+12	; 0x0c
    2384:	5d 85       	ldd	r21, Y+13	; 0x0d
    2386:	b9 01       	movw	r22, r18
    2388:	0e 94 22 0a 	call	0x1444	; 0x1444 <pxPortInitialiseStack>
    238c:	eb 81       	ldd	r30, Y+3	; 0x03
    238e:	fc 81       	ldd	r31, Y+4	; 0x04
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    2394:	8f 85       	ldd	r24, Y+15	; 0x0f
    2396:	98 89       	ldd	r25, Y+16	; 0x10
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	31 f0       	breq	.+12     	; 0x23a8 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    239c:	ef 85       	ldd	r30, Y+15	; 0x0f
    239e:	f8 89       	ldd	r31, Y+16	; 0x10
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    23ae:	80 91 17 03 	lds	r24, 0x0317
    23b2:	8f 5f       	subi	r24, 0xFF	; 255
    23b4:	80 93 17 03 	sts	0x0317, r24
			if( pxCurrentTCB == NULL )
    23b8:	80 91 14 03 	lds	r24, 0x0314
    23bc:	90 91 15 03 	lds	r25, 0x0315
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f4       	brne	.+26     	; 0x23de <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	90 93 15 03 	sts	0x0315, r25
    23cc:	80 93 14 03 	sts	0x0314, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    23d0:	80 91 17 03 	lds	r24, 0x0317
    23d4:	81 30       	cpi	r24, 0x01	; 1
    23d6:	a9 f4       	brne	.+42     	; 0x2402 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    23d8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <prvInitialiseTaskLists>
    23dc:	12 c0       	rjmp	.+36     	; 0x2402 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    23de:	80 91 1c 03 	lds	r24, 0x031C
    23e2:	88 23       	and	r24, r24
    23e4:	71 f4       	brne	.+28     	; 0x2402 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    23e6:	e0 91 14 03 	lds	r30, 0x0314
    23ea:	f0 91 15 03 	lds	r31, 0x0315
    23ee:	96 89       	ldd	r25, Z+22	; 0x16
    23f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f2:	89 17       	cp	r24, r25
    23f4:	30 f0       	brcs	.+12     	; 0x2402 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	90 93 15 03 	sts	0x0315, r25
    23fe:	80 93 14 03 	sts	0x0314, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2402:	eb 81       	ldd	r30, Y+3	; 0x03
    2404:	fc 81       	ldd	r31, Y+4	; 0x04
    2406:	96 89       	ldd	r25, Z+22	; 0x16
    2408:	80 91 1a 03 	lds	r24, 0x031A
    240c:	89 17       	cp	r24, r25
    240e:	28 f4       	brcc	.+10     	; 0x241a <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2410:	eb 81       	ldd	r30, Y+3	; 0x03
    2412:	fc 81       	ldd	r31, Y+4	; 0x04
    2414:	86 89       	ldd	r24, Z+22	; 0x16
    2416:	80 93 1a 03 	sts	0x031A, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    241a:	80 91 21 03 	lds	r24, 0x0321
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	80 93 21 03 	sts	0x0321, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2424:	eb 81       	ldd	r30, Y+3	; 0x03
    2426:	fc 81       	ldd	r31, Y+4	; 0x04
    2428:	96 89       	ldd	r25, Z+22	; 0x16
    242a:	80 91 1b 03 	lds	r24, 0x031B
    242e:	89 17       	cp	r24, r25
    2430:	28 f4       	brcc	.+10     	; 0x243c <xTaskGenericCreate+0x152>
    2432:	eb 81       	ldd	r30, Y+3	; 0x03
    2434:	fc 81       	ldd	r31, Y+4	; 0x04
    2436:	86 89       	ldd	r24, Z+22	; 0x16
    2438:	80 93 1b 03 	sts	0x031B, r24
    243c:	eb 81       	ldd	r30, Y+3	; 0x03
    243e:	fc 81       	ldd	r31, Y+4	; 0x04
    2440:	86 89       	ldd	r24, Z+22	; 0x16
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	c9 01       	movw	r24, r18
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	82 0f       	add	r24, r18
    2456:	93 1f       	adc	r25, r19
    2458:	ac 01       	movw	r20, r24
    245a:	4e 5d       	subi	r20, 0xDE	; 222
    245c:	5c 4f       	sbci	r21, 0xFC	; 252
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	9c 81       	ldd	r25, Y+4	; 0x04
    2462:	9c 01       	movw	r18, r24
    2464:	2e 5f       	subi	r18, 0xFE	; 254
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	ca 01       	movw	r24, r20
    246a:	b9 01       	movw	r22, r18
    246c:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

			xReturn = pdPASS;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	02 c0       	rjmp	.+4      	; 0x247e <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    247a:	8f ef       	ldi	r24, 0xFF	; 255
    247c:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	71 f4       	brne	.+28     	; 0x24a0 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    2484:	80 91 1c 03 	lds	r24, 0x031C
    2488:	88 23       	and	r24, r24
    248a:	51 f0       	breq	.+20     	; 0x24a0 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    248c:	e0 91 14 03 	lds	r30, 0x0314
    2490:	f0 91 15 03 	lds	r31, 0x0315
    2494:	96 89       	ldd	r25, Z+22	; 0x16
    2496:	8e 85       	ldd	r24, Y+14	; 0x0e
    2498:	98 17       	cp	r25, r24
    249a:	10 f4       	brcc	.+4      	; 0x24a0 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    249c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
			}
		}
	}

	return xReturn;
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24a2:	64 96       	adiw	r28, 0x14	; 20
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	cf 90       	pop	r12
    24be:	bf 90       	pop	r11
    24c0:	af 90       	pop	r10
    24c2:	08 95       	ret

000024c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <vTaskDelete+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <vTaskDelete+0x8>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <vTaskDelete+0xa>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    24dc:	20 91 14 03 	lds	r18, 0x0314
    24e0:	30 91 15 03 	lds	r19, 0x0315
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	82 17       	cp	r24, r18
    24ea:	93 07       	cpc	r25, r19
    24ec:	11 f4       	brne	.+4      	; 0x24f2 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    24ee:	1c 82       	std	Y+4, r1	; 0x04
    24f0:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	39 f4       	brne	.+14     	; 0x2508 <vTaskDelete+0x44>
    24fa:	80 91 14 03 	lds	r24, 0x0314
    24fe:	90 91 15 03 	lds	r25, 0x0315
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	04 c0       	rjmp	.+8      	; 0x2510 <vTaskDelete+0x4c>
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	02 96       	adiw	r24, 0x02	; 2
    251e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2522:	e9 81       	ldd	r30, Y+1	; 0x01
    2524:	fa 81       	ldd	r31, Y+2	; 0x02
    2526:	84 89       	ldd	r24, Z+20	; 0x14
    2528:	95 89       	ldd	r25, Z+21	; 0x15
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	29 f0       	breq	.+10     	; 0x2538 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	0c 96       	adiw	r24, 0x0c	; 12
    2534:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	9c 01       	movw	r18, r24
    253e:	2e 5f       	subi	r18, 0xFE	; 254
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	8e e6       	ldi	r24, 0x6E	; 110
    2544:	93 e0       	ldi	r25, 0x03	; 3
    2546:	b9 01       	movw	r22, r18
    2548:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    254c:	80 91 16 03 	lds	r24, 0x0316
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	80 93 16 03 	sts	0x0316, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2556:	80 91 21 03 	lds	r24, 0x0321
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	80 93 21 03 	sts	0x0321, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2564:	80 91 1c 03 	lds	r24, 0x031C
    2568:	88 23       	and	r24, r24
    256a:	31 f0       	breq	.+12     	; 0x2578 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	11 f4       	brne	.+4      	; 0x2578 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    2574:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
			}
		}
	}
    2578:	26 96       	adiw	r28, 0x06	; 6
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	28 97       	sbiw	r28, 0x08	; 8
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	78 87       	std	Y+8, r23	; 0x08
    25a4:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    25a6:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    25a8:	0e 94 b1 13 	call	0x2762	; 0x2762 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    25ac:	ed 81       	ldd	r30, Y+5	; 0x05
    25ae:	fe 81       	ldd	r31, Y+6	; 0x06
    25b0:	20 81       	ld	r18, Z
    25b2:	31 81       	ldd	r19, Z+1	; 0x01
    25b4:	8f 81       	ldd	r24, Y+7	; 0x07
    25b6:	98 85       	ldd	r25, Y+8	; 0x08
    25b8:	82 0f       	add	r24, r18
    25ba:	93 1f       	adc	r25, r19
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    25c0:	ed 81       	ldd	r30, Y+5	; 0x05
    25c2:	fe 81       	ldd	r31, Y+6	; 0x06
    25c4:	20 81       	ld	r18, Z
    25c6:	31 81       	ldd	r19, Z+1	; 0x01
    25c8:	80 91 18 03 	lds	r24, 0x0318
    25cc:	90 91 19 03 	lds	r25, 0x0319
    25d0:	82 17       	cp	r24, r18
    25d2:	93 07       	cpc	r25, r19
    25d4:	a8 f4       	brcc	.+42     	; 0x2600 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    25d6:	ed 81       	ldd	r30, Y+5	; 0x05
    25d8:	fe 81       	ldd	r31, Y+6	; 0x06
    25da:	20 81       	ld	r18, Z
    25dc:	31 81       	ldd	r19, Z+1	; 0x01
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	82 17       	cp	r24, r18
    25e4:	93 07       	cpc	r25, r19
    25e6:	00 f5       	brcc	.+64     	; 0x2628 <vTaskDelayUntil+0x9e>
    25e8:	20 91 18 03 	lds	r18, 0x0318
    25ec:	30 91 19 03 	lds	r19, 0x0319
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	28 17       	cp	r18, r24
    25f6:	39 07       	cpc	r19, r25
    25f8:	b8 f4       	brcc	.+46     	; 0x2628 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	14 c0       	rjmp	.+40     	; 0x2628 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2600:	ed 81       	ldd	r30, Y+5	; 0x05
    2602:	fe 81       	ldd	r31, Y+6	; 0x06
    2604:	20 81       	ld	r18, Z
    2606:	31 81       	ldd	r19, Z+1	; 0x01
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	82 17       	cp	r24, r18
    260e:	93 07       	cpc	r25, r19
    2610:	48 f0       	brcs	.+18     	; 0x2624 <vTaskDelayUntil+0x9a>
    2612:	20 91 18 03 	lds	r18, 0x0318
    2616:	30 91 19 03 	lds	r19, 0x0319
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	28 17       	cp	r18, r24
    2620:	39 07       	cpc	r19, r25
    2622:	10 f4       	brcc	.+4      	; 0x2628 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2628:	ed 81       	ldd	r30, Y+5	; 0x05
    262a:	fe 81       	ldd	r31, Y+6	; 0x06
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	88 23       	and	r24, r24
    2638:	59 f0       	breq	.+22     	; 0x2650 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    263a:	80 91 14 03 	lds	r24, 0x0314
    263e:	90 91 15 03 	lds	r25, 0x0315
    2642:	02 96       	adiw	r24, 0x02	; 2
    2644:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2650:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
    2654:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	88 23       	and	r24, r24
    265a:	11 f4       	brne	.+4      	; 0x2660 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    265c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
		}
	}
    2660:	28 96       	adiw	r28, 0x08	; 8
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <vTaskDelay+0x6>
    2678:	00 d0       	rcall	.+0      	; 0x267a <vTaskDelay+0x8>
    267a:	0f 92       	push	r0
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	9d 83       	std	Y+5, r25	; 0x05
    2682:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2684:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	9d 81       	ldd	r25, Y+5	; 0x05
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	d1 f0       	breq	.+52     	; 0x26c2 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    268e:	0e 94 b1 13 	call	0x2762	; 0x2762 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2692:	20 91 18 03 	lds	r18, 0x0318
    2696:	30 91 19 03 	lds	r19, 0x0319
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	82 0f       	add	r24, r18
    26a0:	93 1f       	adc	r25, r19
    26a2:	9b 83       	std	Y+3, r25	; 0x03
    26a4:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    26a6:	80 91 14 03 	lds	r24, 0x0314
    26aa:	90 91 15 03 	lds	r25, 0x0315
    26ae:	02 96       	adiw	r24, 0x02	; 2
    26b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    26bc:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>
    26c0:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	88 23       	and	r24, r24
    26c6:	11 f4       	brne	.+4      	; 0x26cc <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    26c8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
		}
	}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    26dc:	af 92       	push	r10
    26de:	bf 92       	push	r11
    26e0:	cf 92       	push	r12
    26e2:	df 92       	push	r13
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	0f 93       	push	r16
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    26f4:	20 e6       	ldi	r18, 0x60	; 96
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	85 ed       	ldi	r24, 0xD5	; 213
    26fa:	96 e1       	ldi	r25, 0x16	; 22
    26fc:	b9 01       	movw	r22, r18
    26fe:	45 e5       	ldi	r20, 0x55	; 85
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	00 e0       	ldi	r16, 0x00	; 0
    2708:	ee 24       	eor	r14, r14
    270a:	ff 24       	eor	r15, r15
    270c:	cc 24       	eor	r12, r12
    270e:	dd 24       	eor	r13, r13
    2710:	aa 24       	eor	r10, r10
    2712:	bb 24       	eor	r11, r11
    2714:	0e 94 75 11 	call	0x22ea	; 0x22ea <xTaskGenericCreate>
    2718:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	51 f4       	brne	.+20     	; 0x2734 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2720:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	80 93 1c 03 	sts	0x031C, r24
		xTickCount = ( portTickType ) 0U;
    2728:	10 92 19 03 	sts	0x0319, r1
    272c:	10 92 18 03 	sts	0x0318, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2730:	0e 94 a5 0b 	call	0x174a	; 0x174a <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	0f 91       	pop	r16
    273c:	ff 90       	pop	r15
    273e:	ef 90       	pop	r14
    2740:	df 90       	pop	r13
    2742:	cf 90       	pop	r12
    2744:	bf 90       	pop	r11
    2746:	af 90       	pop	r10
    2748:	08 95       	ret

0000274a <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2752:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2754:	10 92 1c 03 	sts	0x031C, r1
	vPortEndScheduler();
    2758:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortEndScheduler>
}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    276a:	80 91 1d 03 	lds	r24, 0x031D
    276e:	8f 5f       	subi	r24, 0xFF	; 255
    2770:	80 93 1d 03 	sts	0x031D, r24
}
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <xTaskResumeAll+0x6>
    2780:	00 d0       	rcall	.+0      	; 0x2782 <xTaskResumeAll+0x8>
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2786:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    278e:	80 91 1d 03 	lds	r24, 0x031D
    2792:	81 50       	subi	r24, 0x01	; 1
    2794:	80 93 1d 03 	sts	0x031D, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2798:	80 91 1d 03 	lds	r24, 0x031D
    279c:	88 23       	and	r24, r24
    279e:	09 f0       	breq	.+2      	; 0x27a2 <xTaskResumeAll+0x28>
    27a0:	6c c0       	rjmp	.+216    	; 0x287a <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    27a2:	80 91 17 03 	lds	r24, 0x0317
    27a6:	88 23       	and	r24, r24
    27a8:	09 f4       	brne	.+2      	; 0x27ac <xTaskResumeAll+0x32>
    27aa:	67 c0       	rjmp	.+206    	; 0x287a <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    27ac:	19 82       	std	Y+1, r1	; 0x01
    27ae:	41 c0       	rjmp	.+130    	; 0x2832 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    27b0:	e0 91 6a 03 	lds	r30, 0x036A
    27b4:	f0 91 6b 03 	lds	r31, 0x036B
    27b8:	86 81       	ldd	r24, Z+6	; 0x06
    27ba:	97 81       	ldd	r25, Z+7	; 0x07
    27bc:	9c 83       	std	Y+4, r25	; 0x04
    27be:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	0c 96       	adiw	r24, 0x0c	; 12
    27c6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	02 96       	adiw	r24, 0x02	; 2
    27d0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    27d4:	eb 81       	ldd	r30, Y+3	; 0x03
    27d6:	fc 81       	ldd	r31, Y+4	; 0x04
    27d8:	96 89       	ldd	r25, Z+22	; 0x16
    27da:	80 91 1b 03 	lds	r24, 0x031B
    27de:	89 17       	cp	r24, r25
    27e0:	28 f4       	brcc	.+10     	; 0x27ec <xTaskResumeAll+0x72>
    27e2:	eb 81       	ldd	r30, Y+3	; 0x03
    27e4:	fc 81       	ldd	r31, Y+4	; 0x04
    27e6:	86 89       	ldd	r24, Z+22	; 0x16
    27e8:	80 93 1b 03 	sts	0x031B, r24
    27ec:	eb 81       	ldd	r30, Y+3	; 0x03
    27ee:	fc 81       	ldd	r31, Y+4	; 0x04
    27f0:	86 89       	ldd	r24, Z+22	; 0x16
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	c9 01       	movw	r24, r18
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	82 0f       	add	r24, r18
    2806:	93 1f       	adc	r25, r19
    2808:	8e 5d       	subi	r24, 0xDE	; 222
    280a:	9c 4f       	sbci	r25, 0xFC	; 252
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	2e 5f       	subi	r18, 0xFE	; 254
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	b9 01       	movw	r22, r18
    2816:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    281a:	eb 81       	ldd	r30, Y+3	; 0x03
    281c:	fc 81       	ldd	r31, Y+4	; 0x04
    281e:	96 89       	ldd	r25, Z+22	; 0x16
    2820:	e0 91 14 03 	lds	r30, 0x0314
    2824:	f0 91 15 03 	lds	r31, 0x0315
    2828:	86 89       	ldd	r24, Z+22	; 0x16
    282a:	98 17       	cp	r25, r24
    282c:	10 f0       	brcs	.+4      	; 0x2832 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2832:	80 91 65 03 	lds	r24, 0x0365
    2836:	88 23       	and	r24, r24
    2838:	09 f0       	breq	.+2      	; 0x283c <xTaskResumeAll+0xc2>
    283a:	ba cf       	rjmp	.-140    	; 0x27b0 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    283c:	80 91 1e 03 	lds	r24, 0x031E
    2840:	88 23       	and	r24, r24
    2842:	71 f0       	breq	.+28     	; 0x2860 <xTaskResumeAll+0xe6>
    2844:	07 c0       	rjmp	.+14     	; 0x2854 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2846:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <vTaskIncrementTick>
						--uxMissedTicks;
    284a:	80 91 1e 03 	lds	r24, 0x031E
    284e:	81 50       	subi	r24, 0x01	; 1
    2850:	80 93 1e 03 	sts	0x031E, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2854:	80 91 1e 03 	lds	r24, 0x031E
    2858:	88 23       	and	r24, r24
    285a:	a9 f7       	brne	.-22     	; 0x2846 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	21 f0       	breq	.+8      	; 0x286e <xTaskResumeAll+0xf4>
    2866:	80 91 1f 03 	lds	r24, 0x031F
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	31 f4       	brne	.+12     	; 0x287a <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2872:	10 92 1f 03 	sts	0x031F, r1
					portYIELD_WITHIN_API();
    2876:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    287a:	0f 90       	pop	r0
    287c:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	00 d0       	rcall	.+0      	; 0x2894 <xTaskGetTickCount+0x6>
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    289e:	80 91 18 03 	lds	r24, 0x0318
    28a2:	90 91 19 03 	lds	r25, 0x0319
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <xTaskGetTickCountFromISR+0x6>
    28c2:	0f 92       	push	r0
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    28c8:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    28ca:	80 91 18 03 	lds	r24, 0x0318
    28ce:	90 91 19 03 	lds	r25, 0x0319
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    28ee:	80 91 17 03 	lds	r24, 0x0317
}
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <vTaskIncrementTick+0x6>
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <vTaskIncrementTick+0x8>
    2900:	00 d0       	rcall	.+0      	; 0x2902 <vTaskIncrementTick+0xa>
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2906:	80 91 1d 03 	lds	r24, 0x031D
    290a:	88 23       	and	r24, r24
    290c:	09 f0       	breq	.+2      	; 0x2910 <vTaskIncrementTick+0x18>
    290e:	bb c0       	rjmp	.+374    	; 0x2a86 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2910:	80 91 18 03 	lds	r24, 0x0318
    2914:	90 91 19 03 	lds	r25, 0x0319
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	90 93 19 03 	sts	0x0319, r25
    291e:	80 93 18 03 	sts	0x0318, r24
		if( xTickCount == ( portTickType ) 0U )
    2922:	80 91 18 03 	lds	r24, 0x0318
    2926:	90 91 19 03 	lds	r25, 0x0319
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	d1 f5       	brne	.+116    	; 0x29a2 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    292e:	80 91 61 03 	lds	r24, 0x0361
    2932:	90 91 62 03 	lds	r25, 0x0362
    2936:	9c 83       	std	Y+4, r25	; 0x04
    2938:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    293a:	80 91 63 03 	lds	r24, 0x0363
    293e:	90 91 64 03 	lds	r25, 0x0364
    2942:	90 93 62 03 	sts	0x0362, r25
    2946:	80 93 61 03 	sts	0x0361, r24
			pxOverflowDelayedTaskList = pxTemp;
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	90 93 64 03 	sts	0x0364, r25
    2952:	80 93 63 03 	sts	0x0363, r24
			xNumOfOverflows++;
    2956:	80 91 20 03 	lds	r24, 0x0320
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	80 93 20 03 	sts	0x0320, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2960:	e0 91 61 03 	lds	r30, 0x0361
    2964:	f0 91 62 03 	lds	r31, 0x0362
    2968:	80 81       	ld	r24, Z
    296a:	88 23       	and	r24, r24
    296c:	39 f4       	brne	.+14     	; 0x297c <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    296e:	8f ef       	ldi	r24, 0xFF	; 255
    2970:	9f ef       	ldi	r25, 0xFF	; 255
    2972:	90 93 6e 00 	sts	0x006E, r25
    2976:	80 93 6d 00 	sts	0x006D, r24
    297a:	13 c0       	rjmp	.+38     	; 0x29a2 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    297c:	e0 91 61 03 	lds	r30, 0x0361
    2980:	f0 91 62 03 	lds	r31, 0x0362
    2984:	05 80       	ldd	r0, Z+5	; 0x05
    2986:	f6 81       	ldd	r31, Z+6	; 0x06
    2988:	e0 2d       	mov	r30, r0
    298a:	86 81       	ldd	r24, Z+6	; 0x06
    298c:	97 81       	ldd	r25, Z+7	; 0x07
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2992:	ed 81       	ldd	r30, Y+5	; 0x05
    2994:	fe 81       	ldd	r31, Y+6	; 0x06
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	90 93 6e 00 	sts	0x006E, r25
    299e:	80 93 6d 00 	sts	0x006D, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    29a2:	20 91 18 03 	lds	r18, 0x0318
    29a6:	30 91 19 03 	lds	r19, 0x0319
    29aa:	80 91 6d 00 	lds	r24, 0x006D
    29ae:	90 91 6e 00 	lds	r25, 0x006E
    29b2:	28 17       	cp	r18, r24
    29b4:	39 07       	cpc	r19, r25
    29b6:	08 f4       	brcc	.+2      	; 0x29ba <vTaskIncrementTick+0xc2>
    29b8:	6b c0       	rjmp	.+214    	; 0x2a90 <vTaskIncrementTick+0x198>
    29ba:	e0 91 61 03 	lds	r30, 0x0361
    29be:	f0 91 62 03 	lds	r31, 0x0362
    29c2:	80 81       	ld	r24, Z
    29c4:	88 23       	and	r24, r24
    29c6:	39 f4       	brne	.+14     	; 0x29d6 <vTaskIncrementTick+0xde>
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	9f ef       	ldi	r25, 0xFF	; 255
    29cc:	90 93 6e 00 	sts	0x006E, r25
    29d0:	80 93 6d 00 	sts	0x006D, r24
    29d4:	5d c0       	rjmp	.+186    	; 0x2a90 <vTaskIncrementTick+0x198>
    29d6:	e0 91 61 03 	lds	r30, 0x0361
    29da:	f0 91 62 03 	lds	r31, 0x0362
    29de:	05 80       	ldd	r0, Z+5	; 0x05
    29e0:	f6 81       	ldd	r31, Z+6	; 0x06
    29e2:	e0 2d       	mov	r30, r0
    29e4:	86 81       	ldd	r24, Z+6	; 0x06
    29e6:	97 81       	ldd	r25, Z+7	; 0x07
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	ed 81       	ldd	r30, Y+5	; 0x05
    29ee:	fe 81       	ldd	r31, Y+6	; 0x06
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	20 91 18 03 	lds	r18, 0x0318
    29fc:	30 91 19 03 	lds	r19, 0x0319
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	38 f4       	brcc	.+14     	; 0x2a18 <vTaskIncrementTick+0x120>
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	90 93 6e 00 	sts	0x006E, r25
    2a12:	80 93 6d 00 	sts	0x006D, r24
    2a16:	3c c0       	rjmp	.+120    	; 0x2a90 <vTaskIncrementTick+0x198>
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	02 96       	adiw	r24, 0x02	; 2
    2a1e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
    2a22:	ed 81       	ldd	r30, Y+5	; 0x05
    2a24:	fe 81       	ldd	r31, Y+6	; 0x06
    2a26:	84 89       	ldd	r24, Z+20	; 0x14
    2a28:	95 89       	ldd	r25, Z+21	; 0x15
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	29 f0       	breq	.+10     	; 0x2a38 <vTaskIncrementTick+0x140>
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	0c 96       	adiw	r24, 0x0c	; 12
    2a34:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
    2a38:	ed 81       	ldd	r30, Y+5	; 0x05
    2a3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a3c:	96 89       	ldd	r25, Z+22	; 0x16
    2a3e:	80 91 1b 03 	lds	r24, 0x031B
    2a42:	89 17       	cp	r24, r25
    2a44:	28 f4       	brcc	.+10     	; 0x2a50 <vTaskIncrementTick+0x158>
    2a46:	ed 81       	ldd	r30, Y+5	; 0x05
    2a48:	fe 81       	ldd	r31, Y+6	; 0x06
    2a4a:	86 89       	ldd	r24, Z+22	; 0x16
    2a4c:	80 93 1b 03 	sts	0x031B, r24
    2a50:	ed 81       	ldd	r30, Y+5	; 0x05
    2a52:	fe 81       	ldd	r31, Y+6	; 0x06
    2a54:	86 89       	ldd	r24, Z+22	; 0x16
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	c9 01       	movw	r24, r18
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	82 0f       	add	r24, r18
    2a6a:	93 1f       	adc	r25, r19
    2a6c:	ac 01       	movw	r20, r24
    2a6e:	4e 5d       	subi	r20, 0xDE	; 222
    2a70:	5c 4f       	sbci	r21, 0xFC	; 252
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	9c 01       	movw	r18, r24
    2a78:	2e 5f       	subi	r18, 0xFE	; 254
    2a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7c:	ca 01       	movw	r24, r20
    2a7e:	b9 01       	movw	r22, r18
    2a80:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    2a84:	9a cf       	rjmp	.-204    	; 0x29ba <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    2a86:	80 91 1e 03 	lds	r24, 0x031E
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	80 93 1e 03 	sts	0x031E, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2a90:	26 96       	adiw	r28, 0x06	; 6
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <vTaskSwitchContext+0x6>
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2aac:	80 91 1d 03 	lds	r24, 0x031D
    2ab0:	88 23       	and	r24, r24
    2ab2:	49 f0       	breq	.+18     	; 0x2ac6 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	80 93 1f 03 	sts	0x031F, r24
    2aba:	54 c0       	rjmp	.+168    	; 0x2b64 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2abc:	80 91 1b 03 	lds	r24, 0x031B
    2ac0:	81 50       	subi	r24, 0x01	; 1
    2ac2:	80 93 1b 03 	sts	0x031B, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2ac6:	80 91 1b 03 	lds	r24, 0x031B
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	c9 01       	movw	r24, r18
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	82 0f       	add	r24, r18
    2ade:	93 1f       	adc	r25, r19
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	ee 5d       	subi	r30, 0xDE	; 222
    2ae4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 23       	and	r24, r24
    2aea:	41 f3       	breq	.-48     	; 0x2abc <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2aec:	80 91 1b 03 	lds	r24, 0x031B
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	c9 01       	movw	r24, r18
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	82 0f       	add	r24, r18
    2b04:	93 1f       	adc	r25, r19
    2b06:	8e 5d       	subi	r24, 0xDE	; 222
    2b08:	9c 4f       	sbci	r25, 0xFC	; 252
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	01 80       	ldd	r0, Z+1	; 0x01
    2b14:	f2 81       	ldd	r31, Z+2	; 0x02
    2b16:	e0 2d       	mov	r30, r0
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	92 83       	std	Z+2, r25	; 0x02
    2b22:	81 83       	std	Z+1, r24	; 0x01
    2b24:	e9 81       	ldd	r30, Y+1	; 0x01
    2b26:	fa 81       	ldd	r31, Y+2	; 0x02
    2b28:	21 81       	ldd	r18, Z+1	; 0x01
    2b2a:	32 81       	ldd	r19, Z+2	; 0x02
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	03 96       	adiw	r24, 0x03	; 3
    2b32:	28 17       	cp	r18, r24
    2b34:	39 07       	cpc	r19, r25
    2b36:	59 f4       	brne	.+22     	; 0x2b4e <vTaskSwitchContext+0xac>
    2b38:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3c:	01 80       	ldd	r0, Z+1	; 0x01
    2b3e:	f2 81       	ldd	r31, Z+2	; 0x02
    2b40:	e0 2d       	mov	r30, r0
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	e9 81       	ldd	r30, Y+1	; 0x01
    2b48:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4a:	92 83       	std	Z+2, r25	; 0x02
    2b4c:	81 83       	std	Z+1, r24	; 0x01
    2b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b50:	fa 81       	ldd	r31, Y+2	; 0x02
    2b52:	01 80       	ldd	r0, Z+1	; 0x01
    2b54:	f2 81       	ldd	r31, Z+2	; 0x02
    2b56:	e0 2d       	mov	r30, r0
    2b58:	86 81       	ldd	r24, Z+6	; 0x06
    2b5a:	97 81       	ldd	r25, Z+7	; 0x07
    2b5c:	90 93 15 03 	sts	0x0315, r25
    2b60:	80 93 14 03 	sts	0x0314, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <vTaskPlaceOnEventList+0x6>
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <vTaskPlaceOnEventList+0x8>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <vTaskPlaceOnEventList+0xa>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	9c 83       	std	Y+4, r25	; 0x04
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
    2b80:	7e 83       	std	Y+6, r23	; 0x06
    2b82:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2b84:	4b 81       	ldd	r20, Y+3	; 0x03
    2b86:	5c 81       	ldd	r21, Y+4	; 0x04
    2b88:	80 91 14 03 	lds	r24, 0x0314
    2b8c:	90 91 15 03 	lds	r25, 0x0315
    2b90:	9c 01       	movw	r18, r24
    2b92:	24 5f       	subi	r18, 0xF4	; 244
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	ca 01       	movw	r24, r20
    2b98:	b9 01       	movw	r22, r18
    2b9a:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b9e:	80 91 14 03 	lds	r24, 0x0314
    2ba2:	90 91 15 03 	lds	r25, 0x0315
    2ba6:	02 96       	adiw	r24, 0x02	; 2
    2ba8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2bac:	20 91 18 03 	lds	r18, 0x0318
    2bb0:	30 91 19 03 	lds	r19, 0x0319
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	82 0f       	add	r24, r18
    2bba:	93 1f       	adc	r25, r19
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc4:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2bc8:	26 96       	adiw	r28, 0x06	; 6
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <xTaskRemoveFromEventList+0x6>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <xTaskRemoveFromEventList+0x8>
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	9d 83       	std	Y+5, r25	; 0x05
    2bea:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2bec:	ec 81       	ldd	r30, Y+4	; 0x04
    2bee:	fd 81       	ldd	r31, Y+5	; 0x05
    2bf0:	05 80       	ldd	r0, Z+5	; 0x05
    2bf2:	f6 81       	ldd	r31, Z+6	; 0x06
    2bf4:	e0 2d       	mov	r30, r0
    2bf6:	86 81       	ldd	r24, Z+6	; 0x06
    2bf8:	97 81       	ldd	r25, Z+7	; 0x07
    2bfa:	9b 83       	std	Y+3, r25	; 0x03
    2bfc:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	0c 96       	adiw	r24, 0x0c	; 12
    2c04:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2c08:	80 91 1d 03 	lds	r24, 0x031D
    2c0c:	88 23       	and	r24, r24
    2c0e:	61 f5       	brne	.+88     	; 0x2c68 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	02 96       	adiw	r24, 0x02	; 2
    2c16:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1e:	96 89       	ldd	r25, Z+22	; 0x16
    2c20:	80 91 1b 03 	lds	r24, 0x031B
    2c24:	89 17       	cp	r24, r25
    2c26:	28 f4       	brcc	.+10     	; 0x2c32 <xTaskRemoveFromEventList+0x58>
    2c28:	ea 81       	ldd	r30, Y+2	; 0x02
    2c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c2c:	86 89       	ldd	r24, Z+22	; 0x16
    2c2e:	80 93 1b 03 	sts	0x031B, r24
    2c32:	ea 81       	ldd	r30, Y+2	; 0x02
    2c34:	fb 81       	ldd	r31, Y+3	; 0x03
    2c36:	86 89       	ldd	r24, Z+22	; 0x16
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	c9 01       	movw	r24, r18
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	82 0f       	add	r24, r18
    2c4c:	93 1f       	adc	r25, r19
    2c4e:	ac 01       	movw	r20, r24
    2c50:	4e 5d       	subi	r20, 0xDE	; 222
    2c52:	5c 4f       	sbci	r21, 0xFC	; 252
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	9c 01       	movw	r18, r24
    2c5a:	2e 5f       	subi	r18, 0xFE	; 254
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	ca 01       	movw	r24, r20
    2c60:	b9 01       	movw	r22, r18
    2c62:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    2c66:	0a c0       	rjmp	.+20     	; 0x2c7c <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	24 5f       	subi	r18, 0xF4	; 244
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	85 e6       	ldi	r24, 0x65	; 101
    2c74:	93 e0       	ldi	r25, 0x03	; 3
    2c76:	b9 01       	movw	r22, r18
    2c78:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2c7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c80:	96 89       	ldd	r25, Z+22	; 0x16
    2c82:	e0 91 14 03 	lds	r30, 0x0314
    2c86:	f0 91 15 03 	lds	r31, 0x0315
    2c8a:	86 89       	ldd	r24, Z+22	; 0x16
    2c8c:	98 17       	cp	r25, r24
    2c8e:	18 f0       	brcs	.+6      	; 0x2c96 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    2c96:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <vTaskSetTimeOutState+0x6>
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	9a 83       	std	Y+2, r25	; 0x02
    2cb6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2cb8:	80 91 20 03 	lds	r24, 0x0320
    2cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2cc2:	80 91 18 03 	lds	r24, 0x0318
    2cc6:	90 91 19 03 	lds	r25, 0x0319
    2cca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cce:	92 83       	std	Z+2, r25	; 0x02
    2cd0:	81 83       	std	Z+1, r24	; 0x01
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <xTaskCheckForTimeOut+0x6>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <xTaskCheckForTimeOut+0x8>
    2ce4:	0f 92       	push	r0
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9b 83       	std	Y+3, r25	; 0x03
    2cec:	8a 83       	std	Y+2, r24	; 0x02
    2cee:	7d 83       	std	Y+5, r23	; 0x05
    2cf0:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2cf8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cfa:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfc:	90 81       	ld	r25, Z
    2cfe:	80 91 20 03 	lds	r24, 0x0320
    2d02:	98 17       	cp	r25, r24
    2d04:	71 f0       	breq	.+28     	; 0x2d22 <xTaskCheckForTimeOut+0x46>
    2d06:	ea 81       	ldd	r30, Y+2	; 0x02
    2d08:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0a:	21 81       	ldd	r18, Z+1	; 0x01
    2d0c:	32 81       	ldd	r19, Z+2	; 0x02
    2d0e:	80 91 18 03 	lds	r24, 0x0318
    2d12:	90 91 19 03 	lds	r25, 0x0319
    2d16:	82 17       	cp	r24, r18
    2d18:	93 07       	cpc	r25, r19
    2d1a:	18 f0       	brcs	.+6      	; 0x2d22 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	2f c0       	rjmp	.+94     	; 0x2d80 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2d22:	20 91 18 03 	lds	r18, 0x0318
    2d26:	30 91 19 03 	lds	r19, 0x0319
    2d2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d2e:	81 81       	ldd	r24, Z+1	; 0x01
    2d30:	92 81       	ldd	r25, Z+2	; 0x02
    2d32:	28 1b       	sub	r18, r24
    2d34:	39 0b       	sbc	r19, r25
    2d36:	ec 81       	ldd	r30, Y+4	; 0x04
    2d38:	fd 81       	ldd	r31, Y+5	; 0x05
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	28 17       	cp	r18, r24
    2d40:	39 07       	cpc	r19, r25
    2d42:	e0 f4       	brcc	.+56     	; 0x2d7c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2d44:	ec 81       	ldd	r30, Y+4	; 0x04
    2d46:	fd 81       	ldd	r31, Y+5	; 0x05
    2d48:	40 81       	ld	r20, Z
    2d4a:	51 81       	ldd	r21, Z+1	; 0x01
    2d4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d50:	21 81       	ldd	r18, Z+1	; 0x01
    2d52:	32 81       	ldd	r19, Z+2	; 0x02
    2d54:	80 91 18 03 	lds	r24, 0x0318
    2d58:	90 91 19 03 	lds	r25, 0x0319
    2d5c:	b9 01       	movw	r22, r18
    2d5e:	68 1b       	sub	r22, r24
    2d60:	79 0b       	sbc	r23, r25
    2d62:	cb 01       	movw	r24, r22
    2d64:	84 0f       	add	r24, r20
    2d66:	95 1f       	adc	r25, r21
    2d68:	ec 81       	ldd	r30, Y+4	; 0x04
    2d6a:	fd 81       	ldd	r31, Y+5	; 0x05
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2d78:	19 82       	std	Y+1, r1	; 0x01
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2d80:	0f 90       	pop	r0
    2d82:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	80 93 1f 03 	sts	0x031F, r24
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <prvIdleTask+0x6>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    2db8:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <prvCheckTasksWaitingTermination>
    2dbc:	fd cf       	rjmp	.-6      	; 0x2db8 <prvIdleTask+0xe>

00002dbe <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	29 97       	sbiw	r28, 0x09	; 9
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	7c 83       	std	Y+4, r23	; 0x04
    2ddc:	6b 83       	std	Y+3, r22	; 0x03
    2dde:	4d 83       	std	Y+5, r20	; 0x05
    2de0:	3f 83       	std	Y+7, r19	; 0x07
    2de2:	2e 83       	std	Y+6, r18	; 0x06
    2de4:	19 87       	std	Y+9, r17	; 0x09
    2de6:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	49 96       	adiw	r24, 0x19	; 25
    2dee:	2b 81       	ldd	r18, Y+3	; 0x03
    2df0:	3c 81       	ldd	r19, Y+4	; 0x04
    2df2:	b9 01       	movw	r22, r18
    2df4:	48 e0       	ldi	r20, 0x08	; 8
    2df6:	50 e0       	ldi	r21, 0x00	; 0
    2df8:	0e 94 02 24 	call	0x4804	; 0x4804 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    2dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    2e00:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	85 30       	cpi	r24, 0x05	; 5
    2e06:	10 f0       	brcs	.+4      	; 0x2e0c <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    2e08:	84 e0       	ldi	r24, 0x04	; 4
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    2e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	9a 81       	ldd	r25, Y+2	; 0x02
    2e18:	02 96       	adiw	r24, 0x02	; 2
    2e1a:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	0c 96       	adiw	r24, 0x0c	; 12
    2e24:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2e28:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	91 87       	std	Z+9, r25	; 0x09
    2e32:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	28 2f       	mov	r18, r24
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	85 e0       	ldi	r24, 0x05	; 5
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	82 1b       	sub	r24, r18
    2e40:	93 0b       	sbc	r25, r19
    2e42:	e9 81       	ldd	r30, Y+1	; 0x01
    2e44:	fa 81       	ldd	r31, Y+2	; 0x02
    2e46:	95 87       	std	Z+13, r25	; 0x0d
    2e48:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	93 8b       	std	Z+19, r25	; 0x13
    2e54:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2e56:	29 96       	adiw	r28, 0x09	; 9
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	1f 91       	pop	r17
    2e68:	0f 91       	pop	r16
    2e6a:	08 95       	ret

00002e6c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	0f 92       	push	r0
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2e76:	19 82       	std	Y+1, r1	; 0x01
    2e78:	13 c0       	rjmp	.+38     	; 0x2ea0 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	c9 01       	movw	r24, r18
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	8e 5d       	subi	r24, 0xDE	; 222
    2e94:	9c 4f       	sbci	r25, 0xFC	; 252
    2e96:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	85 30       	cpi	r24, 0x05	; 5
    2ea4:	50 f3       	brcs	.-44     	; 0x2e7a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2ea6:	8f e4       	ldi	r24, 0x4F	; 79
    2ea8:	93 e0       	ldi	r25, 0x03	; 3
    2eaa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2eae:	88 e5       	ldi	r24, 0x58	; 88
    2eb0:	93 e0       	ldi	r25, 0x03	; 3
    2eb2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2eb6:	85 e6       	ldi	r24, 0x65	; 101
    2eb8:	93 e0       	ldi	r25, 0x03	; 3
    2eba:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2ebe:	8e e6       	ldi	r24, 0x6E	; 110
    2ec0:	93 e0       	ldi	r25, 0x03	; 3
    2ec2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2ec6:	8f e4       	ldi	r24, 0x4F	; 79
    2ec8:	93 e0       	ldi	r25, 0x03	; 3
    2eca:	90 93 62 03 	sts	0x0362, r25
    2ece:	80 93 61 03 	sts	0x0361, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2ed2:	88 e5       	ldi	r24, 0x58	; 88
    2ed4:	93 e0       	ldi	r25, 0x03	; 3
    2ed6:	90 93 64 03 	sts	0x0364, r25
    2eda:	80 93 63 03 	sts	0x0363, r24
}
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <prvCheckTasksWaitingTermination+0x6>
    2eec:	0f 92       	push	r0
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2ef2:	80 91 16 03 	lds	r24, 0x0316
    2ef6:	88 23       	and	r24, r24
    2ef8:	71 f1       	breq	.+92     	; 0x2f56 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    2efa:	0e 94 b1 13 	call	0x2762	; 0x2762 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2efe:	80 91 6e 03 	lds	r24, 0x036E
    2f02:	1b 82       	std	Y+3, r1	; 0x03
    2f04:	88 23       	and	r24, r24
    2f06:	11 f4       	brne	.+4      	; 0x2f0c <prvCheckTasksWaitingTermination+0x26>
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    2f0c:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	88 23       	and	r24, r24
    2f14:	01 f5       	brne	.+64     	; 0x2f56 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2f1c:	e0 91 73 03 	lds	r30, 0x0373
    2f20:	f0 91 74 03 	lds	r31, 0x0374
    2f24:	86 81       	ldd	r24, Z+6	; 0x06
    2f26:	97 81       	ldd	r25, Z+7	; 0x07
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	02 96       	adiw	r24, 0x02	; 2
    2f32:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					--uxCurrentNumberOfTasks;
    2f36:	80 91 17 03 	lds	r24, 0x0317
    2f3a:	81 50       	subi	r24, 0x01	; 1
    2f3c:	80 93 17 03 	sts	0x0317, r24
					--uxTasksDeleted;
    2f40:	80 91 16 03 	lds	r24, 0x0316
    2f44:	81 50       	subi	r24, 0x01	; 1
    2f46:	80 93 16 03 	sts	0x0316, r24
				}
				taskEXIT_CRITICAL();
    2f4a:	0f 90       	pop	r0
    2f4c:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	0e 94 4a 18 	call	0x3094	; 0x3094 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <prvAddCurrentTaskToDelayedList+0x6>
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2f70:	e0 91 14 03 	lds	r30, 0x0314
    2f74:	f0 91 15 03 	lds	r31, 0x0315
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	93 83       	std	Z+3, r25	; 0x03
    2f7e:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    2f80:	20 91 18 03 	lds	r18, 0x0318
    2f84:	30 91 19 03 	lds	r19, 0x0319
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	82 17       	cp	r24, r18
    2f8e:	93 07       	cpc	r25, r19
    2f90:	70 f4       	brcc	.+28     	; 0x2fae <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2f92:	80 91 63 03 	lds	r24, 0x0363
    2f96:	90 91 64 03 	lds	r25, 0x0364
    2f9a:	20 91 14 03 	lds	r18, 0x0314
    2f9e:	30 91 15 03 	lds	r19, 0x0315
    2fa2:	2e 5f       	subi	r18, 0xFE	; 254
    2fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa6:	b9 01       	movw	r22, r18
    2fa8:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
    2fac:	1e c0       	rjmp	.+60     	; 0x2fea <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2fae:	40 91 61 03 	lds	r20, 0x0361
    2fb2:	50 91 62 03 	lds	r21, 0x0362
    2fb6:	80 91 14 03 	lds	r24, 0x0314
    2fba:	90 91 15 03 	lds	r25, 0x0315
    2fbe:	9c 01       	movw	r18, r24
    2fc0:	2e 5f       	subi	r18, 0xFE	; 254
    2fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc4:	ca 01       	movw	r24, r20
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2fcc:	20 91 6d 00 	lds	r18, 0x006D
    2fd0:	30 91 6e 00 	lds	r19, 0x006E
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	82 17       	cp	r24, r18
    2fda:	93 07       	cpc	r25, r19
    2fdc:	30 f4       	brcc	.+12     	; 0x2fea <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	90 93 6e 00 	sts	0x006E, r25
    2fe6:	80 93 6d 00 	sts	0x006D, r24
		}
	}
}
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	28 97       	sbiw	r28, 0x08	; 8
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
    300c:	7e 83       	std	Y+6, r23	; 0x06
    300e:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3010:	81 e2       	ldi	r24, 0x21	; 33
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	69 f1       	breq	.+90     	; 0x307e <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	39 f4       	brne	.+14     	; 0x303a <prvAllocateTCBAndStack+0x46>
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    3034:	98 87       	std	Y+8, r25	; 0x08
    3036:	8f 83       	std	Y+7, r24	; 0x07
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <prvAllocateTCBAndStack+0x4e>
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	9e 81       	ldd	r25, Y+6	; 0x06
    303e:	98 87       	std	Y+8, r25	; 0x08
    3040:	8f 83       	std	Y+7, r24	; 0x07
    3042:	e9 81       	ldd	r30, Y+1	; 0x01
    3044:	fa 81       	ldd	r31, Y+2	; 0x02
    3046:	8f 81       	ldd	r24, Y+7	; 0x07
    3048:	98 85       	ldd	r25, Y+8	; 0x08
    304a:	90 8f       	std	Z+24, r25	; 0x18
    304c:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    304e:	e9 81       	ldd	r30, Y+1	; 0x01
    3050:	fa 81       	ldd	r31, Y+2	; 0x02
    3052:	87 89       	ldd	r24, Z+23	; 0x17
    3054:	90 8d       	ldd	r25, Z+24	; 0x18
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	39 f4       	brne	.+14     	; 0x3068 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
			pxNewTCB = NULL;
    3062:	1a 82       	std	Y+2, r1	; 0x02
    3064:	19 82       	std	Y+1, r1	; 0x01
    3066:	0b c0       	rjmp	.+22     	; 0x307e <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    3068:	e9 81       	ldd	r30, Y+1	; 0x01
    306a:	fa 81       	ldd	r31, Y+2	; 0x02
    306c:	87 89       	ldd	r24, Z+23	; 0x17
    306e:	90 8d       	ldd	r25, Z+24	; 0x18
    3070:	2b 81       	ldd	r18, Y+3	; 0x03
    3072:	3c 81       	ldd	r19, Y+4	; 0x04
    3074:	65 ea       	ldi	r22, 0xA5	; 165
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	a9 01       	movw	r20, r18
    307a:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <memset>
		}
	}

	return pxNewTCB;
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3082:	28 96       	adiw	r28, 0x08	; 8
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	00 d0       	rcall	.+0      	; 0x309a <prvDeleteTCB+0x6>
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    30a2:	e9 81       	ldd	r30, Y+1	; 0x01
    30a4:	fa 81       	ldd	r31, Y+2	; 0x02
    30a6:	87 89       	ldd	r24, Z+23	; 0x17
    30a8:	90 8d       	ldd	r25, Z+24	; 0x18
    30aa:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
		vPortFree( pxTCB );
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
	}
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <UART_Init>:
#include <avr/io.h>

#define BAUD_RATE		9600

void UART_Init(void)
{
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
//	UCSRB UCSZ2
	UCSRC |= (1<<URSEL); //register select
    30c8:	a0 e4       	ldi	r26, 0x40	; 64
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e0 e4       	ldi	r30, 0x40	; 64
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	80 68       	ori	r24, 0x80	; 128
    30d4:	8c 93       	st	X, r24
	UCSRC &= ~(1<<UMSEL); //
    30d6:	a0 e4       	ldi	r26, 0x40	; 64
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e0 e4       	ldi	r30, 0x40	; 64
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	8f 7b       	andi	r24, 0xBF	; 191
    30e2:	8c 93       	st	X, r24
	UCSRC |= (1<<UPM1);
    30e4:	a0 e4       	ldi	r26, 0x40	; 64
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e0 e4       	ldi	r30, 0x40	; 64
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	80 62       	ori	r24, 0x20	; 32
    30f0:	8c 93       	st	X, r24

}
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <UART_Tx>:

void UART_Tx(char data)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	0f 92       	push	r0
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	89 83       	std	Y+1, r24	; 0x01

}
    3104:	0f 90       	pop	r0
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <UART_Rx>:

char UART_Rx(void)
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	0f 92       	push	r0
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62

}
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <TIMER0_OVERflow_init>:
#include "../Header/TIMER0_config.h"

#include <avr/io.h>

void TIMER0_OVERflow_init(void)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
	/*NORmal mode*/
	TCCR0 &= ~(1<<WGM00);
    3126:	a3 e5       	ldi	r26, 0x53	; 83
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e3 e5       	ldi	r30, 0x53	; 83
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	8f 7b       	andi	r24, 0xBF	; 191
    3132:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<WGM01);
    3134:	a3 e5       	ldi	r26, 0x53	; 83
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e3 e5       	ldi	r30, 0x53	; 83
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	87 7f       	andi	r24, 0xF7	; 247
    3140:	8c 93       	st	X, r24
	/* PRESCALLER*/
	TCCR0 &= ~(1<<CS02);
    3142:	a3 e5       	ldi	r26, 0x53	; 83
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	e3 e5       	ldi	r30, 0x53	; 83
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	8b 7f       	andi	r24, 0xFB	; 251
    314e:	8c 93       	st	X, r24
	TCCR0 |= (1<<CS01);
    3150:	a3 e5       	ldi	r26, 0x53	; 83
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e3 e5       	ldi	r30, 0x53	; 83
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	82 60       	ori	r24, 0x02	; 2
    315c:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<CS00);
    315e:	a3 e5       	ldi	r26, 0x53	; 83
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e3 e5       	ldi	r30, 0x53	; 83
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8e 7f       	andi	r24, 0xFE	; 254
    316a:	8c 93       	st	X, r24
	/*preload*/
	TCNT0 = OVER_FLOW_PRELOAD;
    316c:	e2 e5       	ldi	r30, 0x52	; 82
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	10 82       	st	Z, r1
	/*IE*/
	TIMSK |= (1<<TOIE0);
    3172:	a9 e5       	ldi	r26, 0x59	; 89
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e9 e5       	ldi	r30, 0x59	; 89
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	81 60       	ori	r24, 0x01	; 1
    317e:	8c 93       	st	X, r24
}
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <__vector_11>:


/*ISR of TIMER0 overflow*/
void __vector_11(void)
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
	static char count = 0;
	count ++;
    318e:	80 91 77 03 	lds	r24, 0x0377
    3192:	8f 5f       	subi	r24, 0xFF	; 255
    3194:	80 93 77 03 	sts	0x0377, r24
	if (count == NUMBER_OF_COUNTS)
	{

	}
}
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <CTC_init>:
//{
//
//}

void CTC_init(void)
{
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62

}
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <DIO_VoidSetPinDir>:
# Argument      : U8 Local_PortName , U8 Local_PinNumber , U8 Local_Direction#
# Return        : Void                                                		 #
# Description   : this function select A specific Pin INPUT OR OUTPUT 		 #
##############################################################################*/
void DIO_VoidSetPinDir(U8 Local_PortName , U8 Local_PinNumber , U8 Local_Direction)
{
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	27 97       	sbiw	r28, 0x07	; 7
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    31c0:	89 83       	std	Y+1, r24	; 0x01
    31c2:	6a 83       	std	Y+2, r22	; 0x02
    31c4:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= PORT_D  && Local_PinNumber <= PIN_D7)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	84 30       	cpi	r24, 0x04	; 4
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <DIO_VoidSetPinDir+0x22>
    31cc:	ee c0       	rjmp	.+476    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	88 30       	cpi	r24, 0x08	; 8
    31d2:	08 f0       	brcs	.+2      	; 0x31d6 <DIO_VoidSetPinDir+0x2a>
    31d4:	ea c0       	rjmp	.+468    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
	{
		if(Local_Direction == DIO_OUTPUT)
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	81 30       	cpi	r24, 0x01	; 1
    31da:	09 f0       	breq	.+2      	; 0x31de <DIO_VoidSetPinDir+0x32>
    31dc:	6f c0       	rjmp	.+222    	; 0x32bc <DIO_VoidSetPinDir+0x110>
		{
			switch (Local_PortName)
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	3f 83       	std	Y+7, r19	; 0x07
    31e6:	2e 83       	std	Y+6, r18	; 0x06
    31e8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ea:	9f 81       	ldd	r25, Y+7	; 0x07
    31ec:	81 30       	cpi	r24, 0x01	; 1
    31ee:	91 05       	cpc	r25, r1
    31f0:	49 f1       	breq	.+82     	; 0x3244 <DIO_VoidSetPinDir+0x98>
    31f2:	2e 81       	ldd	r18, Y+6	; 0x06
    31f4:	3f 81       	ldd	r19, Y+7	; 0x07
    31f6:	22 30       	cpi	r18, 0x02	; 2
    31f8:	31 05       	cpc	r19, r1
    31fa:	2c f4       	brge	.+10     	; 0x3206 <DIO_VoidSetPinDir+0x5a>
    31fc:	8e 81       	ldd	r24, Y+6	; 0x06
    31fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	61 f0       	breq	.+24     	; 0x321c <DIO_VoidSetPinDir+0x70>
    3204:	d2 c0       	rjmp	.+420    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
    3206:	2e 81       	ldd	r18, Y+6	; 0x06
    3208:	3f 81       	ldd	r19, Y+7	; 0x07
    320a:	22 30       	cpi	r18, 0x02	; 2
    320c:	31 05       	cpc	r19, r1
    320e:	71 f1       	breq	.+92     	; 0x326c <DIO_VoidSetPinDir+0xc0>
    3210:	8e 81       	ldd	r24, Y+6	; 0x06
    3212:	9f 81       	ldd	r25, Y+7	; 0x07
    3214:	83 30       	cpi	r24, 0x03	; 3
    3216:	91 05       	cpc	r25, r1
    3218:	e9 f1       	breq	.+122    	; 0x3294 <DIO_VoidSetPinDir+0xe8>
    321a:	c7 c0       	rjmp	.+398    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			{
			case PORT_A : SET_BIT(DDRA_REG,Local_PinNumber);break;
    321c:	aa e3       	ldi	r26, 0x3A	; 58
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	ea e3       	ldi	r30, 0x3A	; 58
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	48 2f       	mov	r20, r24
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	28 2f       	mov	r18, r24
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	02 2e       	mov	r0, r18
    3234:	02 c0       	rjmp	.+4      	; 0x323a <DIO_VoidSetPinDir+0x8e>
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	0a 94       	dec	r0
    323c:	e2 f7       	brpl	.-8      	; 0x3236 <DIO_VoidSetPinDir+0x8a>
    323e:	84 2b       	or	r24, r20
    3240:	8c 93       	st	X, r24
    3242:	b3 c0       	rjmp	.+358    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			case PORT_B : SET_BIT(DDRB_REG,Local_PinNumber);break;
    3244:	a7 e3       	ldi	r26, 0x37	; 55
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	e7 e3       	ldi	r30, 0x37	; 55
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	48 2f       	mov	r20, r24
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	28 2f       	mov	r18, r24
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	02 2e       	mov	r0, r18
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <DIO_VoidSetPinDir+0xb6>
    325e:	88 0f       	add	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	0a 94       	dec	r0
    3264:	e2 f7       	brpl	.-8      	; 0x325e <DIO_VoidSetPinDir+0xb2>
    3266:	84 2b       	or	r24, r20
    3268:	8c 93       	st	X, r24
    326a:	9f c0       	rjmp	.+318    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			case PORT_C : SET_BIT(DDRC_REG,Local_PinNumber);break;
    326c:	a4 e3       	ldi	r26, 0x34	; 52
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e4 e3       	ldi	r30, 0x34	; 52
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	48 2f       	mov	r20, r24
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	02 2e       	mov	r0, r18
    3284:	02 c0       	rjmp	.+4      	; 0x328a <DIO_VoidSetPinDir+0xde>
    3286:	88 0f       	add	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	0a 94       	dec	r0
    328c:	e2 f7       	brpl	.-8      	; 0x3286 <DIO_VoidSetPinDir+0xda>
    328e:	84 2b       	or	r24, r20
    3290:	8c 93       	st	X, r24
    3292:	8b c0       	rjmp	.+278    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			case PORT_D : SET_BIT(DDRD_REG,Local_PinNumber);break;
    3294:	a1 e3       	ldi	r26, 0x31	; 49
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e1 e3       	ldi	r30, 0x31	; 49
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	48 2f       	mov	r20, r24
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	02 2e       	mov	r0, r18
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <DIO_VoidSetPinDir+0x106>
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	0a 94       	dec	r0
    32b4:	e2 f7       	brpl	.-8      	; 0x32ae <DIO_VoidSetPinDir+0x102>
    32b6:	84 2b       	or	r24, r20
    32b8:	8c 93       	st	X, r24
    32ba:	77 c0       	rjmp	.+238    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			}
		}
		else if (Local_Direction==DIO_INPUT)
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	88 23       	and	r24, r24
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <DIO_VoidSetPinDir+0x118>
    32c2:	73 c0       	rjmp	.+230    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
		{
			switch(Local_PortName)
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	3d 83       	std	Y+5, r19	; 0x05
    32cc:	2c 83       	std	Y+4, r18	; 0x04
    32ce:	8c 81       	ldd	r24, Y+4	; 0x04
    32d0:	9d 81       	ldd	r25, Y+5	; 0x05
    32d2:	81 30       	cpi	r24, 0x01	; 1
    32d4:	91 05       	cpc	r25, r1
    32d6:	59 f1       	breq	.+86     	; 0x332e <DIO_VoidSetPinDir+0x182>
    32d8:	2c 81       	ldd	r18, Y+4	; 0x04
    32da:	3d 81       	ldd	r19, Y+5	; 0x05
    32dc:	22 30       	cpi	r18, 0x02	; 2
    32de:	31 05       	cpc	r19, r1
    32e0:	2c f4       	brge	.+10     	; 0x32ec <DIO_VoidSetPinDir+0x140>
    32e2:	8c 81       	ldd	r24, Y+4	; 0x04
    32e4:	9d 81       	ldd	r25, Y+5	; 0x05
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	69 f0       	breq	.+26     	; 0x3304 <DIO_VoidSetPinDir+0x158>
    32ea:	5f c0       	rjmp	.+190    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
    32ec:	2c 81       	ldd	r18, Y+4	; 0x04
    32ee:	3d 81       	ldd	r19, Y+5	; 0x05
    32f0:	22 30       	cpi	r18, 0x02	; 2
    32f2:	31 05       	cpc	r19, r1
    32f4:	89 f1       	breq	.+98     	; 0x3358 <DIO_VoidSetPinDir+0x1ac>
    32f6:	8c 81       	ldd	r24, Y+4	; 0x04
    32f8:	9d 81       	ldd	r25, Y+5	; 0x05
    32fa:	83 30       	cpi	r24, 0x03	; 3
    32fc:	91 05       	cpc	r25, r1
    32fe:	09 f4       	brne	.+2      	; 0x3302 <DIO_VoidSetPinDir+0x156>
    3300:	40 c0       	rjmp	.+128    	; 0x3382 <DIO_VoidSetPinDir+0x1d6>
    3302:	53 c0       	rjmp	.+166    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			{
			case PORT_A : CLEAR_BIT(DDRA_REG,Local_PinNumber);break;
    3304:	aa e3       	ldi	r26, 0x3A	; 58
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	ea e3       	ldi	r30, 0x3A	; 58
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	48 2f       	mov	r20, r24
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	02 2e       	mov	r0, r18
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <DIO_VoidSetPinDir+0x176>
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	0a 94       	dec	r0
    3324:	e2 f7       	brpl	.-8      	; 0x331e <DIO_VoidSetPinDir+0x172>
    3326:	80 95       	com	r24
    3328:	84 23       	and	r24, r20
    332a:	8c 93       	st	X, r24
    332c:	3e c0       	rjmp	.+124    	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
			case PORT_B : CLEAR_BIT(DDRB_REG,Local_PinNumber);break;
    332e:	a7 e3       	ldi	r26, 0x37	; 55
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e7 e3       	ldi	r30, 0x37	; 55
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	48 2f       	mov	r20, r24
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	02 2e       	mov	r0, r18
    3346:	02 c0       	rjmp	.+4      	; 0x334c <DIO_VoidSetPinDir+0x1a0>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	0a 94       	dec	r0
    334e:	e2 f7       	brpl	.-8      	; 0x3348 <DIO_VoidSetPinDir+0x19c>
    3350:	80 95       	com	r24
    3352:	84 23       	and	r24, r20
    3354:	8c 93       	st	X, r24
    3356:	29 c0       	rjmp	.+82     	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
		   case PORT_C  : CLEAR_BIT(DDRC_REG,Local_PinNumber);break;
    3358:	a4 e3       	ldi	r26, 0x34	; 52
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e4 e3       	ldi	r30, 0x34	; 52
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	48 2f       	mov	r20, r24
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	02 2e       	mov	r0, r18
    3370:	02 c0       	rjmp	.+4      	; 0x3376 <DIO_VoidSetPinDir+0x1ca>
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	0a 94       	dec	r0
    3378:	e2 f7       	brpl	.-8      	; 0x3372 <DIO_VoidSetPinDir+0x1c6>
    337a:	80 95       	com	r24
    337c:	84 23       	and	r24, r20
    337e:	8c 93       	st	X, r24
    3380:	14 c0       	rjmp	.+40     	; 0x33aa <DIO_VoidSetPinDir+0x1fe>
            case PORT_D : CLEAR_BIT(DDRD_REG,Local_PinNumber);break;
    3382:	a1 e3       	ldi	r26, 0x31	; 49
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e1 e3       	ldi	r30, 0x31	; 49
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	48 2f       	mov	r20, r24
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	02 2e       	mov	r0, r18
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <DIO_VoidSetPinDir+0x1f4>
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	0a 94       	dec	r0
    33a2:	e2 f7       	brpl	.-8      	; 0x339c <DIO_VoidSetPinDir+0x1f0>
    33a4:	80 95       	com	r24
    33a6:	84 23       	and	r24, r20
    33a8:	8c 93       	st	X, r24
			}
	     }
	}
}
    33aa:	27 96       	adiw	r28, 0x07	; 7
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <DIO_VoidSetPinValue>:
# Argument      : U8 Local_PortName , U8 Local_PinNumber , U8 Local_Value	 #
# Return        : Void                                                		 #
# Description   : this function select O/P A specific Pin HIGH OR LOW 		 #
##############################################################################*/
void DIO_VoidSetPinValue(U8 Local_PortName , U8 Local_PinNumber , U8 Local_Value)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	27 97       	sbiw	r28, 0x07	; 7
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	6a 83       	std	Y+2, r22	; 0x02
    33d4:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= PORT_D && Local_PinNumber <= PIN_D7)
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	84 30       	cpi	r24, 0x04	; 4
    33da:	08 f0       	brcs	.+2      	; 0x33de <DIO_VoidSetPinValue+0x22>
    33dc:	ee c0       	rjmp	.+476    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	88 30       	cpi	r24, 0x08	; 8
    33e2:	08 f0       	brcs	.+2      	; 0x33e6 <DIO_VoidSetPinValue+0x2a>
    33e4:	ea c0       	rjmp	.+468    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
	{
		if(Local_Value == DIO_HIGH)
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	09 f0       	breq	.+2      	; 0x33ee <DIO_VoidSetPinValue+0x32>
    33ec:	6f c0       	rjmp	.+222    	; 0x34cc <DIO_VoidSetPinValue+0x110>
		{
			switch(Local_PortName)
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	3f 83       	std	Y+7, r19	; 0x07
    33f6:	2e 83       	std	Y+6, r18	; 0x06
    33f8:	8e 81       	ldd	r24, Y+6	; 0x06
    33fa:	9f 81       	ldd	r25, Y+7	; 0x07
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	91 05       	cpc	r25, r1
    3400:	49 f1       	breq	.+82     	; 0x3454 <DIO_VoidSetPinValue+0x98>
    3402:	2e 81       	ldd	r18, Y+6	; 0x06
    3404:	3f 81       	ldd	r19, Y+7	; 0x07
    3406:	22 30       	cpi	r18, 0x02	; 2
    3408:	31 05       	cpc	r19, r1
    340a:	2c f4       	brge	.+10     	; 0x3416 <DIO_VoidSetPinValue+0x5a>
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	9f 81       	ldd	r25, Y+7	; 0x07
    3410:	00 97       	sbiw	r24, 0x00	; 0
    3412:	61 f0       	breq	.+24     	; 0x342c <DIO_VoidSetPinValue+0x70>
    3414:	d2 c0       	rjmp	.+420    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
    3416:	2e 81       	ldd	r18, Y+6	; 0x06
    3418:	3f 81       	ldd	r19, Y+7	; 0x07
    341a:	22 30       	cpi	r18, 0x02	; 2
    341c:	31 05       	cpc	r19, r1
    341e:	71 f1       	breq	.+92     	; 0x347c <DIO_VoidSetPinValue+0xc0>
    3420:	8e 81       	ldd	r24, Y+6	; 0x06
    3422:	9f 81       	ldd	r25, Y+7	; 0x07
    3424:	83 30       	cpi	r24, 0x03	; 3
    3426:	91 05       	cpc	r25, r1
    3428:	e9 f1       	breq	.+122    	; 0x34a4 <DIO_VoidSetPinValue+0xe8>
    342a:	c7 c0       	rjmp	.+398    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			{
			case PORT_A : SET_BIT(PORTA_REG,Local_PinNumber);break;
    342c:	ab e3       	ldi	r26, 0x3B	; 59
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	eb e3       	ldi	r30, 0x3B	; 59
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	48 2f       	mov	r20, r24
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	02 2e       	mov	r0, r18
    3444:	02 c0       	rjmp	.+4      	; 0x344a <DIO_VoidSetPinValue+0x8e>
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	0a 94       	dec	r0
    344c:	e2 f7       	brpl	.-8      	; 0x3446 <DIO_VoidSetPinValue+0x8a>
    344e:	84 2b       	or	r24, r20
    3450:	8c 93       	st	X, r24
    3452:	b3 c0       	rjmp	.+358    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			case PORT_B : SET_BIT(PORTB_REG,Local_PinNumber);break;
    3454:	a8 e3       	ldi	r26, 0x38	; 56
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e8 e3       	ldi	r30, 0x38	; 56
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	48 2f       	mov	r20, r24
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	02 2e       	mov	r0, r18
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <DIO_VoidSetPinValue+0xb6>
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	0a 94       	dec	r0
    3474:	e2 f7       	brpl	.-8      	; 0x346e <DIO_VoidSetPinValue+0xb2>
    3476:	84 2b       	or	r24, r20
    3478:	8c 93       	st	X, r24
    347a:	9f c0       	rjmp	.+318    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			case PORT_C : SET_BIT(PORTC_REG,Local_PinNumber);break;
    347c:	a5 e3       	ldi	r26, 0x35	; 53
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	e5 e3       	ldi	r30, 0x35	; 53
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	48 2f       	mov	r20, r24
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	02 2e       	mov	r0, r18
    3494:	02 c0       	rjmp	.+4      	; 0x349a <DIO_VoidSetPinValue+0xde>
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	0a 94       	dec	r0
    349c:	e2 f7       	brpl	.-8      	; 0x3496 <DIO_VoidSetPinValue+0xda>
    349e:	84 2b       	or	r24, r20
    34a0:	8c 93       	st	X, r24
    34a2:	8b c0       	rjmp	.+278    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			case PORT_D : SET_BIT(PORTD_REG,Local_PinNumber);break;
    34a4:	a2 e3       	ldi	r26, 0x32	; 50
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e2 e3       	ldi	r30, 0x32	; 50
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	48 2f       	mov	r20, r24
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	28 2f       	mov	r18, r24
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	02 2e       	mov	r0, r18
    34bc:	02 c0       	rjmp	.+4      	; 0x34c2 <DIO_VoidSetPinValue+0x106>
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	0a 94       	dec	r0
    34c4:	e2 f7       	brpl	.-8      	; 0x34be <DIO_VoidSetPinValue+0x102>
    34c6:	84 2b       	or	r24, r20
    34c8:	8c 93       	st	X, r24
    34ca:	77 c0       	rjmp	.+238    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			}
		}
		else if(Local_Value == DIO_LOW)
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	88 23       	and	r24, r24
    34d0:	09 f0       	breq	.+2      	; 0x34d4 <DIO_VoidSetPinValue+0x118>
    34d2:	73 c0       	rjmp	.+230    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
		{
			switch(Local_PortName)
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	3d 83       	std	Y+5, r19	; 0x05
    34dc:	2c 83       	std	Y+4, r18	; 0x04
    34de:	8c 81       	ldd	r24, Y+4	; 0x04
    34e0:	9d 81       	ldd	r25, Y+5	; 0x05
    34e2:	81 30       	cpi	r24, 0x01	; 1
    34e4:	91 05       	cpc	r25, r1
    34e6:	59 f1       	breq	.+86     	; 0x353e <DIO_VoidSetPinValue+0x182>
    34e8:	2c 81       	ldd	r18, Y+4	; 0x04
    34ea:	3d 81       	ldd	r19, Y+5	; 0x05
    34ec:	22 30       	cpi	r18, 0x02	; 2
    34ee:	31 05       	cpc	r19, r1
    34f0:	2c f4       	brge	.+10     	; 0x34fc <DIO_VoidSetPinValue+0x140>
    34f2:	8c 81       	ldd	r24, Y+4	; 0x04
    34f4:	9d 81       	ldd	r25, Y+5	; 0x05
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	69 f0       	breq	.+26     	; 0x3514 <DIO_VoidSetPinValue+0x158>
    34fa:	5f c0       	rjmp	.+190    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
    34fc:	2c 81       	ldd	r18, Y+4	; 0x04
    34fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3500:	22 30       	cpi	r18, 0x02	; 2
    3502:	31 05       	cpc	r19, r1
    3504:	89 f1       	breq	.+98     	; 0x3568 <DIO_VoidSetPinValue+0x1ac>
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	9d 81       	ldd	r25, Y+5	; 0x05
    350a:	83 30       	cpi	r24, 0x03	; 3
    350c:	91 05       	cpc	r25, r1
    350e:	09 f4       	brne	.+2      	; 0x3512 <DIO_VoidSetPinValue+0x156>
    3510:	40 c0       	rjmp	.+128    	; 0x3592 <DIO_VoidSetPinValue+0x1d6>
    3512:	53 c0       	rjmp	.+166    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			{
			case PORT_A : CLEAR_BIT(PORTA_REG,Local_PinNumber);break;
    3514:	ab e3       	ldi	r26, 0x3B	; 59
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	eb e3       	ldi	r30, 0x3B	; 59
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	48 2f       	mov	r20, r24
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	02 2e       	mov	r0, r18
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <DIO_VoidSetPinValue+0x176>
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	0a 94       	dec	r0
    3534:	e2 f7       	brpl	.-8      	; 0x352e <DIO_VoidSetPinValue+0x172>
    3536:	80 95       	com	r24
    3538:	84 23       	and	r24, r20
    353a:	8c 93       	st	X, r24
    353c:	3e c0       	rjmp	.+124    	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			case PORT_B : CLEAR_BIT(PORTB_REG,Local_PinNumber);break;
    353e:	a8 e3       	ldi	r26, 0x38	; 56
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	e8 e3       	ldi	r30, 0x38	; 56
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	48 2f       	mov	r20, r24
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	02 2e       	mov	r0, r18
    3556:	02 c0       	rjmp	.+4      	; 0x355c <DIO_VoidSetPinValue+0x1a0>
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	0a 94       	dec	r0
    355e:	e2 f7       	brpl	.-8      	; 0x3558 <DIO_VoidSetPinValue+0x19c>
    3560:	80 95       	com	r24
    3562:	84 23       	and	r24, r20
    3564:	8c 93       	st	X, r24
    3566:	29 c0       	rjmp	.+82     	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			case PORT_C : CLEAR_BIT(PORTC_REG,Local_PinNumber);break;
    3568:	a5 e3       	ldi	r26, 0x35	; 53
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	e5 e3       	ldi	r30, 0x35	; 53
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	48 2f       	mov	r20, r24
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	28 2f       	mov	r18, r24
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	02 2e       	mov	r0, r18
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <DIO_VoidSetPinValue+0x1ca>
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	0a 94       	dec	r0
    3588:	e2 f7       	brpl	.-8      	; 0x3582 <DIO_VoidSetPinValue+0x1c6>
    358a:	80 95       	com	r24
    358c:	84 23       	and	r24, r20
    358e:	8c 93       	st	X, r24
    3590:	14 c0       	rjmp	.+40     	; 0x35ba <DIO_VoidSetPinValue+0x1fe>
			case PORT_D : CLEAR_BIT(PORTD_REG,Local_PinNumber);break;
    3592:	a2 e3       	ldi	r26, 0x32	; 50
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e2 e3       	ldi	r30, 0x32	; 50
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	48 2f       	mov	r20, r24
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	02 2e       	mov	r0, r18
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <DIO_VoidSetPinValue+0x1f4>
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	0a 94       	dec	r0
    35b2:	e2 f7       	brpl	.-8      	; 0x35ac <DIO_VoidSetPinValue+0x1f0>
    35b4:	80 95       	com	r24
    35b6:	84 23       	and	r24, r20
    35b8:	8c 93       	st	X, r24
			}
		}
	}

}
    35ba:	27 96       	adiw	r28, 0x07	; 7
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	cf 91       	pop	r28
    35c8:	df 91       	pop	r29
    35ca:	08 95       	ret

000035cc <DIO_U8GetPinValue>:
# Argument      : U8 Local_PortName , U8 Local_PinNumber 					 #
# Return        : U8                                                		 #
# Description   : this function Read  A specific Pin Value			 		 #
##############################################################################*/
U8 DIO_U8GetPinValue(U8 Local_PortName , U8 Local_PinNumber)
{
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	00 d0       	rcall	.+0      	; 0x35d2 <DIO_U8GetPinValue+0x6>
    35d2:	00 d0       	rcall	.+0      	; 0x35d4 <DIO_U8GetPinValue+0x8>
    35d4:	0f 92       	push	r0
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	8a 83       	std	Y+2, r24	; 0x02
    35dc:	6b 83       	std	Y+3, r22	; 0x03
	U8 Local_PinValue ;
	if(Local_PortName<PORT_D && Local_PinNumber <= PIN_D7)
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	83 30       	cpi	r24, 0x03	; 3
    35e2:	08 f0       	brcs	.+2      	; 0x35e6 <DIO_U8GetPinValue+0x1a>
    35e4:	6b c0       	rjmp	.+214    	; 0x36bc <DIO_U8GetPinValue+0xf0>
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	88 30       	cpi	r24, 0x08	; 8
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <DIO_U8GetPinValue+0x22>
    35ec:	67 c0       	rjmp	.+206    	; 0x36bc <DIO_U8GetPinValue+0xf0>
	{
		switch(Local_PortName)
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	3d 83       	std	Y+5, r19	; 0x05
    35f6:	2c 83       	std	Y+4, r18	; 0x04
    35f8:	4c 81       	ldd	r20, Y+4	; 0x04
    35fa:	5d 81       	ldd	r21, Y+5	; 0x05
    35fc:	41 30       	cpi	r20, 0x01	; 1
    35fe:	51 05       	cpc	r21, r1
    3600:	41 f1       	breq	.+80     	; 0x3652 <DIO_U8GetPinValue+0x86>
    3602:	8c 81       	ldd	r24, Y+4	; 0x04
    3604:	9d 81       	ldd	r25, Y+5	; 0x05
    3606:	82 30       	cpi	r24, 0x02	; 2
    3608:	91 05       	cpc	r25, r1
    360a:	34 f4       	brge	.+12     	; 0x3618 <DIO_U8GetPinValue+0x4c>
    360c:	2c 81       	ldd	r18, Y+4	; 0x04
    360e:	3d 81       	ldd	r19, Y+5	; 0x05
    3610:	21 15       	cp	r18, r1
    3612:	31 05       	cpc	r19, r1
    3614:	61 f0       	breq	.+24     	; 0x362e <DIO_U8GetPinValue+0x62>
    3616:	52 c0       	rjmp	.+164    	; 0x36bc <DIO_U8GetPinValue+0xf0>
    3618:	4c 81       	ldd	r20, Y+4	; 0x04
    361a:	5d 81       	ldd	r21, Y+5	; 0x05
    361c:	42 30       	cpi	r20, 0x02	; 2
    361e:	51 05       	cpc	r21, r1
    3620:	51 f1       	breq	.+84     	; 0x3676 <DIO_U8GetPinValue+0xaa>
    3622:	8c 81       	ldd	r24, Y+4	; 0x04
    3624:	9d 81       	ldd	r25, Y+5	; 0x05
    3626:	83 30       	cpi	r24, 0x03	; 3
    3628:	91 05       	cpc	r25, r1
    362a:	b9 f1       	breq	.+110    	; 0x369a <DIO_U8GetPinValue+0xce>
    362c:	47 c0       	rjmp	.+142    	; 0x36bc <DIO_U8GetPinValue+0xf0>
		{
		case PORT_A : Local_PinValue = GET_BIT(PINA_REG,Local_PinNumber);break;
    362e:	e9 e3       	ldi	r30, 0x39	; 57
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	28 2f       	mov	r18, r24
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	88 2f       	mov	r24, r24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	a9 01       	movw	r20, r18
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <DIO_U8GetPinValue+0x7a>
    3642:	55 95       	asr	r21
    3644:	47 95       	ror	r20
    3646:	8a 95       	dec	r24
    3648:	e2 f7       	brpl	.-8      	; 0x3642 <DIO_U8GetPinValue+0x76>
    364a:	ca 01       	movw	r24, r20
    364c:	81 70       	andi	r24, 0x01	; 1
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	35 c0       	rjmp	.+106    	; 0x36bc <DIO_U8GetPinValue+0xf0>
		case PORT_B : Local_PinValue = GET_BIT(PINB_REG,Local_PinNumber);break;
    3652:	e6 e3       	ldi	r30, 0x36	; 54
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	a9 01       	movw	r20, r18
    3664:	02 c0       	rjmp	.+4      	; 0x366a <DIO_U8GetPinValue+0x9e>
    3666:	55 95       	asr	r21
    3668:	47 95       	ror	r20
    366a:	8a 95       	dec	r24
    366c:	e2 f7       	brpl	.-8      	; 0x3666 <DIO_U8GetPinValue+0x9a>
    366e:	ca 01       	movw	r24, r20
    3670:	81 70       	andi	r24, 0x01	; 1
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	23 c0       	rjmp	.+70     	; 0x36bc <DIO_U8GetPinValue+0xf0>
		case PORT_C : Local_PinValue = GET_BIT(PINC_REG,Local_PinNumber);break;
    3676:	e3 e3       	ldi	r30, 0x33	; 51
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	28 2f       	mov	r18, r24
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	88 2f       	mov	r24, r24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	a9 01       	movw	r20, r18
    3688:	02 c0       	rjmp	.+4      	; 0x368e <DIO_U8GetPinValue+0xc2>
    368a:	55 95       	asr	r21
    368c:	47 95       	ror	r20
    368e:	8a 95       	dec	r24
    3690:	e2 f7       	brpl	.-8      	; 0x368a <DIO_U8GetPinValue+0xbe>
    3692:	ca 01       	movw	r24, r20
    3694:	81 70       	andi	r24, 0x01	; 1
    3696:	89 83       	std	Y+1, r24	; 0x01
    3698:	11 c0       	rjmp	.+34     	; 0x36bc <DIO_U8GetPinValue+0xf0>
		case PORT_D : Local_PinValue = GET_BIT(PIND_REG,Local_PinNumber);break;
    369a:	e0 e3       	ldi	r30, 0x30	; 48
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	28 2f       	mov	r18, r24
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	88 2f       	mov	r24, r24
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	a9 01       	movw	r20, r18
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <DIO_U8GetPinValue+0xe6>
    36ae:	55 95       	asr	r21
    36b0:	47 95       	ror	r20
    36b2:	8a 95       	dec	r24
    36b4:	e2 f7       	brpl	.-8      	; 0x36ae <DIO_U8GetPinValue+0xe2>
    36b6:	ca 01       	movw	r24, r20
    36b8:	81 70       	andi	r24, 0x01	; 1
    36ba:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_PinValue;
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <DIO_voidPullupPinControl>:
 # Return        : void                                                    	 #
 # Description   : this function control about Internal Pull up Resistance\  #
 #              	   for a specific of pin                                 #
 ############################################################################*/
void DIO_voidPullupPinControl(U8 Local_PortName,U8 Local_PinNumber,U8 Local_PullupState)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <DIO_voidPullupPinControl+0x6>
    36d4:	0f 92       	push	r0
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	6a 83       	std	Y+2, r22	; 0x02
    36de:	4b 83       	std	Y+3, r20	; 0x03
	DIO_VoidSetPinDir(Local_PortName,Local_PinNumber,DIO_INPUT);
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	6a 81       	ldd	r22, Y+2	; 0x02
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	0e 94 d6 18 	call	0x31ac	; 0x31ac <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Local_PortName,Local_PinNumber,Local_PullupState);
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	6a 81       	ldd	r22, Y+2	; 0x02
    36ee:	4b 81       	ldd	r20, Y+3	; 0x03
    36f0:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
}
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <DIO_VoidSetPortDir>:
# Argument      : U8 Local_PortName , U8 Local_Direction					 #
# Return        : Void                                                		 #
# Description   : this function Select The Port the INPUT OR OUTPUT 		 #
##############################################################################*/
void DIO_VoidSetPortDir(U8 Local_PortName , U8 Local_Direction)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <DIO_VoidSetPortDir+0x6>
    3706:	00 d0       	rcall	.+0      	; 0x3708 <DIO_VoidSetPortDir+0x8>
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName<= PORT_D)
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	84 30       	cpi	r24, 0x04	; 4
    3714:	90 f5       	brcc	.+100    	; 0x377a <DIO_VoidSetPortDir+0x7a>
	{
		switch(Local_PortName)
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	28 2f       	mov	r18, r24
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	3c 83       	std	Y+4, r19	; 0x04
    371e:	2b 83       	std	Y+3, r18	; 0x03
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	9c 81       	ldd	r25, Y+4	; 0x04
    3724:	81 30       	cpi	r24, 0x01	; 1
    3726:	91 05       	cpc	r25, r1
    3728:	d1 f0       	breq	.+52     	; 0x375e <DIO_VoidSetPortDir+0x5e>
    372a:	2b 81       	ldd	r18, Y+3	; 0x03
    372c:	3c 81       	ldd	r19, Y+4	; 0x04
    372e:	22 30       	cpi	r18, 0x02	; 2
    3730:	31 05       	cpc	r19, r1
    3732:	2c f4       	brge	.+10     	; 0x373e <DIO_VoidSetPortDir+0x3e>
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	9c 81       	ldd	r25, Y+4	; 0x04
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	61 f0       	breq	.+24     	; 0x3754 <DIO_VoidSetPortDir+0x54>
    373c:	1e c0       	rjmp	.+60     	; 0x377a <DIO_VoidSetPortDir+0x7a>
    373e:	2b 81       	ldd	r18, Y+3	; 0x03
    3740:	3c 81       	ldd	r19, Y+4	; 0x04
    3742:	22 30       	cpi	r18, 0x02	; 2
    3744:	31 05       	cpc	r19, r1
    3746:	81 f0       	breq	.+32     	; 0x3768 <DIO_VoidSetPortDir+0x68>
    3748:	8b 81       	ldd	r24, Y+3	; 0x03
    374a:	9c 81       	ldd	r25, Y+4	; 0x04
    374c:	83 30       	cpi	r24, 0x03	; 3
    374e:	91 05       	cpc	r25, r1
    3750:	81 f0       	breq	.+32     	; 0x3772 <DIO_VoidSetPortDir+0x72>
    3752:	13 c0       	rjmp	.+38     	; 0x377a <DIO_VoidSetPortDir+0x7a>
		{
		case PORT_A : DDRA_REG = Local_Direction ; break;
    3754:	ea e3       	ldi	r30, 0x3A	; 58
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	80 83       	st	Z, r24
    375c:	0e c0       	rjmp	.+28     	; 0x377a <DIO_VoidSetPortDir+0x7a>
		case PORT_B : DDRB_REG = Local_Direction ; break;
    375e:	e7 e3       	ldi	r30, 0x37	; 55
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	80 83       	st	Z, r24
    3766:	09 c0       	rjmp	.+18     	; 0x377a <DIO_VoidSetPortDir+0x7a>
		case PORT_C : DDRC_REG = Local_Direction ; break;
    3768:	e4 e3       	ldi	r30, 0x34	; 52
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	80 83       	st	Z, r24
    3770:	04 c0       	rjmp	.+8      	; 0x377a <DIO_VoidSetPortDir+0x7a>
		case PORT_D : DDRD_REG = Local_Direction ; break;
    3772:	e1 e3       	ldi	r30, 0x31	; 49
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	80 83       	st	Z, r24
		}
	}

}
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	08 95       	ret

00003788 <DIO_VoidSetPortValue>:
# Argument      : U8 Local_PortName , U8 Local_Value						 #
# Return        : Void                                                		 #
# Description   : this function Select The Port the HIGH OR LOW		 		 #
##############################################################################*/
void DIO_VoidSetPortValue(U8 Local_PortName , U8 Local_Value)
{
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	00 d0       	rcall	.+0      	; 0x378e <DIO_VoidSetPortValue+0x6>
    378e:	00 d0       	rcall	.+0      	; 0x3790 <DIO_VoidSetPortValue+0x8>
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName<= PORT_D)
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	84 30       	cpi	r24, 0x04	; 4
    379c:	90 f5       	brcc	.+100    	; 0x3802 <DIO_VoidSetPortValue+0x7a>
		{
			switch(Local_PortName)
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	28 2f       	mov	r18, r24
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	3c 83       	std	Y+4, r19	; 0x04
    37a6:	2b 83       	std	Y+3, r18	; 0x03
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	9c 81       	ldd	r25, Y+4	; 0x04
    37ac:	81 30       	cpi	r24, 0x01	; 1
    37ae:	91 05       	cpc	r25, r1
    37b0:	d1 f0       	breq	.+52     	; 0x37e6 <DIO_VoidSetPortValue+0x5e>
    37b2:	2b 81       	ldd	r18, Y+3	; 0x03
    37b4:	3c 81       	ldd	r19, Y+4	; 0x04
    37b6:	22 30       	cpi	r18, 0x02	; 2
    37b8:	31 05       	cpc	r19, r1
    37ba:	2c f4       	brge	.+10     	; 0x37c6 <DIO_VoidSetPortValue+0x3e>
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	9c 81       	ldd	r25, Y+4	; 0x04
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	61 f0       	breq	.+24     	; 0x37dc <DIO_VoidSetPortValue+0x54>
    37c4:	1e c0       	rjmp	.+60     	; 0x3802 <DIO_VoidSetPortValue+0x7a>
    37c6:	2b 81       	ldd	r18, Y+3	; 0x03
    37c8:	3c 81       	ldd	r19, Y+4	; 0x04
    37ca:	22 30       	cpi	r18, 0x02	; 2
    37cc:	31 05       	cpc	r19, r1
    37ce:	81 f0       	breq	.+32     	; 0x37f0 <DIO_VoidSetPortValue+0x68>
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	9c 81       	ldd	r25, Y+4	; 0x04
    37d4:	83 30       	cpi	r24, 0x03	; 3
    37d6:	91 05       	cpc	r25, r1
    37d8:	81 f0       	breq	.+32     	; 0x37fa <DIO_VoidSetPortValue+0x72>
    37da:	13 c0       	rjmp	.+38     	; 0x3802 <DIO_VoidSetPortValue+0x7a>
			{
			case PORT_A : PORTA_REG = Local_Value ; break;
    37dc:	eb e3       	ldi	r30, 0x3B	; 59
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	80 83       	st	Z, r24
    37e4:	0e c0       	rjmp	.+28     	; 0x3802 <DIO_VoidSetPortValue+0x7a>
			case PORT_B : PORTB_REG = Local_Value ; break;
    37e6:	e8 e3       	ldi	r30, 0x38	; 56
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	80 83       	st	Z, r24
    37ee:	09 c0       	rjmp	.+18     	; 0x3802 <DIO_VoidSetPortValue+0x7a>
			case PORT_C : PORTC_REG = Local_Value ; break;
    37f0:	e5 e3       	ldi	r30, 0x35	; 53
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	80 83       	st	Z, r24
    37f8:	04 c0       	rjmp	.+8      	; 0x3802 <DIO_VoidSetPortValue+0x7a>
			case PORT_D : PORTD_REG = Local_Value ; break;
    37fa:	e2 e3       	ldi	r30, 0x32	; 50
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3800:	80 83       	st	Z, r24
			}
		}

}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <DIO_U8GetPortValue>:
# Argument      : U8 Local_PortName 										 #
# Return        : U8                                                		 #
# Description   : this function Select The Port the INPUT OR OUTPUT 		 #
##############################################################################*/
U8 DIO_U8GetPortValue(U8 Local_PortName)
{
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	00 d0       	rcall	.+0      	; 0x3816 <DIO_U8GetPortValue+0x6>
    3816:	00 d0       	rcall	.+0      	; 0x3818 <DIO_U8GetPortValue+0x8>
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	8a 83       	std	Y+2, r24	; 0x02
	U8 Local_PortValue ;
	if(Local_PortName<= PORT_D)
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	84 30       	cpi	r24, 0x04	; 4
    3822:	90 f5       	brcc	.+100    	; 0x3888 <DIO_U8GetPortValue+0x78>
			{
				switch(Local_PortName)
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	28 2f       	mov	r18, r24
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	3c 83       	std	Y+4, r19	; 0x04
    382c:	2b 83       	std	Y+3, r18	; 0x03
    382e:	8b 81       	ldd	r24, Y+3	; 0x03
    3830:	9c 81       	ldd	r25, Y+4	; 0x04
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 05       	cpc	r25, r1
    3836:	d1 f0       	breq	.+52     	; 0x386c <DIO_U8GetPortValue+0x5c>
    3838:	2b 81       	ldd	r18, Y+3	; 0x03
    383a:	3c 81       	ldd	r19, Y+4	; 0x04
    383c:	22 30       	cpi	r18, 0x02	; 2
    383e:	31 05       	cpc	r19, r1
    3840:	2c f4       	brge	.+10     	; 0x384c <DIO_U8GetPortValue+0x3c>
    3842:	8b 81       	ldd	r24, Y+3	; 0x03
    3844:	9c 81       	ldd	r25, Y+4	; 0x04
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	61 f0       	breq	.+24     	; 0x3862 <DIO_U8GetPortValue+0x52>
    384a:	1e c0       	rjmp	.+60     	; 0x3888 <DIO_U8GetPortValue+0x78>
    384c:	2b 81       	ldd	r18, Y+3	; 0x03
    384e:	3c 81       	ldd	r19, Y+4	; 0x04
    3850:	22 30       	cpi	r18, 0x02	; 2
    3852:	31 05       	cpc	r19, r1
    3854:	81 f0       	breq	.+32     	; 0x3876 <DIO_U8GetPortValue+0x66>
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	9c 81       	ldd	r25, Y+4	; 0x04
    385a:	83 30       	cpi	r24, 0x03	; 3
    385c:	91 05       	cpc	r25, r1
    385e:	81 f0       	breq	.+32     	; 0x3880 <DIO_U8GetPortValue+0x70>
    3860:	13 c0       	rjmp	.+38     	; 0x3888 <DIO_U8GetPortValue+0x78>
				{
				case PORT_A :Local_PortValue = PINA_REG; break;
    3862:	e9 e3       	ldi	r30, 0x39	; 57
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 81       	ld	r24, Z
    3868:	89 83       	std	Y+1, r24	; 0x01
    386a:	0e c0       	rjmp	.+28     	; 0x3888 <DIO_U8GetPortValue+0x78>
				case PORT_B :Local_PortValue = PINB_REG ; break;
    386c:	e6 e3       	ldi	r30, 0x36	; 54
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	80 81       	ld	r24, Z
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	09 c0       	rjmp	.+18     	; 0x3888 <DIO_U8GetPortValue+0x78>
				case PORT_C :Local_PortValue = PINC_REG ; break;
    3876:	e3 e3       	ldi	r30, 0x33	; 51
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	89 83       	std	Y+1, r24	; 0x01
    387e:	04 c0       	rjmp	.+8      	; 0x3888 <DIO_U8GetPortValue+0x78>
				case PORT_D :Local_PortValue = PIND_REG ; break;
    3880:	e0 e3       	ldi	r30, 0x30	; 48
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	89 83       	std	Y+1, r24	; 0x01
				}
			}
return Local_PortValue;
    3888:	89 81       	ldd	r24, Y+1	; 0x01
}
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <ADC_init>:
//}



void ADC_init(void)
{
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0);
    38a0:	e7 e2       	ldi	r30, 0x27	; 39
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 e4       	ldi	r24, 0x40	; 64
    38a6:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);
    38a8:	e6 e2       	ldi	r30, 0x26	; 38
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	86 e8       	ldi	r24, 0x86	; 134
    38ae:	80 83       	st	Z, r24
}
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <ADC_Read>:

U16 ADC_Read(U8 Channel)
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	0f 92       	push	r0
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	89 83       	std	Y+1, r24	; 0x01
	DDRA&=~(1<<Channel);
    38c2:	aa e3       	ldi	r26, 0x3A	; 58
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	ea e3       	ldi	r30, 0x3A	; 58
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	48 2f       	mov	r20, r24
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	02 2e       	mov	r0, r18
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <ADC_Read+0x2a>
    38dc:	88 0f       	add	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	0a 94       	dec	r0
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <ADC_Read+0x26>
    38e4:	80 95       	com	r24
    38e6:	84 23       	and	r24, r20
    38e8:	8c 93       	st	X, r24
	Channel = Channel & 0x07; // Filtering Channel (3 bits)
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	87 70       	andi	r24, 0x07	; 7
    38ee:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &=0xE0;  // Clearing least 5 bits "0"
    38f0:	a7 e2       	ldi	r26, 0x27	; 39
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	e7 e2       	ldi	r30, 0x27	; 39
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	80 81       	ld	r24, Z
    38fa:	80 7e       	andi	r24, 0xE0	; 224
    38fc:	8c 93       	st	X, r24

	ADMUX |=Channel;
    38fe:	a7 e2       	ldi	r26, 0x27	; 39
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	e7 e2       	ldi	r30, 0x27	; 39
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	90 81       	ld	r25, Z
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	89 2b       	or	r24, r25
    390c:	8c 93       	st	X, r24

	ADCSRA |=(1<<ADSC);  // Start Conversion
    390e:	a6 e2       	ldi	r26, 0x26	; 38
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e6 e2       	ldi	r30, 0x26	; 38
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	80 64       	ori	r24, 0x40	; 64
    391a:	8c 93       	st	X, r24
	while( ADCSRA &(1<<ADSC)); // Waiting till Bit 0
    391c:	e6 e2       	ldi	r30, 0x26	; 38
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	88 2f       	mov	r24, r24
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	80 74       	andi	r24, 0x40	; 64
    3928:	90 70       	andi	r25, 0x00	; 0
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	b9 f7       	brne	.-18     	; 0x391c <ADC_Read+0x66>

	return ADC;
    392e:	e4 e2       	ldi	r30, 0x24	; 36
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	91 81       	ldd	r25, Z+1	; 0x01
}
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <Temp_VoidInit>:
#include "../../../MCAL/ADC/Header/ADC_interface.h"
#include "../Header/TEMP.h"


void Temp_VoidInit(void)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    3946:	0e 94 4c 1c 	call	0x3898	; 0x3898 <ADC_init>
}
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <Temp_voidGetTemperature>:

U16 Temp_voidGetTemperature(U8 TEMP_Channel)
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	27 97       	sbiw	r28, 0x07	; 7
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	8f 83       	std	Y+7, r24	; 0x07

  U16 local_DigitalReading;
  U16 local_AnalogReading;
  U16 Temperature ;
  local_DigitalReading= ADC_Read(TEMP_Channel);
    3966:	8f 81       	ldd	r24, Y+7	; 0x07
    3968:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <ADC_Read>
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	8d 83       	std	Y+5, r24	; 0x05
  local_AnalogReading = ((U32) local_DigitalReading * 5000UL)/1024;
    3970:	8d 81       	ldd	r24, Y+5	; 0x05
    3972:	9e 81       	ldd	r25, Y+6	; 0x06
    3974:	cc 01       	movw	r24, r24
    3976:	a0 e0       	ldi	r26, 0x00	; 0
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	28 e8       	ldi	r18, 0x88	; 136
    397c:	33 e1       	ldi	r19, 0x13	; 19
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	50 e0       	ldi	r21, 0x00	; 0
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 4b 23 	call	0x4696	; 0x4696 <__mulsi3>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	07 2e       	mov	r0, r23
    3990:	7a e0       	ldi	r23, 0x0A	; 10
    3992:	b6 95       	lsr	r27
    3994:	a7 95       	ror	r26
    3996:	97 95       	ror	r25
    3998:	87 95       	ror	r24
    399a:	7a 95       	dec	r23
    399c:	d1 f7       	brne	.-12     	; 0x3992 <Temp_voidGetTemperature+0x42>
    399e:	70 2d       	mov	r23, r0
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	8b 83       	std	Y+3, r24	; 0x03
  Temperature = local_AnalogReading / 10 ;
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	9c 81       	ldd	r25, Y+4	; 0x04
    39a8:	2a e0       	ldi	r18, 0x0A	; 10
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	b9 01       	movw	r22, r18
    39ae:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <__udivmodhi4>
    39b2:	cb 01       	movw	r24, r22
    39b4:	9a 83       	std	Y+2, r25	; 0x02
    39b6:	89 83       	std	Y+1, r24	; 0x01
  return Temperature ;
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    39bc:	27 96       	adiw	r28, 0x07	; 7
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	cf 91       	pop	r28
    39ca:	df 91       	pop	r29
    39cc:	08 95       	ret

000039ce <LCD_VoidSendCommand>:
# Argument      : U8 Local_Command											 #
# Return        : Void                                                		 #
# Description   : this function Will Send The Command To LCD		 		 #
##############################################################################*/
void LCD_VoidSendCommand(U8 Local_Command)
{
    39ce:	df 93       	push	r29
    39d0:	cf 93       	push	r28
    39d2:	0f 92       	push	r0
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	89 83       	std	Y+1, r24	; 0x01
	/*Select The RS Pin is Low TO Send Command*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinRS,LCD_PinLOW);
    39da:	82 e0       	ldi	r24, 0x02	; 2
    39dc:	65 e0       	ldi	r22, 0x05	; 5
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
	/*Select The RW Pin is LOW Because we Will Write*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinRW,LCD_PinLOW);
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	66 e0       	ldi	r22, 0x06	; 6
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
	/*SET THE E Pin*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinE,LCD_PinHIGH);
    39ee:	82 e0       	ldi	r24, 0x02	; 2
    39f0:	67 e0       	ldi	r22, 0x07	; 7
    39f2:	41 e0       	ldi	r20, 0x01	; 1
    39f4:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
	/*Send Command*/
	DIO_VoidSetPortValue(LCD_PortData,Local_Command);
    39f8:	83 e0       	ldi	r24, 0x03	; 3
    39fa:	69 81       	ldd	r22, Y+1	; 0x01
    39fc:	0e 94 c4 1b 	call	0x3788	; 0x3788 <DIO_VoidSetPortValue>
	/*Clear The E Pin*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinE,LCD_PinLOW);
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	67 e0       	ldi	r22, 0x07	; 7
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
}
    3a0a:	0f 90       	pop	r0
    3a0c:	cf 91       	pop	r28
    3a0e:	df 91       	pop	r29
    3a10:	08 95       	ret

00003a12 <LCD_VoidSendChar>:
# Argument      : U8 Local_Char												 #
# Return        : Void                                                		 #
# Description   : this function Will Display The Char on LCD			     #
##############################################################################*/
void LCD_VoidSendChar(U8 Local_Char)
{
    3a12:	df 93       	push	r29
    3a14:	cf 93       	push	r28
    3a16:	0f 92       	push	r0
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
    3a1c:	89 83       	std	Y+1, r24	; 0x01
	/*Select The RS Pin is Low TO Send Command*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinRS,LCD_PinHIGH);
    3a1e:	82 e0       	ldi	r24, 0x02	; 2
    3a20:	65 e0       	ldi	r22, 0x05	; 5
    3a22:	41 e0       	ldi	r20, 0x01	; 1
    3a24:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
	/*Select The RW Pin is LOW Because we Will Write*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinRW,LCD_PinLOW);
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	66 e0       	ldi	r22, 0x06	; 6
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
	/*SET THE E Pin*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinE,LCD_PinHIGH);
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	67 e0       	ldi	r22, 0x07	; 7
    3a36:	41 e0       	ldi	r20, 0x01	; 1
    3a38:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
	/*Send Command*/
	DIO_VoidSetPortValue(LCD_PortData,Local_Char);
    3a3c:	83 e0       	ldi	r24, 0x03	; 3
    3a3e:	69 81       	ldd	r22, Y+1	; 0x01
    3a40:	0e 94 c4 1b 	call	0x3788	; 0x3788 <DIO_VoidSetPortValue>
	/*Clear The E Pin*/
	DIO_VoidSetPinValue(LCD_PortControl,LCD_PinE,LCD_PinLOW);
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	67 e0       	ldi	r22, 0x07	; 7
    3a48:	40 e0       	ldi	r20, 0x00	; 0
    3a4a:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
}
    3a4e:	0f 90       	pop	r0
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <LCD_VoidInit>:
# Argument      : void																				     #
# Return        : Void                                                									 #
# Description   : this function Make Some Init To the LCD Worked 	 									 #
##########################################################################################################*/
void LCD_VoidInit(void)
{
    3a56:	0f 93       	push	r16
    3a58:	1f 93       	push	r17
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	c2 56       	subi	r28, 0x62	; 98
    3a64:	d0 40       	sbci	r29, 0x00	; 0
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
	/*Will Select The PORT DATA AND Pin In PORT CONTROL IS OUTPUT*/
	DIO_VoidSetPortDir(LCD_PortData,LCD_PORTMAXVALUE);
    3a70:	83 e0       	ldi	r24, 0x03	; 3
    3a72:	6f ef       	ldi	r22, 0xFF	; 255
    3a74:	0e 94 80 1b 	call	0x3700	; 0x3700 <DIO_VoidSetPortDir>
	DIO_VoidSetPinDir(LCD_PortControl,LCD_PinE,LCD_PinOUTPUT);
    3a78:	82 e0       	ldi	r24, 0x02	; 2
    3a7a:	67 e0       	ldi	r22, 0x07	; 7
    3a7c:	41 e0       	ldi	r20, 0x01	; 1
    3a7e:	0e 94 d6 18 	call	0x31ac	; 0x31ac <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_PortControl,LCD_PinRW,LCD_PinOUTPUT);
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	66 e0       	ldi	r22, 0x06	; 6
    3a86:	41 e0       	ldi	r20, 0x01	; 1
    3a88:	0e 94 d6 18 	call	0x31ac	; 0x31ac <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_PortControl,LCD_PinRS,LCD_PinOUTPUT);
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	65 e0       	ldi	r22, 0x05	; 5
    3a90:	41 e0       	ldi	r20, 0x01	; 1
    3a92:	0e 94 d6 18 	call	0x31ac	; 0x31ac <DIO_VoidSetPinDir>
    3a96:	fe 01       	movw	r30, r28
    3a98:	e1 5a       	subi	r30, 0xA1	; 161
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	a0 ef       	ldi	r26, 0xF0	; 240
    3aa2:	b1 e4       	ldi	r27, 0x41	; 65
    3aa4:	80 83       	st	Z, r24
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	a2 83       	std	Z+2, r26	; 0x02
    3aaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aac:	8e 01       	movw	r16, r28
    3aae:	05 5a       	subi	r16, 0xA5	; 165
    3ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	e1 5a       	subi	r30, 0xA1	; 161
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	60 81       	ld	r22, Z
    3aba:	71 81       	ldd	r23, Z+1	; 0x01
    3abc:	82 81       	ldd	r24, Z+2	; 0x02
    3abe:	93 81       	ldd	r25, Z+3	; 0x03
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	4a ef       	ldi	r20, 0xFA	; 250
    3ac6:	54 e4       	ldi	r21, 0x44	; 68
    3ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	f8 01       	movw	r30, r16
    3ad2:	80 83       	st	Z, r24
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	a2 83       	std	Z+2, r26	; 0x02
    3ad8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e5 5a       	subi	r30, 0xA5	; 165
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e8       	ldi	r20, 0x80	; 128
    3aee:	5f e3       	ldi	r21, 0x3F	; 63
    3af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3af4:	88 23       	and	r24, r24
    3af6:	44 f4       	brge	.+16     	; 0x3b08 <LCD_VoidInit+0xb2>
		__ticks = 1;
    3af8:	fe 01       	movw	r30, r28
    3afa:	e7 5a       	subi	r30, 0xA7	; 167
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	91 83       	std	Z+1, r25	; 0x01
    3b04:	80 83       	st	Z, r24
    3b06:	64 c0       	rjmp	.+200    	; 0x3bd0 <LCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e5 5a       	subi	r30, 0xA5	; 165
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	82 81       	ldd	r24, Z+2	; 0x02
    3b14:	93 81       	ldd	r25, Z+3	; 0x03
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	3f ef       	ldi	r19, 0xFF	; 255
    3b1a:	4f e7       	ldi	r20, 0x7F	; 127
    3b1c:	57 e4       	ldi	r21, 0x47	; 71
    3b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b22:	18 16       	cp	r1, r24
    3b24:	0c f0       	brlt	.+2      	; 0x3b28 <LCD_VoidInit+0xd2>
    3b26:	43 c0       	rjmp	.+134    	; 0x3bae <LCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e1 5a       	subi	r30, 0xA1	; 161
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e2       	ldi	r20, 0x20	; 32
    3b3c:	51 e4       	ldi	r21, 0x41	; 65
    3b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	8e 01       	movw	r16, r28
    3b48:	07 5a       	subi	r16, 0xA7	; 167
    3b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	f8 01       	movw	r30, r16
    3b5a:	91 83       	std	Z+1, r25	; 0x01
    3b5c:	80 83       	st	Z, r24
    3b5e:	1f c0       	rjmp	.+62     	; 0x3b9e <LCD_VoidInit+0x148>
    3b60:	fe 01       	movw	r30, r28
    3b62:	e9 5a       	subi	r30, 0xA9	; 169
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	88 ec       	ldi	r24, 0xC8	; 200
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b6e:	fe 01       	movw	r30, r28
    3b70:	e9 5a       	subi	r30, 0xA9	; 169
    3b72:	ff 4f       	sbci	r31, 0xFF	; 255
    3b74:	80 81       	ld	r24, Z
    3b76:	91 81       	ldd	r25, Z+1	; 0x01
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	f1 f7       	brne	.-4      	; 0x3b78 <LCD_VoidInit+0x122>
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e9 5a       	subi	r30, 0xA9	; 169
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	91 83       	std	Z+1, r25	; 0x01
    3b84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b86:	de 01       	movw	r26, r28
    3b88:	a7 5a       	subi	r26, 0xA7	; 167
    3b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	e7 5a       	subi	r30, 0xA7	; 167
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	80 81       	ld	r24, Z
    3b94:	91 81       	ldd	r25, Z+1	; 0x01
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	11 96       	adiw	r26, 0x01	; 1
    3b9a:	9c 93       	st	X, r25
    3b9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	e7 5a       	subi	r30, 0xA7	; 167
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	d1 f6       	brne	.-76     	; 0x3b60 <LCD_VoidInit+0x10a>
    3bac:	27 c0       	rjmp	.+78     	; 0x3bfc <LCD_VoidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bae:	8e 01       	movw	r16, r28
    3bb0:	07 5a       	subi	r16, 0xA7	; 167
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e5 5a       	subi	r30, 0xA5	; 165
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	60 81       	ld	r22, Z
    3bbc:	71 81       	ldd	r23, Z+1	; 0x01
    3bbe:	82 81       	ldd	r24, Z+2	; 0x02
    3bc0:	93 81       	ldd	r25, Z+3	; 0x03
    3bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	f8 01       	movw	r30, r16
    3bcc:	91 83       	std	Z+1, r25	; 0x01
    3bce:	80 83       	st	Z, r24
    3bd0:	de 01       	movw	r26, r28
    3bd2:	ab 5a       	subi	r26, 0xAB	; 171
    3bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e7 5a       	subi	r30, 0xA7	; 167
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	8d 93       	st	X+, r24
    3be2:	9c 93       	st	X, r25
    3be4:	fe 01       	movw	r30, r28
    3be6:	eb 5a       	subi	r30, 0xAB	; 171
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	80 81       	ld	r24, Z
    3bec:	91 81       	ldd	r25, Z+1	; 0x01
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <LCD_VoidInit+0x198>
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	eb 5a       	subi	r30, 0xAB	; 171
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	80 83       	st	Z, r24

	/*Will Write The Routine Init From Datasheet*/
	_delay_ms(30);
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8);
    3bfc:	88 e3       	ldi	r24, 0x38	; 56
    3bfe:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
	LCD_VoidSendCommand(LCD_CursorON);
    3c02:	8e e0       	ldi	r24, 0x0E	; 14
    3c04:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
    3c08:	fe 01       	movw	r30, r28
    3c0a:	ef 5a       	subi	r30, 0xAF	; 175
    3c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	a0 e0       	ldi	r26, 0x00	; 0
    3c14:	b0 e4       	ldi	r27, 0x40	; 64
    3c16:	80 83       	st	Z, r24
    3c18:	91 83       	std	Z+1, r25	; 0x01
    3c1a:	a2 83       	std	Z+2, r26	; 0x02
    3c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c1e:	8e 01       	movw	r16, r28
    3c20:	03 5b       	subi	r16, 0xB3	; 179
    3c22:	1f 4f       	sbci	r17, 0xFF	; 255
    3c24:	fe 01       	movw	r30, r28
    3c26:	ef 5a       	subi	r30, 0xAF	; 175
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	4a ef       	ldi	r20, 0xFA	; 250
    3c38:	54 e4       	ldi	r21, 0x44	; 68
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	f8 01       	movw	r30, r16
    3c44:	80 83       	st	Z, r24
    3c46:	91 83       	std	Z+1, r25	; 0x01
    3c48:	a2 83       	std	Z+2, r26	; 0x02
    3c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	e3 5b       	subi	r30, 0xB3	; 179
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	60 81       	ld	r22, Z
    3c54:	71 81       	ldd	r23, Z+1	; 0x01
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	44 f4       	brge	.+16     	; 0x3c7a <LCD_VoidInit+0x224>
		__ticks = 1;
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e5 5b       	subi	r30, 0xB5	; 181
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	91 83       	std	Z+1, r25	; 0x01
    3c76:	80 83       	st	Z, r24
    3c78:	64 c0       	rjmp	.+200    	; 0x3d42 <LCD_VoidInit+0x2ec>
	else if (__tmp > 65535)
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	e3 5b       	subi	r30, 0xB3	; 179
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	60 81       	ld	r22, Z
    3c82:	71 81       	ldd	r23, Z+1	; 0x01
    3c84:	82 81       	ldd	r24, Z+2	; 0x02
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	3f ef       	ldi	r19, 0xFF	; 255
    3c8c:	4f e7       	ldi	r20, 0x7F	; 127
    3c8e:	57 e4       	ldi	r21, 0x47	; 71
    3c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c94:	18 16       	cp	r1, r24
    3c96:	0c f0       	brlt	.+2      	; 0x3c9a <LCD_VoidInit+0x244>
    3c98:	43 c0       	rjmp	.+134    	; 0x3d20 <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	ef 5a       	subi	r30, 0xAF	; 175
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	60 81       	ld	r22, Z
    3ca2:	71 81       	ldd	r23, Z+1	; 0x01
    3ca4:	82 81       	ldd	r24, Z+2	; 0x02
    3ca6:	93 81       	ldd	r25, Z+3	; 0x03
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e2       	ldi	r20, 0x20	; 32
    3cae:	51 e4       	ldi	r21, 0x41	; 65
    3cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	8e 01       	movw	r16, r28
    3cba:	05 5b       	subi	r16, 0xB5	; 181
    3cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbe:	bc 01       	movw	r22, r24
    3cc0:	cd 01       	movw	r24, r26
    3cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	f8 01       	movw	r30, r16
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	80 83       	st	Z, r24
    3cd0:	1f c0       	rjmp	.+62     	; 0x3d10 <LCD_VoidInit+0x2ba>
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e7 5b       	subi	r30, 0xB7	; 183
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	88 ec       	ldi	r24, 0xC8	; 200
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	91 83       	std	Z+1, r25	; 0x01
    3cde:	80 83       	st	Z, r24
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e7 5b       	subi	r30, 0xB7	; 183
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 81       	ld	r24, Z
    3ce8:	91 81       	ldd	r25, Z+1	; 0x01
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <LCD_VoidInit+0x294>
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e7 5b       	subi	r30, 0xB7	; 183
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf8:	de 01       	movw	r26, r28
    3cfa:	a5 5b       	subi	r26, 0xB5	; 181
    3cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e5 5b       	subi	r30, 0xB5	; 181
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	80 81       	ld	r24, Z
    3d06:	91 81       	ldd	r25, Z+1	; 0x01
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	11 96       	adiw	r26, 0x01	; 1
    3d0c:	9c 93       	st	X, r25
    3d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d10:	fe 01       	movw	r30, r28
    3d12:	e5 5b       	subi	r30, 0xB5	; 181
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 81       	ld	r24, Z
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	d1 f6       	brne	.-76     	; 0x3cd2 <LCD_VoidInit+0x27c>
    3d1e:	27 c0       	rjmp	.+78     	; 0x3d6e <LCD_VoidInit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d20:	8e 01       	movw	r16, r28
    3d22:	05 5b       	subi	r16, 0xB5	; 181
    3d24:	1f 4f       	sbci	r17, 0xFF	; 255
    3d26:	fe 01       	movw	r30, r28
    3d28:	e3 5b       	subi	r30, 0xB3	; 179
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	60 81       	ld	r22, Z
    3d2e:	71 81       	ldd	r23, Z+1	; 0x01
    3d30:	82 81       	ldd	r24, Z+2	; 0x02
    3d32:	93 81       	ldd	r25, Z+3	; 0x03
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
    3d42:	de 01       	movw	r26, r28
    3d44:	a9 5b       	subi	r26, 0xB9	; 185
    3d46:	bf 4f       	sbci	r27, 0xFF	; 255
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e5 5b       	subi	r30, 0xB5	; 181
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	80 81       	ld	r24, Z
    3d50:	91 81       	ldd	r25, Z+1	; 0x01
    3d52:	8d 93       	st	X+, r24
    3d54:	9c 93       	st	X, r25
    3d56:	fe 01       	movw	r30, r28
    3d58:	e9 5b       	subi	r30, 0xB9	; 185
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 81       	ld	r24, Z
    3d5e:	91 81       	ldd	r25, Z+1	; 0x01
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	f1 f7       	brne	.-4      	; 0x3d60 <LCD_VoidInit+0x30a>
    3d64:	fe 01       	movw	r30, r28
    3d66:	e9 5b       	subi	r30, 0xB9	; 185
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	91 83       	std	Z+1, r25	; 0x01
    3d6c:	80 83       	st	Z, r24
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ed 5b       	subi	r30, 0xBD	; 189
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	a0 e8       	ldi	r26, 0x80	; 128
    3d7a:	bf e3       	ldi	r27, 0x3F	; 63
    3d7c:	80 83       	st	Z, r24
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	a2 83       	std	Z+2, r26	; 0x02
    3d82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d84:	8e 01       	movw	r16, r28
    3d86:	01 5c       	subi	r16, 0xC1	; 193
    3d88:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	ed 5b       	subi	r30, 0xBD	; 189
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	60 81       	ld	r22, Z
    3d92:	71 81       	ldd	r23, Z+1	; 0x01
    3d94:	82 81       	ldd	r24, Z+2	; 0x02
    3d96:	93 81       	ldd	r25, Z+3	; 0x03
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	4a ef       	ldi	r20, 0xFA	; 250
    3d9e:	54 e4       	ldi	r21, 0x44	; 68
    3da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	f8 01       	movw	r30, r16
    3daa:	80 83       	st	Z, r24
    3dac:	91 83       	std	Z+1, r25	; 0x01
    3dae:	a2 83       	std	Z+2, r26	; 0x02
    3db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db2:	fe 01       	movw	r30, r28
    3db4:	ff 96       	adiw	r30, 0x3f	; 63
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e8       	ldi	r20, 0x80	; 128
    3dc4:	5f e3       	ldi	r21, 0x3F	; 63
    3dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dca:	88 23       	and	r24, r24
    3dcc:	2c f4       	brge	.+10     	; 0x3dd8 <LCD_VoidInit+0x382>
		__ticks = 1;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	9e af       	std	Y+62, r25	; 0x3e
    3dd4:	8d af       	std	Y+61, r24	; 0x3d
    3dd6:	46 c0       	rjmp	.+140    	; 0x3e64 <LCD_VoidInit+0x40e>
	else if (__tmp > 65535)
    3dd8:	fe 01       	movw	r30, r28
    3dda:	ff 96       	adiw	r30, 0x3f	; 63
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	3f ef       	ldi	r19, 0xFF	; 255
    3de8:	4f e7       	ldi	r20, 0x7F	; 127
    3dea:	57 e4       	ldi	r21, 0x47	; 71
    3dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3df0:	18 16       	cp	r1, r24
    3df2:	64 f5       	brge	.+88     	; 0x3e4c <LCD_VoidInit+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df4:	fe 01       	movw	r30, r28
    3df6:	ed 5b       	subi	r30, 0xBD	; 189
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e2       	ldi	r20, 0x20	; 32
    3e08:	51 e4       	ldi	r21, 0x41	; 65
    3e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	bc 01       	movw	r22, r24
    3e14:	cd 01       	movw	r24, r26
    3e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	9e af       	std	Y+62, r25	; 0x3e
    3e20:	8d af       	std	Y+61, r24	; 0x3d
    3e22:	0f c0       	rjmp	.+30     	; 0x3e42 <LCD_VoidInit+0x3ec>
    3e24:	88 ec       	ldi	r24, 0xC8	; 200
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	9c af       	std	Y+60, r25	; 0x3c
    3e2a:	8b af       	std	Y+59, r24	; 0x3b
    3e2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	f1 f7       	brne	.-4      	; 0x3e30 <LCD_VoidInit+0x3da>
    3e34:	9c af       	std	Y+60, r25	; 0x3c
    3e36:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e38:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	9e af       	std	Y+62, r25	; 0x3e
    3e40:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e42:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e44:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	69 f7       	brne	.-38     	; 0x3e24 <LCD_VoidInit+0x3ce>
    3e4a:	16 c0       	rjmp	.+44     	; 0x3e78 <LCD_VoidInit+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ff 96       	adiw	r30, 0x3f	; 63
    3e50:	60 81       	ld	r22, Z
    3e52:	71 81       	ldd	r23, Z+1	; 0x01
    3e54:	82 81       	ldd	r24, Z+2	; 0x02
    3e56:	93 81       	ldd	r25, Z+3	; 0x03
    3e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	9e af       	std	Y+62, r25	; 0x3e
    3e62:	8d af       	std	Y+61, r24	; 0x3d
    3e64:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e66:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e68:	9a af       	std	Y+58, r25	; 0x3a
    3e6a:	89 af       	std	Y+57, r24	; 0x39
    3e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    3e6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <LCD_VoidInit+0x41a>
    3e74:	9a af       	std	Y+58, r25	; 0x3a
    3e76:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	_delay_ms(1);
	LCD_VoidSendCommand(LCD_DisplayON);
    3e78:	8c e0       	ldi	r24, 0x0C	; 12
    3e7a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	a0 e0       	ldi	r26, 0x00	; 0
    3e84:	b0 e4       	ldi	r27, 0x40	; 64
    3e86:	8d ab       	std	Y+53, r24	; 0x35
    3e88:	9e ab       	std	Y+54, r25	; 0x36
    3e8a:	af ab       	std	Y+55, r26	; 0x37
    3e8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8e:	6d a9       	ldd	r22, Y+53	; 0x35
    3e90:	7e a9       	ldd	r23, Y+54	; 0x36
    3e92:	8f a9       	ldd	r24, Y+55	; 0x37
    3e94:	98 ad       	ldd	r25, Y+56	; 0x38
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4a ef       	ldi	r20, 0xFA	; 250
    3e9c:	54 e4       	ldi	r21, 0x44	; 68
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	89 ab       	std	Y+49, r24	; 0x31
    3ea8:	9a ab       	std	Y+50, r25	; 0x32
    3eaa:	ab ab       	std	Y+51, r26	; 0x33
    3eac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3eae:	69 a9       	ldd	r22, Y+49	; 0x31
    3eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    3eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    3eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e8       	ldi	r20, 0x80	; 128
    3ebc:	5f e3       	ldi	r21, 0x3F	; 63
    3ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ec2:	88 23       	and	r24, r24
    3ec4:	2c f4       	brge	.+10     	; 0x3ed0 <LCD_VoidInit+0x47a>
		__ticks = 1;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	98 ab       	std	Y+48, r25	; 0x30
    3ecc:	8f a7       	std	Y+47, r24	; 0x2f
    3ece:	3f c0       	rjmp	.+126    	; 0x3f4e <LCD_VoidInit+0x4f8>
	else if (__tmp > 65535)
    3ed0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ed2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ed4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ed6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	3f ef       	ldi	r19, 0xFF	; 255
    3edc:	4f e7       	ldi	r20, 0x7F	; 127
    3ede:	57 e4       	ldi	r21, 0x47	; 71
    3ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ee4:	18 16       	cp	r1, r24
    3ee6:	4c f5       	brge	.+82     	; 0x3f3a <LCD_VoidInit+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee8:	6d a9       	ldd	r22, Y+53	; 0x35
    3eea:	7e a9       	ldd	r23, Y+54	; 0x36
    3eec:	8f a9       	ldd	r24, Y+55	; 0x37
    3eee:	98 ad       	ldd	r25, Y+56	; 0x38
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e2       	ldi	r20, 0x20	; 32
    3ef6:	51 e4       	ldi	r21, 0x41	; 65
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	bc 01       	movw	r22, r24
    3f02:	cd 01       	movw	r24, r26
    3f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	98 ab       	std	Y+48, r25	; 0x30
    3f0e:	8f a7       	std	Y+47, r24	; 0x2f
    3f10:	0f c0       	rjmp	.+30     	; 0x3f30 <LCD_VoidInit+0x4da>
    3f12:	88 ec       	ldi	r24, 0xC8	; 200
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9e a7       	std	Y+46, r25	; 0x2e
    3f18:	8d a7       	std	Y+45, r24	; 0x2d
    3f1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <LCD_VoidInit+0x4c8>
    3f22:	9e a7       	std	Y+46, r25	; 0x2e
    3f24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f28:	98 a9       	ldd	r25, Y+48	; 0x30
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	98 ab       	std	Y+48, r25	; 0x30
    3f2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f32:	98 a9       	ldd	r25, Y+48	; 0x30
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	69 f7       	brne	.-38     	; 0x3f12 <LCD_VoidInit+0x4bc>
    3f38:	14 c0       	rjmp	.+40     	; 0x3f62 <LCD_VoidInit+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f40:	9c a9       	ldd	r25, Y+52	; 0x34
    3f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	98 ab       	std	Y+48, r25	; 0x30
    3f4c:	8f a7       	std	Y+47, r24	; 0x2f
    3f4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f50:	98 a9       	ldd	r25, Y+48	; 0x30
    3f52:	9c a7       	std	Y+44, r25	; 0x2c
    3f54:	8b a7       	std	Y+43, r24	; 0x2b
    3f56:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f58:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	f1 f7       	brne	.-4      	; 0x3f5a <LCD_VoidInit+0x504>
    3f5e:	9c a7       	std	Y+44, r25	; 0x2c
    3f60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_VoidSendCommand(LCD_ReturnHome);
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	a0 e7       	ldi	r26, 0x70	; 112
    3f6e:	b1 e4       	ldi	r27, 0x41	; 65
    3f70:	8f a3       	std	Y+39, r24	; 0x27
    3f72:	98 a7       	std	Y+40, r25	; 0x28
    3f74:	a9 a7       	std	Y+41, r26	; 0x29
    3f76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f78:	6f a1       	ldd	r22, Y+39	; 0x27
    3f7a:	78 a5       	ldd	r23, Y+40	; 0x28
    3f7c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	4a ef       	ldi	r20, 0xFA	; 250
    3f86:	54 e4       	ldi	r21, 0x44	; 68
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	8b a3       	std	Y+35, r24	; 0x23
    3f92:	9c a3       	std	Y+36, r25	; 0x24
    3f94:	ad a3       	std	Y+37, r26	; 0x25
    3f96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f98:	6b a1       	ldd	r22, Y+35	; 0x23
    3f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e8       	ldi	r20, 0x80	; 128
    3fa6:	5f e3       	ldi	r21, 0x3F	; 63
    3fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fac:	88 23       	and	r24, r24
    3fae:	2c f4       	brge	.+10     	; 0x3fba <LCD_VoidInit+0x564>
		__ticks = 1;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	9a a3       	std	Y+34, r25	; 0x22
    3fb6:	89 a3       	std	Y+33, r24	; 0x21
    3fb8:	3f c0       	rjmp	.+126    	; 0x4038 <LCD_VoidInit+0x5e2>
	else if (__tmp > 65535)
    3fba:	6b a1       	ldd	r22, Y+35	; 0x23
    3fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    3fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    3fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	3f ef       	ldi	r19, 0xFF	; 255
    3fc6:	4f e7       	ldi	r20, 0x7F	; 127
    3fc8:	57 e4       	ldi	r21, 0x47	; 71
    3fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fce:	18 16       	cp	r1, r24
    3fd0:	4c f5       	brge	.+82     	; 0x4024 <LCD_VoidInit+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    3fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    3fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    3fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e2       	ldi	r20, 0x20	; 32
    3fe0:	51 e4       	ldi	r21, 0x41	; 65
    3fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	9a a3       	std	Y+34, r25	; 0x22
    3ff8:	89 a3       	std	Y+33, r24	; 0x21
    3ffa:	0f c0       	rjmp	.+30     	; 0x401a <LCD_VoidInit+0x5c4>
    3ffc:	88 ec       	ldi	r24, 0xC8	; 200
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	98 a3       	std	Y+32, r25	; 0x20
    4002:	8f 8f       	std	Y+31, r24	; 0x1f
    4004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4006:	98 a1       	ldd	r25, Y+32	; 0x20
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <LCD_VoidInit+0x5b2>
    400c:	98 a3       	std	Y+32, r25	; 0x20
    400e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4010:	89 a1       	ldd	r24, Y+33	; 0x21
    4012:	9a a1       	ldd	r25, Y+34	; 0x22
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	9a a3       	std	Y+34, r25	; 0x22
    4018:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401a:	89 a1       	ldd	r24, Y+33	; 0x21
    401c:	9a a1       	ldd	r25, Y+34	; 0x22
    401e:	00 97       	sbiw	r24, 0x00	; 0
    4020:	69 f7       	brne	.-38     	; 0x3ffc <LCD_VoidInit+0x5a6>
    4022:	14 c0       	rjmp	.+40     	; 0x404c <LCD_VoidInit+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4024:	6b a1       	ldd	r22, Y+35	; 0x23
    4026:	7c a1       	ldd	r23, Y+36	; 0x24
    4028:	8d a1       	ldd	r24, Y+37	; 0x25
    402a:	9e a1       	ldd	r25, Y+38	; 0x26
    402c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	9a a3       	std	Y+34, r25	; 0x22
    4036:	89 a3       	std	Y+33, r24	; 0x21
    4038:	89 a1       	ldd	r24, Y+33	; 0x21
    403a:	9a a1       	ldd	r25, Y+34	; 0x22
    403c:	9e 8f       	std	Y+30, r25	; 0x1e
    403e:	8d 8f       	std	Y+29, r24	; 0x1d
    4040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <LCD_VoidInit+0x5ee>
    4048:	9e 8f       	std	Y+30, r25	; 0x1e
    404a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15);
	LCD_VoidSendCommand(LCD_ClearDisplay);
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	a0 e7       	ldi	r26, 0x70	; 112
    4058:	b1 e4       	ldi	r27, 0x41	; 65
    405a:	89 8f       	std	Y+25, r24	; 0x19
    405c:	9a 8f       	std	Y+26, r25	; 0x1a
    405e:	ab 8f       	std	Y+27, r26	; 0x1b
    4060:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4062:	69 8d       	ldd	r22, Y+25	; 0x19
    4064:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	4a ef       	ldi	r20, 0xFA	; 250
    4070:	54 e4       	ldi	r21, 0x44	; 68
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	8d 8b       	std	Y+21, r24	; 0x15
    407c:	9e 8b       	std	Y+22, r25	; 0x16
    407e:	af 8b       	std	Y+23, r26	; 0x17
    4080:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4082:	6d 89       	ldd	r22, Y+21	; 0x15
    4084:	7e 89       	ldd	r23, Y+22	; 0x16
    4086:	8f 89       	ldd	r24, Y+23	; 0x17
    4088:	98 8d       	ldd	r25, Y+24	; 0x18
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e8       	ldi	r20, 0x80	; 128
    4090:	5f e3       	ldi	r21, 0x3F	; 63
    4092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4096:	88 23       	and	r24, r24
    4098:	2c f4       	brge	.+10     	; 0x40a4 <LCD_VoidInit+0x64e>
		__ticks = 1;
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	9c 8b       	std	Y+20, r25	; 0x14
    40a0:	8b 8b       	std	Y+19, r24	; 0x13
    40a2:	3f c0       	rjmp	.+126    	; 0x4122 <LCD_VoidInit+0x6cc>
	else if (__tmp > 65535)
    40a4:	6d 89       	ldd	r22, Y+21	; 0x15
    40a6:	7e 89       	ldd	r23, Y+22	; 0x16
    40a8:	8f 89       	ldd	r24, Y+23	; 0x17
    40aa:	98 8d       	ldd	r25, Y+24	; 0x18
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	3f ef       	ldi	r19, 0xFF	; 255
    40b0:	4f e7       	ldi	r20, 0x7F	; 127
    40b2:	57 e4       	ldi	r21, 0x47	; 71
    40b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40b8:	18 16       	cp	r1, r24
    40ba:	4c f5       	brge	.+82     	; 0x410e <LCD_VoidInit+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40bc:	69 8d       	ldd	r22, Y+25	; 0x19
    40be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e2       	ldi	r20, 0x20	; 32
    40ca:	51 e4       	ldi	r21, 0x41	; 65
    40cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	bc 01       	movw	r22, r24
    40d6:	cd 01       	movw	r24, r26
    40d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	9c 8b       	std	Y+20, r25	; 0x14
    40e2:	8b 8b       	std	Y+19, r24	; 0x13
    40e4:	0f c0       	rjmp	.+30     	; 0x4104 <LCD_VoidInit+0x6ae>
    40e6:	88 ec       	ldi	r24, 0xC8	; 200
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	9a 8b       	std	Y+18, r25	; 0x12
    40ec:	89 8b       	std	Y+17, r24	; 0x11
    40ee:	89 89       	ldd	r24, Y+17	; 0x11
    40f0:	9a 89       	ldd	r25, Y+18	; 0x12
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	f1 f7       	brne	.-4      	; 0x40f2 <LCD_VoidInit+0x69c>
    40f6:	9a 8b       	std	Y+18, r25	; 0x12
    40f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40fa:	8b 89       	ldd	r24, Y+19	; 0x13
    40fc:	9c 89       	ldd	r25, Y+20	; 0x14
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	9c 8b       	std	Y+20, r25	; 0x14
    4102:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4104:	8b 89       	ldd	r24, Y+19	; 0x13
    4106:	9c 89       	ldd	r25, Y+20	; 0x14
    4108:	00 97       	sbiw	r24, 0x00	; 0
    410a:	69 f7       	brne	.-38     	; 0x40e6 <LCD_VoidInit+0x690>
    410c:	14 c0       	rjmp	.+40     	; 0x4136 <LCD_VoidInit+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    410e:	6d 89       	ldd	r22, Y+21	; 0x15
    4110:	7e 89       	ldd	r23, Y+22	; 0x16
    4112:	8f 89       	ldd	r24, Y+23	; 0x17
    4114:	98 8d       	ldd	r25, Y+24	; 0x18
    4116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	9c 8b       	std	Y+20, r25	; 0x14
    4120:	8b 8b       	std	Y+19, r24	; 0x13
    4122:	8b 89       	ldd	r24, Y+19	; 0x13
    4124:	9c 89       	ldd	r25, Y+20	; 0x14
    4126:	98 8b       	std	Y+16, r25	; 0x10
    4128:	8f 87       	std	Y+15, r24	; 0x0f
    412a:	8f 85       	ldd	r24, Y+15	; 0x0f
    412c:	98 89       	ldd	r25, Y+16	; 0x10
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	f1 f7       	brne	.-4      	; 0x412e <LCD_VoidInit+0x6d8>
    4132:	98 8b       	std	Y+16, r25	; 0x10
    4134:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);
	LCD_VoidSendCommand(LCD_EntryMode2);
    4136:	86 e0       	ldi	r24, 0x06	; 6
    4138:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	a0 e0       	ldi	r26, 0x00	; 0
    4142:	b0 e4       	ldi	r27, 0x40	; 64
    4144:	8b 87       	std	Y+11, r24	; 0x0b
    4146:	9c 87       	std	Y+12, r25	; 0x0c
    4148:	ad 87       	std	Y+13, r26	; 0x0d
    414a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414c:	6b 85       	ldd	r22, Y+11	; 0x0b
    414e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4150:	8d 85       	ldd	r24, Y+13	; 0x0d
    4152:	9e 85       	ldd	r25, Y+14	; 0x0e
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4a ef       	ldi	r20, 0xFA	; 250
    415a:	54 e4       	ldi	r21, 0x44	; 68
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	8f 83       	std	Y+7, r24	; 0x07
    4166:	98 87       	std	Y+8, r25	; 0x08
    4168:	a9 87       	std	Y+9, r26	; 0x09
    416a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    416c:	6f 81       	ldd	r22, Y+7	; 0x07
    416e:	78 85       	ldd	r23, Y+8	; 0x08
    4170:	89 85       	ldd	r24, Y+9	; 0x09
    4172:	9a 85       	ldd	r25, Y+10	; 0x0a
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	40 e8       	ldi	r20, 0x80	; 128
    417a:	5f e3       	ldi	r21, 0x3F	; 63
    417c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4180:	88 23       	and	r24, r24
    4182:	2c f4       	brge	.+10     	; 0x418e <LCD_VoidInit+0x738>
		__ticks = 1;
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	9e 83       	std	Y+6, r25	; 0x06
    418a:	8d 83       	std	Y+5, r24	; 0x05
    418c:	3f c0       	rjmp	.+126    	; 0x420c <LCD_VoidInit+0x7b6>
	else if (__tmp > 65535)
    418e:	6f 81       	ldd	r22, Y+7	; 0x07
    4190:	78 85       	ldd	r23, Y+8	; 0x08
    4192:	89 85       	ldd	r24, Y+9	; 0x09
    4194:	9a 85       	ldd	r25, Y+10	; 0x0a
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	3f ef       	ldi	r19, 0xFF	; 255
    419a:	4f e7       	ldi	r20, 0x7F	; 127
    419c:	57 e4       	ldi	r21, 0x47	; 71
    419e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41a2:	18 16       	cp	r1, r24
    41a4:	4c f5       	brge	.+82     	; 0x41f8 <LCD_VoidInit+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	40 e2       	ldi	r20, 0x20	; 32
    41b4:	51 e4       	ldi	r21, 0x41	; 65
    41b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	9e 83       	std	Y+6, r25	; 0x06
    41cc:	8d 83       	std	Y+5, r24	; 0x05
    41ce:	0f c0       	rjmp	.+30     	; 0x41ee <LCD_VoidInit+0x798>
    41d0:	88 ec       	ldi	r24, 0xC8	; 200
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	9c 83       	std	Y+4, r25	; 0x04
    41d6:	8b 83       	std	Y+3, r24	; 0x03
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	9c 81       	ldd	r25, Y+4	; 0x04
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	f1 f7       	brne	.-4      	; 0x41dc <LCD_VoidInit+0x786>
    41e0:	9c 83       	std	Y+4, r25	; 0x04
    41e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e4:	8d 81       	ldd	r24, Y+5	; 0x05
    41e6:	9e 81       	ldd	r25, Y+6	; 0x06
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	9e 83       	std	Y+6, r25	; 0x06
    41ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ee:	8d 81       	ldd	r24, Y+5	; 0x05
    41f0:	9e 81       	ldd	r25, Y+6	; 0x06
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	69 f7       	brne	.-38     	; 0x41d0 <LCD_VoidInit+0x77a>
    41f6:	14 c0       	rjmp	.+40     	; 0x4220 <LCD_VoidInit+0x7ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f8:	6f 81       	ldd	r22, Y+7	; 0x07
    41fa:	78 85       	ldd	r23, Y+8	; 0x08
    41fc:	89 85       	ldd	r24, Y+9	; 0x09
    41fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	9e 83       	std	Y+6, r25	; 0x06
    420a:	8d 83       	std	Y+5, r24	; 0x05
    420c:	8d 81       	ldd	r24, Y+5	; 0x05
    420e:	9e 81       	ldd	r25, Y+6	; 0x06
    4210:	9a 83       	std	Y+2, r25	; 0x02
    4212:	89 83       	std	Y+1, r24	; 0x01
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	01 97       	sbiw	r24, 0x01	; 1
    421a:	f1 f7       	brne	.-4      	; 0x4218 <LCD_VoidInit+0x7c2>
    421c:	9a 83       	std	Y+2, r25	; 0x02
    421e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}
    4220:	ce 59       	subi	r28, 0x9E	; 158
    4222:	df 4f       	sbci	r29, 0xFF	; 255
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	08 95       	ret

00004238 <LCD_VoidSendString>:
# Argument      : U8 *Address_String										 #
# Return        : Void                                                		 #
# Description   : this function Will Display The Some Of Char on LCD(String) #
##############################################################################*/
void LCD_VoidSendString(U8 *Address_String)
{   /* Local loop Counter */
    4238:	df 93       	push	r29
    423a:	cf 93       	push	r28
    423c:	00 d0       	rcall	.+0      	; 0x423e <LCD_VoidSendString+0x6>
    423e:	0f 92       	push	r0
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
    4244:	9b 83       	std	Y+3, r25	; 0x03
    4246:	8a 83       	std	Y+2, r24	; 0x02
	U8 Local_Counter = 0 ;
    4248:	19 82       	std	Y+1, r1	; 0x01
    424a:	0e c0       	rjmp	.+28     	; 0x4268 <LCD_VoidSendString+0x30>
	while(Address_String[Local_Counter]!=NULL_Charecter)
	{
		/* Write Character on LCD */
		LCD_VoidSendChar(Address_String[Local_Counter]);
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	28 2f       	mov	r18, r24
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	fc 01       	movw	r30, r24
    4258:	e2 0f       	add	r30, r18
    425a:	f3 1f       	adc	r31, r19
    425c:	80 81       	ld	r24, Z
    425e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <LCD_VoidSendChar>
		/* Increment local loop index */
		Local_Counter++;
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	8f 5f       	subi	r24, 0xFF	; 255
    4266:	89 83       	std	Y+1, r24	; 0x01
# Description   : this function Will Display The Some Of Char on LCD(String) #
##############################################################################*/
void LCD_VoidSendString(U8 *Address_String)
{   /* Local loop Counter */
	U8 Local_Counter = 0 ;
	while(Address_String[Local_Counter]!=NULL_Charecter)
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	28 2f       	mov	r18, r24
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	8a 81       	ldd	r24, Y+2	; 0x02
    4270:	9b 81       	ldd	r25, Y+3	; 0x03
    4272:	fc 01       	movw	r30, r24
    4274:	e2 0f       	add	r30, r18
    4276:	f3 1f       	adc	r31, r19
    4278:	80 81       	ld	r24, Z
    427a:	88 23       	and	r24, r24
    427c:	39 f7       	brne	.-50     	; 0x424c <LCD_VoidSendString+0x14>
		/* Write Character on LCD */
		LCD_VoidSendChar(Address_String[Local_Counter]);
		/* Increment local loop index */
		Local_Counter++;
	}
}
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	cf 91       	pop	r28
    4286:	df 91       	pop	r29
    4288:	08 95       	ret

0000428a <LCD_VoidSendNumber>:
# Return        : Void                                                		 #
# Description   : this function Will take The Number and Convert to Char     #
 	 	 	 	  And Display it 	 									     #
##############################################################################*/
void LCD_VoidSendNumber(U32 local_U32Number)
{
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	df 93       	push	r29
    4294:	cf 93       	push	r28
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	28 97       	sbiw	r28, 0x08	; 8
    429c:	0f b6       	in	r0, 0x3f	; 63
    429e:	f8 94       	cli
    42a0:	de bf       	out	0x3e, r29	; 62
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	cd bf       	out	0x3d, r28	; 61
    42a6:	6d 83       	std	Y+5, r22	; 0x05
    42a8:	7e 83       	std	Y+6, r23	; 0x06
    42aa:	8f 83       	std	Y+7, r24	; 0x07
    42ac:	98 87       	std	Y+8, r25	; 0x08
	S32 Local_S32Num = 1;
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	a0 e0       	ldi	r26, 0x00	; 0
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	89 83       	std	Y+1, r24	; 0x01
    42b8:	9a 83       	std	Y+2, r25	; 0x02
    42ba:	ab 83       	std	Y+3, r26	; 0x03
    42bc:	bc 83       	std	Y+4, r27	; 0x04

	if(local_U32Number == 0 )
    42be:	8d 81       	ldd	r24, Y+5	; 0x05
    42c0:	9e 81       	ldd	r25, Y+6	; 0x06
    42c2:	af 81       	ldd	r26, Y+7	; 0x07
    42c4:	b8 85       	ldd	r27, Y+8	; 0x08
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	a1 05       	cpc	r26, r1
    42ca:	b1 05       	cpc	r27, r1
    42cc:	e1 f5       	brne	.+120    	; 0x4346 <LCD_VoidSendNumber+0xbc>
	{
		LCD_VoidSendChar('0');
    42ce:	80 e3       	ldi	r24, 0x30	; 48
    42d0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <LCD_VoidSendChar>
    42d4:	38 c0       	rjmp	.+112    	; 0x4346 <LCD_VoidSendNumber+0xbc>
		LCD_VoidSendChar('-');
		local_U32Number *= -1;
	}
	while (local_U32Number != 0)
	{
		Local_S32Num = ((Local_S32Num * 10) + (local_U32Number % 10));
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	9a 81       	ldd	r25, Y+2	; 0x02
    42da:	ab 81       	ldd	r26, Y+3	; 0x03
    42dc:	bc 81       	ldd	r27, Y+4	; 0x04
    42de:	2a e0       	ldi	r18, 0x0A	; 10
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	bc 01       	movw	r22, r24
    42e8:	cd 01       	movw	r24, r26
    42ea:	0e 94 4b 23 	call	0x4696	; 0x4696 <__mulsi3>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	7c 01       	movw	r14, r24
    42f4:	8d 01       	movw	r16, r26
    42f6:	8d 81       	ldd	r24, Y+5	; 0x05
    42f8:	9e 81       	ldd	r25, Y+6	; 0x06
    42fa:	af 81       	ldd	r26, Y+7	; 0x07
    42fc:	b8 85       	ldd	r27, Y+8	; 0x08
    42fe:	2a e0       	ldi	r18, 0x0A	; 10
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e0       	ldi	r20, 0x00	; 0
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__udivmodsi4>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	8e 0d       	add	r24, r14
    4314:	9f 1d       	adc	r25, r15
    4316:	a0 1f       	adc	r26, r16
    4318:	b1 1f       	adc	r27, r17
    431a:	89 83       	std	Y+1, r24	; 0x01
    431c:	9a 83       	std	Y+2, r25	; 0x02
    431e:	ab 83       	std	Y+3, r26	; 0x03
    4320:	bc 83       	std	Y+4, r27	; 0x04
		local_U32Number = (local_U32Number / 10);
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	9e 81       	ldd	r25, Y+6	; 0x06
    4326:	af 81       	ldd	r26, Y+7	; 0x07
    4328:	b8 85       	ldd	r27, Y+8	; 0x08
    432a:	2a e0       	ldi	r18, 0x0A	; 10
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	bc 01       	movw	r22, r24
    4334:	cd 01       	movw	r24, r26
    4336:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__udivmodsi4>
    433a:	da 01       	movw	r26, r20
    433c:	c9 01       	movw	r24, r18
    433e:	8d 83       	std	Y+5, r24	; 0x05
    4340:	9e 83       	std	Y+6, r25	; 0x06
    4342:	af 83       	std	Y+7, r26	; 0x07
    4344:	b8 87       	std	Y+8, r27	; 0x08
	else if (local_U32Number < 0)
	{
		LCD_VoidSendChar('-');
		local_U32Number *= -1;
	}
	while (local_U32Number != 0)
    4346:	8d 81       	ldd	r24, Y+5	; 0x05
    4348:	9e 81       	ldd	r25, Y+6	; 0x06
    434a:	af 81       	ldd	r26, Y+7	; 0x07
    434c:	b8 85       	ldd	r27, Y+8	; 0x08
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	a1 05       	cpc	r26, r1
    4352:	b1 05       	cpc	r27, r1
    4354:	09 f0       	breq	.+2      	; 0x4358 <LCD_VoidSendNumber+0xce>
    4356:	bf cf       	rjmp	.-130    	; 0x42d6 <LCD_VoidSendNumber+0x4c>
    4358:	23 c0       	rjmp	.+70     	; 0x43a0 <LCD_VoidSendNumber+0x116>
		Local_S32Num = ((Local_S32Num * 10) + (local_U32Number % 10));
		local_U32Number = (local_U32Number / 10);
	}
	while (Local_S32Num != 1)
	{
		LCD_VoidSendChar((Local_S32Num % 10) + 48);
    435a:	89 81       	ldd	r24, Y+1	; 0x01
    435c:	9a 81       	ldd	r25, Y+2	; 0x02
    435e:	ab 81       	ldd	r26, Y+3	; 0x03
    4360:	bc 81       	ldd	r27, Y+4	; 0x04
    4362:	2a e0       	ldi	r18, 0x0A	; 10
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	50 e0       	ldi	r21, 0x00	; 0
    436a:	bc 01       	movw	r22, r24
    436c:	cd 01       	movw	r24, r26
    436e:	0e 94 a0 23 	call	0x4740	; 0x4740 <__divmodsi4>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	80 5d       	subi	r24, 0xD0	; 208
    4378:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <LCD_VoidSendChar>
		Local_S32Num = (Local_S32Num / 10);
    437c:	89 81       	ldd	r24, Y+1	; 0x01
    437e:	9a 81       	ldd	r25, Y+2	; 0x02
    4380:	ab 81       	ldd	r26, Y+3	; 0x03
    4382:	bc 81       	ldd	r27, Y+4	; 0x04
    4384:	2a e0       	ldi	r18, 0x0A	; 10
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 a0 23 	call	0x4740	; 0x4740 <__divmodsi4>
    4394:	da 01       	movw	r26, r20
    4396:	c9 01       	movw	r24, r18
    4398:	89 83       	std	Y+1, r24	; 0x01
    439a:	9a 83       	std	Y+2, r25	; 0x02
    439c:	ab 83       	std	Y+3, r26	; 0x03
    439e:	bc 83       	std	Y+4, r27	; 0x04
	while (local_U32Number != 0)
	{
		Local_S32Num = ((Local_S32Num * 10) + (local_U32Number % 10));
		local_U32Number = (local_U32Number / 10);
	}
	while (Local_S32Num != 1)
    43a0:	89 81       	ldd	r24, Y+1	; 0x01
    43a2:	9a 81       	ldd	r25, Y+2	; 0x02
    43a4:	ab 81       	ldd	r26, Y+3	; 0x03
    43a6:	bc 81       	ldd	r27, Y+4	; 0x04
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	91 05       	cpc	r25, r1
    43ac:	a1 05       	cpc	r26, r1
    43ae:	b1 05       	cpc	r27, r1
    43b0:	a1 f6       	brne	.-88     	; 0x435a <LCD_VoidSendNumber+0xd0>
	{
		LCD_VoidSendChar((Local_S32Num % 10) + 48);
		Local_S32Num = (Local_S32Num / 10);
	}

}
    43b2:	28 96       	adiw	r28, 0x08	; 8
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	f8 94       	cli
    43b8:	de bf       	out	0x3e, r29	; 62
    43ba:	0f be       	out	0x3f, r0	; 63
    43bc:	cd bf       	out	0x3d, r28	; 61
    43be:	cf 91       	pop	r28
    43c0:	df 91       	pop	r29
    43c2:	1f 91       	pop	r17
    43c4:	0f 91       	pop	r16
    43c6:	ff 90       	pop	r15
    43c8:	ef 90       	pop	r14
    43ca:	08 95       	ret

000043cc <LCD_VoidGoToXY>:
# Return        : Void                                                		 #
# Description   : this function Will move the cursor to the required\        #
 	 	 	 	  X and Y												     #
##############################################################################*/
void LCD_VoidGoToXY(U8 Local_XPosition,U8 Local_YPosition)
{
    43cc:	df 93       	push	r29
    43ce:	cf 93       	push	r28
    43d0:	00 d0       	rcall	.+0      	; 0x43d2 <LCD_VoidGoToXY+0x6>
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <LCD_VoidGoToXY+0x8>
    43d4:	0f 92       	push	r0
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
    43da:	8a 83       	std	Y+2, r24	; 0x02
    43dc:	6b 83       	std	Y+3, r22	; 0x03
	U8 Local_U8Address;
	switch(Local_XPosition)
    43de:	8a 81       	ldd	r24, Y+2	; 0x02
    43e0:	28 2f       	mov	r18, r24
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	3d 83       	std	Y+5, r19	; 0x05
    43e6:	2c 83       	std	Y+4, r18	; 0x04
    43e8:	8c 81       	ldd	r24, Y+4	; 0x04
    43ea:	9d 81       	ldd	r25, Y+5	; 0x05
    43ec:	00 97       	sbiw	r24, 0x00	; 0
    43ee:	31 f0       	breq	.+12     	; 0x43fc <LCD_VoidGoToXY+0x30>
    43f0:	2c 81       	ldd	r18, Y+4	; 0x04
    43f2:	3d 81       	ldd	r19, Y+5	; 0x05
    43f4:	21 30       	cpi	r18, 0x01	; 1
    43f6:	31 05       	cpc	r19, r1
    43f8:	21 f0       	breq	.+8      	; 0x4402 <LCD_VoidGoToXY+0x36>
    43fa:	06 c0       	rjmp	.+12     	; 0x4408 <LCD_VoidGoToXY+0x3c>
	{
	case 0 :Local_U8Address=Local_YPosition;  break;
    43fc:	8b 81       	ldd	r24, Y+3	; 0x03
    43fe:	89 83       	std	Y+1, r24	; 0x01
    4400:	03 c0       	rjmp	.+6      	; 0x4408 <LCD_VoidGoToXY+0x3c>
	case 1 :Local_U8Address=Local_YPosition + LCD_SecondLine;  break;
    4402:	8b 81       	ldd	r24, Y+3	; 0x03
    4404:	80 5c       	subi	r24, 0xC0	; 192
    4406:	89 83       	std	Y+1, r24	; 0x01
	default:  break;
	}
	LCD_VoidSendCommand(Local_U8Address + LCD_SetAddressDDRAM);
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	80 58       	subi	r24, 0x80	; 128
    440c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
}
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	cf 91       	pop	r28
    441c:	df 91       	pop	r29
    441e:	08 95       	ret

00004420 <LCD_VoidStoreSpecialChar>:
# Argument      : U8* Local_U8PatternArray , U8 Local_U8PatternNum			 #
# Return        : Void                                                		 #
# Description   : this function Store Special Char In CGRAM 	 		     #
##############################################################################*/
void LCD_VoidStoreSpecialChar(U8* Local_U8PatternArray , U8 Local_U8PatternNum)
{
    4420:	df 93       	push	r29
    4422:	cf 93       	push	r28
    4424:	00 d0       	rcall	.+0      	; 0x4426 <LCD_VoidStoreSpecialChar+0x6>
    4426:	00 d0       	rcall	.+0      	; 0x4428 <LCD_VoidStoreSpecialChar+0x8>
    4428:	cd b7       	in	r28, 0x3d	; 61
    442a:	de b7       	in	r29, 0x3e	; 62
    442c:	9b 83       	std	Y+3, r25	; 0x03
    442e:	8a 83       	std	Y+2, r24	; 0x02
    4430:	6c 83       	std	Y+4, r22	; 0x04
	U8 Local_Counter = 0 ;
    4432:	19 82       	std	Y+1, r1	; 0x01
	/* set address of first byte of the pattern at pattern number n*/
	LCD_VoidSendCommand(LCD_SetAddressCGRAM + Local_U8PatternNum*LCD_CGRAMPatternSize );
    4434:	8c 81       	ldd	r24, Y+4	; 0x04
    4436:	88 2f       	mov	r24, r24
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	08 96       	adiw	r24, 0x08	; 8
    443c:	88 0f       	add	r24, r24
    443e:	99 1f       	adc	r25, r25
    4440:	88 0f       	add	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <LCD_VoidSendCommand>
	/* send the pattern  data bytes one by one */
	for(Local_Counter = 0 ; Local_Counter <LCD_CGRAMPatternSize ; Local_Counter++)
    444c:	19 82       	std	Y+1, r1	; 0x01
    444e:	0e c0       	rjmp	.+28     	; 0x446c <LCD_VoidStoreSpecialChar+0x4c>
	{
		LCD_VoidSendChar(Local_U8PatternArray[Local_Counter]);
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	28 2f       	mov	r18, r24
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	8a 81       	ldd	r24, Y+2	; 0x02
    4458:	9b 81       	ldd	r25, Y+3	; 0x03
    445a:	fc 01       	movw	r30, r24
    445c:	e2 0f       	add	r30, r18
    445e:	f3 1f       	adc	r31, r19
    4460:	80 81       	ld	r24, Z
    4462:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <LCD_VoidSendChar>
{
	U8 Local_Counter = 0 ;
	/* set address of first byte of the pattern at pattern number n*/
	LCD_VoidSendCommand(LCD_SetAddressCGRAM + Local_U8PatternNum*LCD_CGRAMPatternSize );
	/* send the pattern  data bytes one by one */
	for(Local_Counter = 0 ; Local_Counter <LCD_CGRAMPatternSize ; Local_Counter++)
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	8f 5f       	subi	r24, 0xFF	; 255
    446a:	89 83       	std	Y+1, r24	; 0x01
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	88 30       	cpi	r24, 0x08	; 8
    4470:	78 f3       	brcs	.-34     	; 0x4450 <LCD_VoidStoreSpecialChar+0x30>
	{
		LCD_VoidSendChar(Local_U8PatternArray[Local_Counter]);
	}

}
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	cf 91       	pop	r28
    447c:	df 91       	pop	r29
    447e:	08 95       	ret

00004480 <LCD_VoidDisplaySpecialChar>:
# Argument      : U8* Local_U8PatternNum 									 #
# Return        : Void                                                		 #
# Description   : this function Display Special Char In CGRAM 	 		     #
##############################################################################*/
void LCD_VoidDisplaySpecialChar(U8 Local_U8PatternNum)
{
    4480:	df 93       	push	r29
    4482:	cf 93       	push	r28
    4484:	0f 92       	push	r0
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	89 83       	std	Y+1, r24	; 0x01

	LCD_VoidSendChar(Local_U8PatternNum);
    448c:	89 81       	ldd	r24, Y+1	; 0x01
    448e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <LCD_VoidSendChar>

}
    4492:	0f 90       	pop	r0
    4494:	cf 91       	pop	r28
    4496:	df 91       	pop	r29
    4498:	08 95       	ret

0000449a <KPAD_init>:
#include "../Header/KPAD_private.h"


//char copy_DDRPort, char copy_PORTPort
void KPAD_init()
{
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
	/* MAKE THE
	 * PENs PORTA0,1,2,3 IS OUTPUT
	 * PENs POSTA4,5,6,7 IS INPUT*/
	SET_PROT_VALUE(DDRD, 0x0f);		//	DDRD = 0xF0;
    44a2:	e1 e3       	ldi	r30, 0x31	; 49
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	8f e0       	ldi	r24, 0x0F	; 15
    44a8:	80 83       	st	Z, r24

	/*make
	 * PA0,1,2,3 as HIGH
	 * PA4,5,6,7 PULLUP Resistor */
	SET_PORT(PORTD);		//	PORTD = 0xFF;
    44aa:	e2 e3       	ldi	r30, 0x32	; 50
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	8f ef       	ldi	r24, 0xFF	; 255
    44b0:	80 83       	st	Z, r24
}
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <KPAD_getPressedKey>:

//char copy_PORTPort, char copy_PINPort
char KPAD_getPressedKey(){
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	00 d0       	rcall	.+0      	; 0x44be <KPAD_getPressedKey+0x6>
    44be:	00 d0       	rcall	.+0      	; 0x44c0 <KPAD_getPressedKey+0x8>
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62

	char keyValue = -1 ;
    44c4:	8f ef       	ldi	r24, 0xFF	; 255
    44c6:	8c 83       	std	Y+4, r24	; 0x04
	char keyPressed = -1;
    44c8:	8f ef       	ldi	r24, 0xFF	; 255
    44ca:	8b 83       	std	Y+3, r24	; 0x03
	for(char col=0; col<4; col++)
    44cc:	1a 82       	std	Y+2, r1	; 0x02
    44ce:	5f c0       	rjmp	.+190    	; 0x458e <KPAD_getPressedKey+0xd6>
	{
		CLR_PIN(PORTD, col);
    44d0:	a2 e3       	ldi	r26, 0x32	; 50
    44d2:	b0 e0       	ldi	r27, 0x00	; 0
    44d4:	e2 e3       	ldi	r30, 0x32	; 50
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	80 81       	ld	r24, Z
    44da:	48 2f       	mov	r20, r24
    44dc:	8a 81       	ldd	r24, Y+2	; 0x02
    44de:	28 2f       	mov	r18, r24
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	02 2e       	mov	r0, r18
    44e8:	02 c0       	rjmp	.+4      	; 0x44ee <KPAD_getPressedKey+0x36>
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	0a 94       	dec	r0
    44f0:	e2 f7       	brpl	.-8      	; 0x44ea <KPAD_getPressedKey+0x32>
    44f2:	80 95       	com	r24
    44f4:	84 23       	and	r24, r20
    44f6:	8c 93       	st	X, r24
		for(char row=4; row<8; row++)
    44f8:	84 e0       	ldi	r24, 0x04	; 4
    44fa:	89 83       	std	Y+1, r24	; 0x01
    44fc:	2f c0       	rjmp	.+94     	; 0x455c <KPAD_getPressedKey+0xa4>
		{

			keyValue = -1 ;
    44fe:	8f ef       	ldi	r24, 0xFF	; 255
    4500:	8c 83       	std	Y+4, r24	; 0x04
			keyValue = GET_PIN(PIND, row);
    4502:	e0 e3       	ldi	r30, 0x30	; 48
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	28 2f       	mov	r18, r24
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	88 2f       	mov	r24, r24
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	a9 01       	movw	r20, r18
    4514:	02 c0       	rjmp	.+4      	; 0x451a <KPAD_getPressedKey+0x62>
    4516:	55 95       	asr	r21
    4518:	47 95       	ror	r20
    451a:	8a 95       	dec	r24
    451c:	e2 f7       	brpl	.-8      	; 0x4516 <KPAD_getPressedKey+0x5e>
    451e:	ca 01       	movw	r24, r20
    4520:	81 70       	andi	r24, 0x01	; 1
    4522:	8c 83       	std	Y+4, r24	; 0x04
			if(keyValue == 0)
    4524:	8c 81       	ldd	r24, Y+4	; 0x04
    4526:	88 23       	and	r24, r24
    4528:	b1 f4       	brne	.+44     	; 0x4556 <KPAD_getPressedKey+0x9e>
			{
				keyPressed = keyPadButtons[row-4][col];
    452a:	89 81       	ldd	r24, Y+1	; 0x01
    452c:	88 2f       	mov	r24, r24
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	ac 01       	movw	r20, r24
    4532:	44 50       	subi	r20, 0x04	; 4
    4534:	50 40       	sbci	r21, 0x00	; 0
    4536:	8a 81       	ldd	r24, Y+2	; 0x02
    4538:	28 2f       	mov	r18, r24
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	ca 01       	movw	r24, r20
    453e:	88 0f       	add	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	88 0f       	add	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	82 0f       	add	r24, r18
    4548:	93 1f       	adc	r25, r19
    454a:	fc 01       	movw	r30, r24
    454c:	e1 59       	subi	r30, 0x91	; 145
    454e:	ff 4f       	sbci	r31, 0xFF	; 255
    4550:	80 81       	ld	r24, Z
    4552:	8b 83       	std	Y+3, r24	; 0x03
    4554:	06 c0       	rjmp	.+12     	; 0x4562 <KPAD_getPressedKey+0xaa>
	char keyValue = -1 ;
	char keyPressed = -1;
	for(char col=0; col<4; col++)
	{
		CLR_PIN(PORTD, col);
		for(char row=4; row<8; row++)
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	8f 5f       	subi	r24, 0xFF	; 255
    455a:	89 83       	std	Y+1, r24	; 0x01
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	88 30       	cpi	r24, 0x08	; 8
    4560:	70 f2       	brcs	.-100    	; 0x44fe <KPAD_getPressedKey+0x46>
			{
				keyPressed = keyPadButtons[row-4][col];
				break;
			}
		}
		SET_PIN(PORTD, col);
    4562:	a2 e3       	ldi	r26, 0x32	; 50
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	e2 e3       	ldi	r30, 0x32	; 50
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	48 2f       	mov	r20, r24
    456e:	8a 81       	ldd	r24, Y+2	; 0x02
    4570:	28 2f       	mov	r18, r24
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	02 2e       	mov	r0, r18
    457a:	02 c0       	rjmp	.+4      	; 0x4580 <KPAD_getPressedKey+0xc8>
    457c:	88 0f       	add	r24, r24
    457e:	99 1f       	adc	r25, r25
    4580:	0a 94       	dec	r0
    4582:	e2 f7       	brpl	.-8      	; 0x457c <KPAD_getPressedKey+0xc4>
    4584:	84 2b       	or	r24, r20
    4586:	8c 93       	st	X, r24
//char copy_PORTPort, char copy_PINPort
char KPAD_getPressedKey(){

	char keyValue = -1 ;
	char keyPressed = -1;
	for(char col=0; col<4; col++)
    4588:	8a 81       	ldd	r24, Y+2	; 0x02
    458a:	8f 5f       	subi	r24, 0xFF	; 255
    458c:	8a 83       	std	Y+2, r24	; 0x02
    458e:	8a 81       	ldd	r24, Y+2	; 0x02
    4590:	84 30       	cpi	r24, 0x04	; 4
    4592:	08 f4       	brcc	.+2      	; 0x4596 <KPAD_getPressedKey+0xde>
    4594:	9d cf       	rjmp	.-198    	; 0x44d0 <KPAD_getPressedKey+0x18>
				break;
			}
		}
		SET_PIN(PORTD, col);
	}
	return keyPressed;
    4596:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4598:	0f 90       	pop	r0
    459a:	0f 90       	pop	r0
    459c:	0f 90       	pop	r0
    459e:	0f 90       	pop	r0
    45a0:	cf 91       	pop	r28
    45a2:	df 91       	pop	r29
    45a4:	08 95       	ret

000045a6 <main>:
void vTask1Blink500( void * pvParameters );
void vTask1Blink1000( void * pvParameters );


void main(void)
{
    45a6:	af 92       	push	r10
    45a8:	bf 92       	push	r11
    45aa:	cf 92       	push	r12
    45ac:	df 92       	push	r13
    45ae:	ef 92       	push	r14
    45b0:	ff 92       	push	r15
    45b2:	0f 93       	push	r16
    45b4:	df 93       	push	r29
    45b6:	cf 93       	push	r28
    45b8:	cd b7       	in	r28, 0x3d	; 61
    45ba:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate(vTask1Blink500, NULL, configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    45bc:	83 e0       	ldi	r24, 0x03	; 3
    45be:	93 e2       	ldi	r25, 0x23	; 35
    45c0:	60 e0       	ldi	r22, 0x00	; 0
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	45 e5       	ldi	r20, 0x55	; 85
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	01 e0       	ldi	r16, 0x01	; 1
    45ce:	ee 24       	eor	r14, r14
    45d0:	ff 24       	eor	r15, r15
    45d2:	cc 24       	eor	r12, r12
    45d4:	dd 24       	eor	r13, r13
    45d6:	aa 24       	eor	r10, r10
    45d8:	bb 24       	eor	r11, r11
    45da:	0e 94 75 11 	call	0x22ea	; 0x22ea <xTaskGenericCreate>
	xTaskCreate(vTask1Blink1000, NULL, configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    45de:	87 e2       	ldi	r24, 0x27	; 39
    45e0:	93 e2       	ldi	r25, 0x23	; 35
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	70 e0       	ldi	r23, 0x00	; 0
    45e6:	45 e5       	ldi	r20, 0x55	; 85
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	01 e0       	ldi	r16, 0x01	; 1
    45f0:	ee 24       	eor	r14, r14
    45f2:	ff 24       	eor	r15, r15
    45f4:	cc 24       	eor	r12, r12
    45f6:	dd 24       	eor	r13, r13
    45f8:	aa 24       	eor	r10, r10
    45fa:	bb 24       	eor	r11, r11
    45fc:	0e 94 75 11 	call	0x22ea	; 0x22ea <xTaskGenericCreate>

	vTaskStartScheduler();
    4600:	0e 94 6e 13 	call	0x26dc	; 0x26dc <vTaskStartScheduler>
    4604:	ff cf       	rjmp	.-2      	; 0x4604 <main+0x5e>

00004606 <vTask1Blink500>:
}


/* Task to be created. */
void vTask1Blink500( void * pvParameters )
{
    4606:	df 93       	push	r29
    4608:	cf 93       	push	r28
    460a:	00 d0       	rcall	.+0      	; 0x460c <vTask1Blink500+0x6>
    460c:	0f 92       	push	r0
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
    4612:	9b 83       	std	Y+3, r25	; 0x03
    4614:	8a 83       	std	Y+2, r24	; 0x02
//    The parameter value is expected to be 1 as 1 is passed in the
//    pvParameters value in the call to xTaskCreate() below.
//    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
	DIO_VoidSetPinDir(PORT_A, PIN_A0, OUTPUT);
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	60 e0       	ldi	r22, 0x00	; 0
    461a:	41 e0       	ldi	r20, 0x01	; 1
    461c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <DIO_VoidSetPinDir>
    char flag = 0;
    4620:	19 82       	std	Y+1, r1	; 0x01

    for( ;; )
    {
        /* Task code goes here.          */
    	if(flag == 0){
    4622:	89 81       	ldd	r24, Y+1	; 0x01
    4624:	88 23       	and	r24, r24
    4626:	41 f4       	brne	.+16     	; 0x4638 <vTask1Blink500+0x32>
    		DIO_VoidSetPinValue(PORT_A, PIN_A0, HIGH);
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	41 e0       	ldi	r20, 0x01	; 1
    462e:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
    		flag = 1;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	89 83       	std	Y+1, r24	; 0x01
    4636:	06 c0       	rjmp	.+12     	; 0x4644 <vTask1Blink500+0x3e>
    	}else{
    		DIO_VoidSetPinValue(PORT_A, PIN_A0, LOW);
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	60 e0       	ldi	r22, 0x00	; 0
    463c:	40 e0       	ldi	r20, 0x00	; 0
    463e:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
    		flag = 0;
    4642:	19 82       	std	Y+1, r1	; 0x01
    	}
    	vTaskDelay(500);
    4644:	84 ef       	ldi	r24, 0xF4	; 244
    4646:	91 e0       	ldi	r25, 0x01	; 1
    4648:	0e 94 39 13 	call	0x2672	; 0x2672 <vTaskDelay>
    464c:	ea cf       	rjmp	.-44     	; 0x4622 <vTask1Blink500+0x1c>

0000464e <vTask1Blink1000>:

    }
}

void vTask1Blink1000( void * pvParameters )
{
    464e:	df 93       	push	r29
    4650:	cf 93       	push	r28
    4652:	00 d0       	rcall	.+0      	; 0x4654 <vTask1Blink1000+0x6>
    4654:	0f 92       	push	r0
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	9b 83       	std	Y+3, r25	; 0x03
    465c:	8a 83       	std	Y+2, r24	; 0x02
//    The parameter value is expected to be 1 as 1 is passed in the
//    pvParameters value in the call to xTaskCreate() below.
//    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
	DIO_VoidSetPinDir(PORT_A, PIN_A1, OUTPUT);
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	61 e0       	ldi	r22, 0x01	; 1
    4662:	41 e0       	ldi	r20, 0x01	; 1
    4664:	0e 94 d6 18 	call	0x31ac	; 0x31ac <DIO_VoidSetPinDir>
    char flag = 0;
    4668:	19 82       	std	Y+1, r1	; 0x01

    for( ;; )
    {
    	/* Task code goes here.          */
		if(flag == 0){
    466a:	89 81       	ldd	r24, Y+1	; 0x01
    466c:	88 23       	and	r24, r24
    466e:	41 f4       	brne	.+16     	; 0x4680 <vTask1Blink1000+0x32>
			DIO_VoidSetPinValue(PORT_A, PIN_A1, HIGH);
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	61 e0       	ldi	r22, 0x01	; 1
    4674:	41 e0       	ldi	r20, 0x01	; 1
    4676:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
			flag = 1;
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	89 83       	std	Y+1, r24	; 0x01
    467e:	06 c0       	rjmp	.+12     	; 0x468c <vTask1Blink1000+0x3e>
		}else{
			DIO_VoidSetPinValue(PORT_A, PIN_A1, LOW);
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	61 e0       	ldi	r22, 0x01	; 1
    4684:	40 e0       	ldi	r20, 0x00	; 0
    4686:	0e 94 de 19 	call	0x33bc	; 0x33bc <DIO_VoidSetPinValue>
			flag = 0;
    468a:	19 82       	std	Y+1, r1	; 0x01
		}
		vTaskDelay(1000);
    468c:	88 ee       	ldi	r24, 0xE8	; 232
    468e:	93 e0       	ldi	r25, 0x03	; 3
    4690:	0e 94 39 13 	call	0x2672	; 0x2672 <vTaskDelay>
    4694:	ea cf       	rjmp	.-44     	; 0x466a <vTask1Blink1000+0x1c>

00004696 <__mulsi3>:
    4696:	62 9f       	mul	r22, r18
    4698:	d0 01       	movw	r26, r0
    469a:	73 9f       	mul	r23, r19
    469c:	f0 01       	movw	r30, r0
    469e:	82 9f       	mul	r24, r18
    46a0:	e0 0d       	add	r30, r0
    46a2:	f1 1d       	adc	r31, r1
    46a4:	64 9f       	mul	r22, r20
    46a6:	e0 0d       	add	r30, r0
    46a8:	f1 1d       	adc	r31, r1
    46aa:	92 9f       	mul	r25, r18
    46ac:	f0 0d       	add	r31, r0
    46ae:	83 9f       	mul	r24, r19
    46b0:	f0 0d       	add	r31, r0
    46b2:	74 9f       	mul	r23, r20
    46b4:	f0 0d       	add	r31, r0
    46b6:	65 9f       	mul	r22, r21
    46b8:	f0 0d       	add	r31, r0
    46ba:	99 27       	eor	r25, r25
    46bc:	72 9f       	mul	r23, r18
    46be:	b0 0d       	add	r27, r0
    46c0:	e1 1d       	adc	r30, r1
    46c2:	f9 1f       	adc	r31, r25
    46c4:	63 9f       	mul	r22, r19
    46c6:	b0 0d       	add	r27, r0
    46c8:	e1 1d       	adc	r30, r1
    46ca:	f9 1f       	adc	r31, r25
    46cc:	bd 01       	movw	r22, r26
    46ce:	cf 01       	movw	r24, r30
    46d0:	11 24       	eor	r1, r1
    46d2:	08 95       	ret

000046d4 <__udivmodhi4>:
    46d4:	aa 1b       	sub	r26, r26
    46d6:	bb 1b       	sub	r27, r27
    46d8:	51 e1       	ldi	r21, 0x11	; 17
    46da:	07 c0       	rjmp	.+14     	; 0x46ea <__udivmodhi4_ep>

000046dc <__udivmodhi4_loop>:
    46dc:	aa 1f       	adc	r26, r26
    46de:	bb 1f       	adc	r27, r27
    46e0:	a6 17       	cp	r26, r22
    46e2:	b7 07       	cpc	r27, r23
    46e4:	10 f0       	brcs	.+4      	; 0x46ea <__udivmodhi4_ep>
    46e6:	a6 1b       	sub	r26, r22
    46e8:	b7 0b       	sbc	r27, r23

000046ea <__udivmodhi4_ep>:
    46ea:	88 1f       	adc	r24, r24
    46ec:	99 1f       	adc	r25, r25
    46ee:	5a 95       	dec	r21
    46f0:	a9 f7       	brne	.-22     	; 0x46dc <__udivmodhi4_loop>
    46f2:	80 95       	com	r24
    46f4:	90 95       	com	r25
    46f6:	bc 01       	movw	r22, r24
    46f8:	cd 01       	movw	r24, r26
    46fa:	08 95       	ret

000046fc <__udivmodsi4>:
    46fc:	a1 e2       	ldi	r26, 0x21	; 33
    46fe:	1a 2e       	mov	r1, r26
    4700:	aa 1b       	sub	r26, r26
    4702:	bb 1b       	sub	r27, r27
    4704:	fd 01       	movw	r30, r26
    4706:	0d c0       	rjmp	.+26     	; 0x4722 <__udivmodsi4_ep>

00004708 <__udivmodsi4_loop>:
    4708:	aa 1f       	adc	r26, r26
    470a:	bb 1f       	adc	r27, r27
    470c:	ee 1f       	adc	r30, r30
    470e:	ff 1f       	adc	r31, r31
    4710:	a2 17       	cp	r26, r18
    4712:	b3 07       	cpc	r27, r19
    4714:	e4 07       	cpc	r30, r20
    4716:	f5 07       	cpc	r31, r21
    4718:	20 f0       	brcs	.+8      	; 0x4722 <__udivmodsi4_ep>
    471a:	a2 1b       	sub	r26, r18
    471c:	b3 0b       	sbc	r27, r19
    471e:	e4 0b       	sbc	r30, r20
    4720:	f5 0b       	sbc	r31, r21

00004722 <__udivmodsi4_ep>:
    4722:	66 1f       	adc	r22, r22
    4724:	77 1f       	adc	r23, r23
    4726:	88 1f       	adc	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	1a 94       	dec	r1
    472c:	69 f7       	brne	.-38     	; 0x4708 <__udivmodsi4_loop>
    472e:	60 95       	com	r22
    4730:	70 95       	com	r23
    4732:	80 95       	com	r24
    4734:	90 95       	com	r25
    4736:	9b 01       	movw	r18, r22
    4738:	ac 01       	movw	r20, r24
    473a:	bd 01       	movw	r22, r26
    473c:	cf 01       	movw	r24, r30
    473e:	08 95       	ret

00004740 <__divmodsi4>:
    4740:	97 fb       	bst	r25, 7
    4742:	09 2e       	mov	r0, r25
    4744:	05 26       	eor	r0, r21
    4746:	0e d0       	rcall	.+28     	; 0x4764 <__divmodsi4_neg1>
    4748:	57 fd       	sbrc	r21, 7
    474a:	04 d0       	rcall	.+8      	; 0x4754 <__divmodsi4_neg2>
    474c:	d7 df       	rcall	.-82     	; 0x46fc <__udivmodsi4>
    474e:	0a d0       	rcall	.+20     	; 0x4764 <__divmodsi4_neg1>
    4750:	00 1c       	adc	r0, r0
    4752:	38 f4       	brcc	.+14     	; 0x4762 <__divmodsi4_exit>

00004754 <__divmodsi4_neg2>:
    4754:	50 95       	com	r21
    4756:	40 95       	com	r20
    4758:	30 95       	com	r19
    475a:	21 95       	neg	r18
    475c:	3f 4f       	sbci	r19, 0xFF	; 255
    475e:	4f 4f       	sbci	r20, 0xFF	; 255
    4760:	5f 4f       	sbci	r21, 0xFF	; 255

00004762 <__divmodsi4_exit>:
    4762:	08 95       	ret

00004764 <__divmodsi4_neg1>:
    4764:	f6 f7       	brtc	.-4      	; 0x4762 <__divmodsi4_exit>
    4766:	90 95       	com	r25
    4768:	80 95       	com	r24
    476a:	70 95       	com	r23
    476c:	61 95       	neg	r22
    476e:	7f 4f       	sbci	r23, 0xFF	; 255
    4770:	8f 4f       	sbci	r24, 0xFF	; 255
    4772:	9f 4f       	sbci	r25, 0xFF	; 255
    4774:	08 95       	ret

00004776 <__prologue_saves__>:
    4776:	2f 92       	push	r2
    4778:	3f 92       	push	r3
    477a:	4f 92       	push	r4
    477c:	5f 92       	push	r5
    477e:	6f 92       	push	r6
    4780:	7f 92       	push	r7
    4782:	8f 92       	push	r8
    4784:	9f 92       	push	r9
    4786:	af 92       	push	r10
    4788:	bf 92       	push	r11
    478a:	cf 92       	push	r12
    478c:	df 92       	push	r13
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	ca 1b       	sub	r28, r26
    47a0:	db 0b       	sbc	r29, r27
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	de bf       	out	0x3e, r29	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	cd bf       	out	0x3d, r28	; 61
    47ac:	09 94       	ijmp

000047ae <__epilogue_restores__>:
    47ae:	2a 88       	ldd	r2, Y+18	; 0x12
    47b0:	39 88       	ldd	r3, Y+17	; 0x11
    47b2:	48 88       	ldd	r4, Y+16	; 0x10
    47b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    47b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    47b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    47ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    47bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    47be:	aa 84       	ldd	r10, Y+10	; 0x0a
    47c0:	b9 84       	ldd	r11, Y+9	; 0x09
    47c2:	c8 84       	ldd	r12, Y+8	; 0x08
    47c4:	df 80       	ldd	r13, Y+7	; 0x07
    47c6:	ee 80       	ldd	r14, Y+6	; 0x06
    47c8:	fd 80       	ldd	r15, Y+5	; 0x05
    47ca:	0c 81       	ldd	r16, Y+4	; 0x04
    47cc:	1b 81       	ldd	r17, Y+3	; 0x03
    47ce:	aa 81       	ldd	r26, Y+2	; 0x02
    47d0:	b9 81       	ldd	r27, Y+1	; 0x01
    47d2:	ce 0f       	add	r28, r30
    47d4:	d1 1d       	adc	r29, r1
    47d6:	0f b6       	in	r0, 0x3f	; 63
    47d8:	f8 94       	cli
    47da:	de bf       	out	0x3e, r29	; 62
    47dc:	0f be       	out	0x3f, r0	; 63
    47de:	cd bf       	out	0x3d, r28	; 61
    47e0:	ed 01       	movw	r28, r26
    47e2:	08 95       	ret

000047e4 <memcpy>:
    47e4:	fb 01       	movw	r30, r22
    47e6:	dc 01       	movw	r26, r24
    47e8:	02 c0       	rjmp	.+4      	; 0x47ee <memcpy+0xa>
    47ea:	01 90       	ld	r0, Z+
    47ec:	0d 92       	st	X+, r0
    47ee:	41 50       	subi	r20, 0x01	; 1
    47f0:	50 40       	sbci	r21, 0x00	; 0
    47f2:	d8 f7       	brcc	.-10     	; 0x47ea <memcpy+0x6>
    47f4:	08 95       	ret

000047f6 <memset>:
    47f6:	dc 01       	movw	r26, r24
    47f8:	01 c0       	rjmp	.+2      	; 0x47fc <memset+0x6>
    47fa:	6d 93       	st	X+, r22
    47fc:	41 50       	subi	r20, 0x01	; 1
    47fe:	50 40       	sbci	r21, 0x00	; 0
    4800:	e0 f7       	brcc	.-8      	; 0x47fa <memset+0x4>
    4802:	08 95       	ret

00004804 <strncpy>:
    4804:	fb 01       	movw	r30, r22
    4806:	dc 01       	movw	r26, r24
    4808:	41 50       	subi	r20, 0x01	; 1
    480a:	50 40       	sbci	r21, 0x00	; 0
    480c:	48 f0       	brcs	.+18     	; 0x4820 <strncpy+0x1c>
    480e:	01 90       	ld	r0, Z+
    4810:	0d 92       	st	X+, r0
    4812:	00 20       	and	r0, r0
    4814:	c9 f7       	brne	.-14     	; 0x4808 <strncpy+0x4>
    4816:	01 c0       	rjmp	.+2      	; 0x481a <strncpy+0x16>
    4818:	1d 92       	st	X+, r1
    481a:	41 50       	subi	r20, 0x01	; 1
    481c:	50 40       	sbci	r21, 0x00	; 0
    481e:	e0 f7       	brcc	.-8      	; 0x4818 <strncpy+0x14>
    4820:	08 95       	ret

00004822 <_exit>:
    4822:	f8 94       	cli

00004824 <__stop_program>:
    4824:	ff cf       	rjmp	.-2      	; 0x4824 <__stop_program>
